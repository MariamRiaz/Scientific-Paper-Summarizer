{"sections": [{"heading": "1. Introduction", "text": "Convolutional neural networks (CNNs) (LeCun et al., 1998) have proven successful across many tasks including image classification (LeCun et al., 1998; Krizhevsky et al., 2012), face recognition (Lawrence et al., 1997), speech recognition (Hinton et al., 2012), text classification (Wang et al., 2012), and game playing (Mnih et al., 2015; Silver et al., 2016). There are two principal advantages of a CNN over a fully-connected neural network: (i) sparsity\u2014each nonlinear convolutional filter acts only on a local patch of the input, and (ii) parameter sharing\u2014the same filter is applied to each patch.\nHowever, as with most neural networks, the standard approach to training CNNs is based on solving a nonconvex optimization problem that is known to be NP-hard (Blum\n1Stanford University, CA, USA 2University of California, Berkeley, CA, USA. Correspondence to: Yuchen Zhang <zhangyuc@cs.stanford.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\n& Rivest, 1992). In practice, researchers use some flavor of stochastic gradient method, in which gradients are computed via backpropagation (Bottou, 1998). This approach has two drawbacks: (i) the rate of convergence, which is at best only to a local optimum, can be slow due to nonconvexity (for instance, see the paper (Fahlman, 1988)), and (ii) its statistical properties are very difficult to understand, as the actual performance is determined by some combination of the CNN architecture along with the optimization algorithm.\nIn this paper, with the goal of addressing these two challenges, we propose a new model class known as convexified convolutional neural networks (CCNNs). These models have two desirable features. First, training a CCNN corresponds to a convex optimization problem, which can be solved efficiently and optimally via a projected gradient algorithm. Second, the statistical properties of CCNN models can be studied in a precise and rigorous manner. We obtain CCNNs by convexifying two-layer CNNs; doing so requires overcoming two challenges. First, the activation function of a CNN is nonlinear. In order to address this issue, we relax the class of CNN filters to a reproducing kernel Hilbert space (RKHS). This approach is inspired by the paper (Zhang et al., 2016a), which put forth a relaxation for fully-connected neural networks. Second, the parameter sharing induced by CNNs is crucial to its effectiveness and must be preserved. We show that CNNs with RKHS filters can be parametrized by a low-rank matrix. Relaxing this low-rank constraint to a nuclear norm constraint leads to our final formulation of CCNNs.\nOn the theoretical front, we prove an oracle inequality on the generalization error achieved by our class of CCNNs, showing that it is upper bounded by the best possible performance achievable by a two-layer CNN given infinite data\u2014a quantity to which we refer as the oracle risk\u2014plus a model complexity term that decays to zero polynomially in the sample size. Our results suggest that the sample complexity for CCNNs is significantly lower than that of the convexified fully-connected neural network (Zhang et al., 2016a), highlighting the importance of parameter sharing. For models with more than one hidden layer, our theory does not apply, but we provide encouraging empirical results using a greedy layer-wise training heuristic. Finally, we apply CCNNs to the MNIST handwritten digit dataset\nas well as four variation datasets (VariationsMNIST), and find that it achieves state-of-the-art accuracy.\nRelated work. With the empirical success of deep neural networks, there has been an increasing interest in understanding its connection to convex optimization. Bengio et al. (2005) showed how to formulate neural network training as a convex optimization problem involving an infinite number of parameters. Aslan et al. (2013; 2014) propose a method for learning multi-layer latent-variable models. They showed that for certain activation functions, the proposed method is a convex relaxation for learning fullyconnected neural networks.\nPast work has studied learning translation-invariant features without backpropagation. Mairal et al. (2014) present convolutional kernel networks. They propose a translationinvariant kernel whose feature mapping can be approximated by a composition of the convolution, non-linearity and pooling operators, obtained through unsupervised learning. However, this method is not equipped with the optimality guarantees that we provide for CCNNs in this paper, even for learning one convolutional layer. The ScatNet method (Bruna & Mallat, 2013) uses translation and deformation-invariant filters constructed by wavelet analysis; however, these filters are independent of the data, in contrast to CCNNs. Daniely et al. (2016) show that a randomly initialized CNN can extract features as powerful as kernel methods, but it is not clear how to provably improve the model from random initialization.\nNotation. For any positive integer n, we use [n] as a shorthand for the discrete set {1, 2, . . . , n}. For a rectangular matrix A, let \u2016A\u2016\u2217 be its nuclear norm, \u2016A\u20162 be its spectral norm (i.e., maximal singular value), and \u2016A\u2016F be its Frobenius norm. We use `2(N) to denote the set of countable dimensional vectors v = (v1, v2, . . . ) such that \u2211\u221e `=1 v 2 ` < \u221e. For any vectors u, v \u2208 `2(N),\nthe inner product \u3008u, v\u3009 := \u2211\u221e `=1 uivi and the `2-norm\n\u2016u\u20162 := \u221a \u3008u, u\u3009 are well defined."}, {"heading": "2. Background and problem setup", "text": "In this section, we formalize the class of convolutional neural networks to be learned and describe the associated nonconvex optimization problem."}, {"heading": "2.1. Convolutional neural networks", "text": "At a high level, a two-layer CNN1 is a function that maps an input vector x \u2208 Rd0 (e.g., an image) to an output vector in y \u2208 Rd2 (e.g., classification scores for d2 classes). This mapping is formed in the following manner:\n1Average pooling and multiple channels are also an integral part of CNNs, but these do not present any new technical challenges, so that we defer these extensions to Section 4.\n\u2022 First, we extract a collection of P vectors {zp(x)}Pp=1 of the full input vector x. Each vector zp(x) \u2208 Rd1 is referred to as a patch, and these patches may depend on overlapping components of x. \u2022 Second, given some choice of activation function \u03c3 : R\u2192 R and a collection of weight vectors {wj}rj=1 in Rd1 , we define the functions\nhj(z) := \u03c3(w > j z) for each patch z \u2208 Rd1 . (1)\nEach function hj (for j \u2208 [r]) is known as a filter, and note that the same filters are applied to each patch\u2014this corresponds to the parameter sharing of a CNN. \u2022 Third, for each patch index p \u2208 [P ], filter index j \u2208 [r], and output coordinate k \u2208 [d2], we introduce a coefficient \u03b1k,j,p \u2208 R that governs the contribution of the filter hj on patch zp(x) to output fk(x). The final form of the CNN is given by f(x) : = (f1(x), . . . , fd2(x)), where the kth component is given by\nfk(x) := r\u2211 j=1 P\u2211 p=1 \u03b1k,j,phj(zp(x)). (2)\nTaking the patch functions {zp}Pp=1 and activation function \u03c3 as fixed, the parameters of the CNN are the filter vectors w := {wj \u2208 Rd1 : j \u2208 [r]} along with the collection of coefficient vectors \u03b1 := {\u03b1k,j \u2208 RP : k \u2208 [d2], j \u2208 [r]}. We assume that all patch vectors zp(x) \u2208 Rd1 are contained in the unit `2-ball. This assumption can be satisfied without loss of generality by normalization: By multiplying a constant \u03b3 > 0 to every patch zp(x) and multiplying 1/\u03b3 to the filter vectors w, this assumption holds without changing the the output of the network.\nGiven some positive radii B1 and B2, we consider the model class\nFcnn(B1, B2) := { f of the form (2) : max\nj\u2208[r] \u2016wj\u20162 \u2264 B1\nand max k\u2208[d2],j\u2208[r]\n\u2016\u03b1k,j\u20162 \u2264 B2 } . (3)\nWhen the radii (B1, B2) are clear from context, we adopt Fcnn as a convenient shorthand."}, {"heading": "2.2. Empirical risk minimization.", "text": "Given an input-output pair (x, y) and a CNN f , we let L(f(x); y) denote the loss incurred when the output y is predicted via f(x). We assume that the loss function L is convex and L-Lipschitz in its first argument given any value of its second argument. As a concrete example, for multiclass classification with d2 classes, the output vector y takes values in the discrete set [d2] = {1, 2, . . . , d2}. For example, given a vector f(x) = (f1(x), . . . , fd2(y)) \u2208 Rd2 of classification scores, the associated multiclass logistic loss for a pair (x, y) is given by L(f(x); y) := \u2212fy(x) +\nlog (\u2211d2 y\u2032=1 exp(fy\u2032(x)) ) .\nGiven n training examples {(xi, yi)}ni=1, we would like to compute an empirical risk minimizer:\nf\u0302cnn \u2208 arg min f\u2208Fcnn n\u2211 i=1 L(f(xi); yi). (4)\nRecalling that functions f \u2208 Fcnn depend on the parameters w and \u03b1 in a highly nonlinear way (2), this optimization problem is nonconvex. As mentioned earlier, heuristics based on stochastic gradient methods are used in practice, which makes it challenging to gain a theoretical understanding of their behavior. Thus, in the next section, we describe a relaxation of the class Fcnn for which empirical risk minimization is convex."}, {"heading": "3. Convexifying CNNs", "text": "We now turn to the development of the class of convexified CNNs. We begin in Section 3.1 by illustrating the procedure for the special case of the linear activation function. Although the linear case is not of practical interest, it provides intuition for our more general convexification procedure, described in Section 3.2, which applies to nonlinear activation functions. In particular, we show how embedding the nonlinear problem into an appropriately chosen reproducing kernel Hilbert space (RKHS) allows us to again reduce to the linear setting."}, {"heading": "3.1. Linear activation functions: low rank relaxations", "text": "In order to develop intuition for our approach, let us begin by considering the simple case of the linear activation function \u03c3(t) = t. In this case, the filter hj when applied to the patch vector zp(x) outputs a Euclidean inner product of the form hj(zp(x)) = \u3008zp(x), wj\u3009. For each x \u2208 Rd0 , we first define the P \u00d7 d1-dimensional matrix\nZ(x) := z1(x) >\n... zP (x) >  . (5) We also define the P -dimensional vector \u03b1k,j := (\u03b1k,j,1, . . . , \u03b1k,j,P )\n>. With this notation, we can rewrite equation (2) for the kth output as\nfk(x) = r\u2211 j=1 P\u2211 p=1 \u03b1k,j,p\u3008zp(x), wj\u3009 = r\u2211 j=1 \u03b1>k,jZ(x)wj\n= tr ( Z(x) ( r\u2211 j=1 wj\u03b1 > k,j )) = tr(Z(x)Ak), (6)\nwhere in the final step, we have defined the d1 \u00d7 P - dimensional matrix Ak := \u2211r j=1 wj\u03b1 > k,j . Observe that fk now depends linearly on the matrix parameter Ak. Moreover, the matrixAk has rank at most r, due to the parameter\nsharing of CNNs. See Figure 1 for a graphical illustration of this model structure.\nLetting A := (A1, . . . , Ad2) be a concatenation of these matrices across all d2 output coordinates, we can then define a function fA : Rd1 \u2192 Rd2 of the form\nfA(x) := (tr(Z(x)A1), . . . , tr(Z(x)Ad2)). (7)\nNote that these functions have a linear parameterization in terms of the underlying matrix A. Our model class corresponds to a collection of such functions based on imposing certain constraints on the underlying matrix A: in particular, we define Fcnn(B1, B2) to be the set of functions fA which satisfies: (C1) maxj\u2208[r] \u2016wj\u20162 \u2264 B1, maxk\u2208[d2],j\u2208[r] \u2016\u03b1k,j\u20162 \u2264 B2; and (C2) rank(A) = r. This is simply an alternative formulation of our original class of CNNs defined in equation (3). Notice that if the filter weights wj are not shared across all patches, then the constraint (C1) still holds, but constraint (C2) no longer holds. Thus, the parameter sharing of CNNs is realized by the low-rank constraint (C2). The matrix A of rank r can be decomposed as A = UV >, where both U and V have r columns. The column space of matrix A contains the convolution parameters {wj}, and the row space of A contains to the output parameters {\u03b1k,j}.\nThe matrices satisfying constraints (C1) and (C2) form a nonconvex set. A standard convex relaxation is based on the nuclear norm \u2016A\u2016\u2217 corresponding to the sum of the singular values of A. It is straightforward to verify that any matrix A satisfying the constraints (C1) and (C2) must have nuclear norm bounded as \u2016A\u2016\u2217 \u2264 B1B2r \u221a d2. Consequently, if we define the function class\nFccnn := { fA : \u2016A\u2016\u2217 \u2264 B1B2r \u221a d2 } , (8)\nthen we are guaranteed that Fccnn \u2287 Fcnn.\nWe propose to minimize the empirical risk (4) over Fccnn instead of Fcnn; doing so defines a convex optimization problem over this richer class of functions\nf\u0302ccnn := arg min fA\u2208Fccnn n\u2211 i=1 L(fA(xi); yi). (9)\nIn Section 3.3, we describe iterative algorithms that can be used to solve this convex problem in the more general setting of nonlinear activation functions."}, {"heading": "3.2. Nonlinear activations: RKHS filters", "text": "For nonlinear activation functions \u03c3, we relax the class of CNN filters to a reproducing kernel Hilbert space (RKHS). As we will show, this relaxation allows us to reduce the problem to the linear activation case.\nLet K : Rd1 \u00d7 Rd1 \u2192 R be a positive semidefinite kernel function. For particular choices of kernels (e.g., the Gaus-\nsian RBF kernel) and a sufficiently smooth activation function \u03c3, we are able to show that the filter h : z 7\u2192 \u03c3(\u3008w, z\u3009) is contained in the RKHS induced by the kernel functionK. See Section 3.4 for the choice of the kernel function and the activation function. Let S := {zp(xi) : p \u2208 [P ], i \u2208 [n]} be the set of patches in the training dataset. The representer theorem then implies that for any patch zp(xi) \u2208 S, the function value can be represented by\nh(zp(xi)) = \u2211\n(i\u2032,p\u2032)\u2208[n]\u00d7[P ]\nci\u2032,p\u2032K(zp(xi), zp\u2032(xi\u2032)) (10)\nfor some coefficients {ci\u2032,p\u2032}(i\u2032,p\u2032)\u2208[n]\u00d7[P ]. Filters of the form (10) are members of the RKHS, because they are linear combinations of basis functions z 7\u2192 K(z, zp\u2032(xi\u2032)). Such filters are parametrized by a finite set of coefficients {ci\u2032,p\u2032}(i\u2032,p\u2032)\u2208[n]\u00d7[P ], which can be estimated via empirical risk minimization.\nLet K \u2208 RnP\u00d7nP be the symmetric kernel matrix, where with rows and columns indexed by the example-patch index pair (i, p) \u2208 [n] \u00d7 [P ]. The entry at row (i, p) and column (i\u2032, p\u2032) of matrix K is equal to K(zp(xi), zp\u2032(xi\u2032)). So as to avoid re-deriving everything in the kernelized setting, we perform a reduction to the linear setting of Section 3.1. Consider a factorization K = QQ> of the kernel matrix, where Q \u2208 RnP\u00d7m; one example is the Cholesky factorization with m = nP . We can interpret each row Q(i,p) \u2208 Rm as a feature vector in place of the original zp(xi) \u2208 Rd1 , and rewrite equation (10) as\nh(zp(xi)) = \u3008Q(i,p), w\u3009 where w := \u2211 (i\u2032,p\u2032) ci\u2032,p\u2032Q(i\u2032,p\u2032).\nIn order to learn the filter h, it suffices to learn the mdimensional vector w. To do this, define patch matrices Z(xi) \u2208 RP\u00d7m for each i \u2208 [n] so that its p-th row is Q(i,p). Then the problem reduces to learning a linear filter with coefficient vector w. Carrying out all of Sec-\ntion 3.1, solving the ERM gives us a parameter matrix A \u2208 Rm\u00d7Pd2 . The only difference is that `2-norm constraint (C1) needs to be adapted to the norm of the RKHS. See Appendix B for details.\nAt test time, given a new input x \u2208 Rd0 , we can compute a patch matrix Z(x) \u2208 RP\u00d7m as follows: \u2022 The p-th row of this matrix is the feature vector for\npatch p, which is equal to Q\u2020v(zp(x)) \u2208 Rm, where for any patch z, the vector v(z) is defined as a nP - dimensional vector whose (i, p)-th coordinate is equal to K(z, zp(xi)). We note that if x is an instance xi in the training set, then the vector Q\u2020v(zp(x)) is exactly equal to Q(i,p). Thus the mapping Z(x) applies to both training and testing.\n\u2022 We can then compute the predictor fk(x) = tr(Z(x)Ak) via equation (6). Note that we do not explicitly need to compute the filter values hj(zp(x)) to compute the output under the CCNN.\nRetrieving filters. When we learn multi-layer CCNNs (Section 4), we need to compute the filters hj explicitly in order to form the inputs to the next layer. Recall from Section 3.1 that the column space of matrix A corresponds to parameters of the convolutional layer, and the row space of A corresponds to parameters of the output layer. Thus, once we obtain the parameter matrixA, we compute a rankr approximation A \u2248 U\u0302 V\u0302 >. Then set the j-th filter hj to the mapping\nz 7\u2192 \u3008U\u0302j , Q\u2020v(z)\u3009 for any patch z \u2208 Rd1 , (11)\nwhere U\u0302j \u2208 Rm is the j-th column of matrix U\u0302 , and Q\u2020v(z) represents the feature vector for patch z.2 The matrix V\u0302 > encodes parameters of the output layer, thus\n2If z is a patch in the training set, namely z = zp(xi), then we have equation Q\u2020v(z) = Q(i,p)\nAlgorithm 1 Learning two-layer CCNNs Input: Data {(xi, yi)}ni=1, kernel function K, regularization parameter R > 0, number of filters r. 1. Construct a kernel matrix K \u2208 RnP\u00d7nP such that the entry\nat column (i, p) and row (i\u2032, p\u2032) is equal to K(zp(xi), zp\u2032(xi\u2032)). Compute a factorization K = QQ> or an approximation K \u2248 QQ>, where Q \u2208 RnP\u00d7m.\n2. For each xi, construct patch matrix Z(xi) \u2208 RP\u00d7m whose p-th row is the (i, p)-th row of Q, where Z(\u00b7) is defined in Section 3.2. 3. Solve the following optimization problem to obtain a matrix A\u0302 = (A\u03021, . . . , A\u0302d2):\nA\u0302 \u2208 argmin \u2016A\u2016\u2217\u2264R L\u0303(A) where (12)\nL\u0303(A) := n\u2211\ni=1\nL (( tr(Z(xi)A1), . . . , tr(Z(xi)Ad2) ) ; yi ) .\n4. Compute a rank-r approximation U\u0302 V\u0302 > \u2248 A\u0302 where U\u0302 \u2208 Rm\u00d7r and V\u0302 \u2208 RPd2\u00d7r .\nOutput: predictor f\u0302ccnn(x) := ( tr(Z(x)A\u03021), . . . , tr(Z(x)A\u0302d2) ) and the convolutional layer output H(x) := U\u0302>Z(x)>.\ndoesn\u2019t appear in the filter expression (11). It is important to note that the filter retrieval is not unique, because the rank-r approximation of the matrix A is not unique. The heuristic we suggest is to form the singular value decomposition A = U\u039bV >, then define U\u0302 to be the first r columns of U .\nWhen we apply all of the r filters to all patches of an input x \u2208 Rd0 , the resulting output is H(x) := U\u0302>Z(x)> \u2014 this is an r\u00d7P matrix whose element at row j and column p is equal to hj(zp(x))."}, {"heading": "3.3. Algorithm", "text": "The algorithm for learning a two-layer CCNN is summarized in Algorithm 1; it is a formalization of the steps described in Section 3.2. In order to solve the optimization problem (12), the simplest approach is via projected gradient descent: At iteration t, using a step size \u03b7t > 0, we form the new matrix At+1 based on the previous iterate At according to:\nAt+1 = \u03a0R ( At \u2212 \u03b7t \u2207AL\u0303(At) ) . (13)\nHere \u2207AL\u0303 denotes the gradient of the objective function defined in (12), and \u03a0R denotes the Euclidean projection onto the nuclear norm ball {A : \u2016A\u2016\u2217 \u2264 R}. This nuclear norm projection can be obtained by first computing the singular value decomposition of A, and then projecting the vector of singular values onto the `1-ball. This latter projection step can be carried out efficiently by the algorithm of Duchi et al. (2008). There are other efficient optimiza-\ntion algorithms (Duchi et al., 2011; Xiao & Zhang, 2014) for solving the problem (12). All these algorithms can be executed in a stochastic fashion, so that each gradient step processes a mini-batch of examples.\nThe computational complexity of each iteration depends on the width m of the matrix Q. Setting m = nP allows us to solve the exact kernelized problem, but to improve the computation efficiency, we can use Nystro\u0308m approximation (Drineas & Mahoney, 2005) or random feature approximation (Rahimi & Recht, 2007); both are randomized methods to obtain a tall-and-thin matrix Q \u2208 RnP\u00d7m such thatK \u2248 QQ>. Typically, the parameterm is chosen to be much smaller than nP . In order to compute the matrix Q, the Nystro\u0308m approximation method takes O(m2nP ) time. The random feature approximation takesO(mnPd1) time, but can be improved to O(mnP log d1) time using the fast Hadamard transform (Le et al., 2013). The time complexity of project gradient descent also scales with m rather than with nP ."}, {"heading": "3.4. Theoretical results", "text": "In this section, we upper bound the generalization error of Algorithm 1, proving that it converges to the best possible generalization error of CNN. We focus on the binary classification case where the output dimension is d2 = 1.3\nThe learning of CCNN requires a kernel function K. We consider kernel functions whose associated RKHS is large enough to contain any function of the following form: z 7\u2192 q(\u3008w, z\u3009), where q is an arbitrary polynomial function and w \u2208 Rd1 is an arbitrary vector. As a concrete example, we consider the inverse polynomial kernel:\nK(z, z\u2032) := 1 2\u2212 \u3008z, z\u2032\u3009 , \u2016z\u20162 \u2264 1, \u2016z\u2032\u20162 \u2264 1. (14)\nThis kernel was studied by Shalev-Shwartz et al. (2011) for learning halfspaces, and by Zhang et al. (2016a) for learning fully-connected neural networks. We also consider the Gaussian RBF kernel:\nK(z, z\u2032) := e\u2212\u03b3\u2016z\u2212z \u2032\u201622 , \u2016z\u20162 = \u2016z\u2032\u20162 = 1. (15)\nAs shown by Appendix A, the inverse polynomial kernel and the Gaussian kernel satisfy the above notion of richness. We focus on these two kernels for the theoretical analysis.\nLet f\u0302ccnn be the CCNN that minimizes the empirical risk (12) using one of the two kernels above. Our main theoretical result is that for suitably chosen activation functions, the generalization error of f\u0302ccnn is comparable to that of the best CNN model. In particular, we consider the following types of activation functions \u03c3:\n3We can treat the multiclass case by performing a standard one-versus-all reduction to the binary case.\n(a) arbitrary polynomial functions (e.g., used by Chen & Manning (2014); Livni et al. (2014)).\n(b) sinusoid activation function \u03c3(t) := sin(t) (e.g., used by Sopena et al. (1999); Isa et al. (2010)).\n(c) erf function \u03c3erf(t) := 2/ \u221a \u03c0 \u222b t 0 e\u2212z 2\ndz, which represents a close approximation to the sigmoid function (Zhang et al., 2016a).\n(d) a smoothed hinge loss \u03c3sh(t) := \u222b t \u2212\u221e 1 2 (\u03c3erf(z) +\n1)dz, which represents a close approximation to the ReLU function (Zhang et al., 2016a).\nTo understand how these activation functions pair with our choice of kernels, we consider polynomial expansions of the above activation functions: \u03c3(t) = \u2211\u221e j=0 ajt\nj , and note that the smoothness of these functions are characterized by the rate of their coefficients {aj}\u221ej=0 converging to zero. If \u03c3 is a polynomial in category (a), then the richness of the RKHS guarantees that it contains the class of filters activated by function \u03c3. If \u03c3 is a non-polynomial function in categories (b),(c),(d), then as Appendix A shows, the RKHS contains the filter only if the coefficients {aj}\u221ej=0 converge quickly enough to zero (the criterion depends on the concrete choice of the kernel). Concretely, the inverse polynomial kernel is shown to capture all of the four categories of activations: thus, (a), (b), (c), and (d) are all are referred as valid activation functions for the inverse polynomial kernel. The Gaussian kernel induces a smaller RKHS, so only (a) and (b) are valid activation functions for the Gaussian kernel. In contrast, the sigmoid function and the ReLU function are not valid for either kernel, because their polynomial expansions fail to converge quickly enough, or more intuitively speaking, because they are not smooth enough to be contained in the RKHS.\nWe are ready to state the main theoretical result. In the theorem statement, we use K(X) \u2208 RP\u00d7P to denote the random kernel matrix obtained from an input vector X \u2208 Rd0 drawn randomly from the population. More precisely, the (p, q)-th entry of K(X) is given by K(zp(X), zq(X)).\nTheorem 1. Assume that the loss function L(\u00b7; y) is LLipchitz continuous for every y \u2208 [d2] and that K is the inverse polynomial kernel or the Gaussian kernel. For any valid activation function \u03c3, there is a constantC\u03c3(B1) such that by choosing hyper-parameterR := C\u03c3(B1)B2r in Algorithm 1, the expected generalization error is at most\nEX,Y [L(f\u0302ccnn(X);Y )] \u2264 inf f\u2208Fcnn EX,Y [L(f(X);Y )]\n+ c LC\u03c3(B1)B2r \u221a log(nP ) EX [\u2016K(X)\u20162]\u221a\nn , (16)\nwhere c > 0 is a universal constant.\nProof sketch The proof of Theorem 1 consists of two parts: First, we consider a larger function class that con-\ntains the class of CNNs. This function class is defined as:\nFccnn := { x 7\u2192 r\u2217\u2211 j=1 P\u2211 p=1 \u03b1j,phj(zp(x)) : r \u2217 <\u221e (17)\nand r\u2217\u2211 j=1 \u2016\u03b1j\u20162\u2016hj\u2016H \u2264 C\u03c3(B1)B2d2 } . (18)\nwhere \u2016\u00b7\u2016H is the norm of the RKHS associated with the kernel. This new function class relaxes the class of CNNs in two ways: 1) the filters are relaxed to belong to the RKHS, and 2) the `2-norm bounds on the weight vectors are replaced by a single constraint on \u2016\u03b1j\u20162 and \u2016hj\u2016H. We prove the following property for the predictor f\u0302ccnn: it must be an empirical risk minimizer ofFccnn. This property holds even though equation (18) defines a non-parametric function class Fccnn, while Algorithm 1 optimizes f\u0302ccnn in a parametric function class.\nSecond, we characterize the Rademacher complexity of this new function class Fccnn, proving an upper bound for it based on the matrix concentration theory. Combining this bound with the classical Rademacher complexity theory (Bartlett & Mendelson, 2003), we conclude that the generalization loss of f\u0302ccnn converges to the least possible generalization error of Fccnn. The latter loss is bounded by the generalization loss of CNNs (because Fcnn \u2286 Fccnn), which establishes the theorem. See the full version of this paper (Zhang et al., 2016b) for a rigorous proof of Theorem 1.\nRemark on activation functions. It is worth noting that the quantity C\u03c3(B1) depends on the activation function \u03c3, and more precisely, depends on the convergence rate of the polynomial expansion of \u03c3. Appendix A shows that if \u03c3 is a polynomial function of degree `, then C\u03c3(B1) = O(B`1). If \u03c3 is the sinusoid function, the erf function or the smoothed hinge loss, then the quantity C\u03c3(B1) will be exponential in B1. From an algorithmic perspective, we don\u2019t need to know the activation function for executing Algorithm 1. From a theoretical perspective, however, the choice of \u03c3 is relevant from the point of Theorem 1 to compare f\u0302ccnn with the best CNN, whose representation power is characterized by the choice of \u03c3. Therefore, if a CNN with a low-degree polynomial \u03c3 performs well on a given task, then CCNN also enjoys correspondingly strong generalization. Empirically, this is actually borne out: in Section 5, we show that the quadratic activation function performs almost as well as the ReLU function for digit classification.\nRemark on parameter sharing. In order to demonstrate the importance of parameter sharing, consider a CNN without parameter sharing, so that we have filter weights wj,p for each filter index j and patch index p. With this change,\nthe new CNN output (2) is\nf(x) = r\u2211 j=1 P\u2211 p=1 \u03b1j,p\u03c3(w > j,pzp(x)),\nwhere \u03b1j,p \u2208 R and wj,p \u2208 Rd1 . Note that the hidden layer of this new network has P times more parameters than that of the convolutional neural network with parameter sharing. These networks without parameter sharing can be learned by the recursive kernel method proposed by Zhang et al. (2016a). Their paper shows that under the norm constraints \u2016wj\u20162 \u2264 B\u20321 and\u2211r j=1 \u2211P p=1 |\u03b1j,p| \u2264 B\u20322, the excess risk of the recur-\nsive kernel method is at most O(LC\u03c3(B\u20321)B\u20322 \u221a Kmax/n), where Kmax = maxz:\u2016z\u20162\u22641K(z, z) is the maximal value of the kernel function. Plugging in the norm constraints of the function class Fcnn, we have B\u20321 = B1 and B\u20322 = B2r \u221a P . Thus, the expected risk of the estimated f\u0302 is bounded by:\nEX,Y [L(f\u0302(X);Y )] \u2264 inf f\u2208Fcnn EX,Y [L(f(X);Y )]\n+ c LC\u03c3(B1)B2r \u221a PKmax\u221a\nn . (19)\nComparing this bound to Theorem 1, we see that (apart from the logarithmic terms) they differ in the multiplicative factors of \u221a P Kmax versus \u221a E[\u2016K(X)\u20162]. Since the matrix K(X) is P -dimensional, we have\n\u2016K(X)\u20162 \u2264 max p\u2208[P ] \u2211 q\u2208[P ] |K(zp(X), zq(X))| \u2264 P Kmax.\nThis demonstrates that \u221a P Kmax is always greater than\u221a\nE[\u2016K(X)\u20162]. In general, the first term can be up to factor of \u221a P times greater, which implies that the sample complexity of the recursive kernel method is up to P times greater than that of the CCNN. This difference is intuitive given that the recursive kernel method learns a model with P times more parameters. Although comparing the upper bounds doesn\u2019t rigorously show that one method is better than the other, it gives intuition for understanding the importance of parameter sharing."}, {"heading": "4. Learning multi-layer CCNNs", "text": "In this section, we describe a heuristic method for learning CNNs with more layers. The idea is to estimate the parameters of the convolutional layers incrementally from bottom to top. Before presenting the multi-layer algorithm, we present two extensions, average pooling and multi-channel inputs.\nAverage pooling. Average pooling is a technique to reduce the output dimension of the convolutional layer from dimensions P \u00d7 r to dimensions P \u2032 \u00d7 r with P \u2032 < P . For the CCNN model, if we apply average pooling after\nAlgorithm 2 Learning multi-layer CCNNs Input:Data {(xi, yi)}ni=1, kernel function K, number of layers m, regularization parameters R1, . . . , Rm, number of filters r1, . . . , rm. Define H1(x) = x. For each layer s = 2, . . . ,m: \u2022 Train a two-layer network by Algorithm 1, taking {(Hs\u22121(xi), yi)}ni=1 as training examples and Rs, rs as parameters. Let Hs be the output of the convolutional layer and f\u0302s be the predictor. Output: Predictor f\u0302m and the top layer output Hm.\nthe convolutional layer, then the k-th output of the CCNN model becomes tr(GZ(x)Ak) where G \u2208 RP\n\u2032\u00d7P is the pooling matrix. Thus, performing a pooling operation requires only replacing every matrix Z(xi) in problem (12) by the pooled matrix GZ(xi). Note that the linearity of the CCNN allows us to effectively pool before convolution, even though for the CNN, pooling must be done after applying the nonlinear filters. The resulting ERM problem is still convex, and the number of parameters have been reduced by P/P \u2032-fold.\nProcessing multi-channel inputs. If our input has C channels (corresponding to RGB colors, for example), then the input becomes a matrix x \u2208 RC\u00d7d0 . The c-th row of matrix x, denoted by x[c] \u2208 Rd0 , is a vector representing the c-th channel. We define the multi-channel patch vector as a concatenation of patch vectors for each channel:\nzp(x) := (zp(x[1]), . . . , zp(x[C])) \u2208 RCd1 . Then we construct the feature matrix Z(x) using the concatenated patch vectors {zp(x)}Pp=1. From here, everything else of Algorithm 1 remains the same. We note that this approach learns a convex relaxation of filters taking the form \u03c3( \u2211C c=1\u3008wc, zp(x[c])\u3009), parametrized by the vectors {wc}Cc=1.\nMulti-layer CCNN. Given these extensions, we are ready to present the algorithm for learning multi-layer CCNNs, summarized in Algorithm 2. For each layer s, we call Algorithm 1 using the output of previous convolutional layers as input\u2014note that this consists of r channels (one from each previous filter); thus we must use the multi-channel extension. Algorithm 2 outputs a new convolutional layer along with a prediction function, which is kept only at the last layer. We optionally use averaging pooling after each successive layer. to reduce the output dimension of the convolutional layers."}, {"heading": "5. Experiments", "text": "In this section, we compare the CCNN approach with other methods on the MNIST dataset and more challenging variations (VariationsMNIST), including adding white noise (rand), random rotation (rot), random image back-\nground (img) or combining the last two (img+rot). For all datasets, we use 10,000 images for training, 2,000 images for validation and 50,000 images for testing. This 10k/2k/50k partitioning is standard for MNIST variations (VariationsMNIST).\nFor the CCNN method and the baseline CNN method, we train two-layer and three-layer models respectively. The models with k convolutional layers are denoted by CCNNk and CNN-k. Each convolutional layer is constructed on 5 \u00d7 5 patches with unit stride, followed by 2 \u00d7 2 average pooling. The first and the second convolutional layers contains 16 and 32 filters, respectively. The loss function is chosen as the 10-class logistic loss. We use Gaussian kernel for the CCNN. The feature matrix Z(x) is constructed via random feature approximation (Rahimi & Recht, 2007) with dimension m = 500 for the first convolutional layer and m = 1000 for the second. Before training each CCNN layer, we preprocess the input vectors zp(xi) using local contrast normalization and ZCA whitening (Coates et al., 2010). The convex optimization problem is solved by projected SGD with mini-batches of size 50. Code and reproducible experiments are available on the CodaLab platform4.\nAs a baseline approach, the CNN models are activated by the ReLU function \u03c3(t) = max{0, t} or the quadratic function \u03c3(t) = t2. We train them using mini-batch SGD. The input images are preprocessed by global contrast normalization and ZCA whitening (Srivastava et al., 2014). We compare our method against several alternative baselines. The CCNN-1 model is compared against an SVM with the Gaussian RBF kernel (SVMrbf ) and a fully connected neural network with one hidden layer (NN1). The CCNN-2 model is compared against methods that report the state-of-the-art results on these datasets, including the translation-invariant RBM model (TIRBM) (Sohn & Lee, 2012), the stacked denoising auto-encoder with\n4http://worksheets.codalab.org/ worksheets/0x1468d91a878044fba86a5446f52aacde/\nthree hidden layers (SDAE-3) (Vincent et al., 2010), the ScatNet-2 model (Bruna & Mallat, 2013) and the PCANet2 model (Chan et al., 2015).\nTable 1 shows the classification errors on the test set. The models are grouped with respect to the number of layers that they contain. For models with one convolutional layer, the errors of CNN-1 are significantly lower than that of NN-1, highlighting the benefits of local filters and parameter sharing. The CCNN-1 model outperforms CNN-1 on all datasets. For models with two or more hidden layers, the CCNN-2 model outperforms CNN-2 on all datasets, and is competitive against the state-of-the-art. In particular, it achieves the best accuracy on the rand, img and img+rot dataset, and is comparable to the state-of-the-art on the remaining two datasets. Further adding a third convolutional layer doesn\u2019t notibly improve the performance on these datasets.\nIn Section 3.4, we showed that if the activation function \u03c3 is a polynomial function, then the CCNN (which does not depend on \u03c3) requires lower sample complexity to match the performance of the best possible CNN using \u03c3. More precisely, if \u03c3 is a degree-` polynomial, then C\u03c3(B) in the upper bound will be controlled by O(B`). This motivates us to study the performance of low-degree polynomial activations. Table 1 shows that the CNN-2 model with a quadratic activation function achieves error rates comparable to that with a ReLU activation: CNN-2 (Quad) outperforms CNN2 (ReLU) on the basic and rand datasets, and is only slightly worse on the rot and img dataset. Since the performance of CCNN matches that of the best possible CNN, the good performance of the quadratic activation in part explains why the CCNN is also good.\nAcknowledgements. MJW and YZ were partially supported by the Office of Naval Research Grant DOD ONRN00014 and the NSF Grant NSF-DMS-1612948. PL and YZ were partially supported by the Microsoft Faculty Fellowship."}], "year": 2017, "references": [{"title": "Convex two-layer modeling", "authors": ["Aslan", "\u00d6zlem", "Cheng", "Hao", "Zhang", "Xinhua", "Schuurmans", "Dale"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2013}, {"title": "Convex deep learning via normalized kernels", "authors": ["Aslan", "\u00d6zlem", "Zhang", "Xinhua", "Schuurmans", "Dale"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2014}, {"title": "Rademacher and Gaussian complexities: Risk bounds and structural results", "authors": ["Bartlett", "Peter L", "Mendelson", "Shahar"], "venue": "The Journal of Machine Learning Research,", "year": 2003}, {"title": "Convex neural networks", "authors": ["Bengio", "Yoshua", "Roux", "Nicolas L", "Vincent", "Pascal", "Delalleau", "Olivier", "Marcotte", "Patrice"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2005}, {"title": "Training a 3-node neural network is NP-complete", "authors": ["Blum", "Avrim L", "Rivest", "Ronald L"], "venue": "Neural Networks,", "year": 1992}, {"title": "Online learning and stochastic approximations", "authors": ["Bottou", "L\u00e9on"], "venue": "On-line learning in neural networks,", "year": 1998}, {"title": "Invariant scattering convolution networks. Pattern Analysis and Machine Intelligence", "authors": ["Bruna", "Joan", "Mallat", "St\u00e9phane"], "venue": "IEEE Transactions on,", "year": 2013}, {"title": "Pcanet: A simple deep learning baseline for image classification", "authors": ["Chan", "Tsung-Han", "Jia", "Kui", "Gao", "Shenghua", "Lu", "Jiwen", "Zeng", "Zinan", "Ma", "Yi"], "venue": "IEEE Transactions on Image Processing,", "year": 2015}, {"title": "A fast and accurate dependency parser using neural networks", "authors": ["Chen", "Danqi", "Manning", "Christopher D"], "venue": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP),", "year": 2014}, {"title": "An analysis of single-layer networks in unsupervised feature learning", "authors": ["Coates", "Adam", "Lee", "Honglak", "Ng", "Andrew Y"], "venue": "Ann Arbor,", "year": 2010}, {"title": "Toward deeper understanding of neural networks: The power of initialization and a dual view on expressivity", "authors": ["Daniely", "Amit", "Frostig", "Roy", "Singer", "Yoram"], "venue": "arXiv preprint arXiv:1602.05897,", "year": 2016}, {"title": "On the Nystr\u00f6m method for approximating a Gram matrix for improved kernel-based learning", "authors": ["Drineas", "Petros", "Mahoney", "Michael W"], "venue": "The Journal of Machine Learning Research,", "year": 2005}, {"title": "Efficient projections onto the `1-ball for learning in high dimensions", "authors": ["Duchi", "John", "Shalev-Shwartz", "Shai", "Singer", "Yoram", "Chandra", "Tushar"], "venue": "In Proceedings of the 25th International Conference on Machine Learning,", "year": 2008}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "authors": ["Duchi", "John", "Hazan", "Elad", "Singer", "Yoram"], "venue": "The Journal of Machine Learning Research,", "year": 2011}, {"title": "An empirical study of learning speed in back-propagation networks", "authors": ["Fahlman", "Scott E"], "venue": "Journal of Heuristics,", "year": 1988}, {"title": "Suitable mlp network activation functions for breast cancer and thyroid disease detection", "authors": ["IS Isa", "Z Saad", "S Omar", "MK Osman", "KA Ahmad", "Sakim", "HA Mat"], "venue": "In 2010 Second International Conference on Computational Intelligence, Modelling and Simulation,", "year": 2010}, {"title": "Imagenet classification with deep convolutional neural networks", "authors": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2012}, {"title": "Face recognition: A convolutional neuralnetwork approach", "authors": ["Lawrence", "Steve", "Giles", "C Lee", "Tsoi", "Ah Chung", "Back", "Andrew D"], "venue": "Neural Networks, IEEE Transactions on,", "year": 1997}, {"title": "Fastfoodapproximating kernel expansions in loglinear time", "authors": ["Le", "Quoc", "Sarl\u00f3s", "Tam\u00e1s", "Smola", "Alex"], "venue": "In Proceedings of the International Conference on Machine Learning,", "year": 2013}, {"title": "Gradient-based learning applied to document recognition", "authors": ["LeCun", "Yann", "Bottou", "L\u00e9on", "Bengio", "Yoshua", "Haffner", "Patrick"], "venue": "Proceedings of the IEEE,", "year": 1998}, {"title": "On the computational efficiency of training neural networks", "authors": ["Livni", "Roi", "Shalev-Shwartz", "Shai", "Shamir", "Ohad"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2014}, {"title": "Convolutional kernel networks", "authors": ["Mairal", "Julien", "Koniusz", "Piotr", "Harchaoui", "Zaid", "Schmid", "Cordelia"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2014}, {"title": "Random features for large-scale kernel machines", "authors": ["Rahimi", "Ali", "Recht", "Benjamin"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2007}, {"title": "Learning kernel-based halfspaces with the 01 loss", "authors": ["Shalev-Shwartz", "Shai", "Shamir", "Ohad", "Sridharan", "Karthik"], "venue": "SIAM Journal on Computing,", "year": 2011}, {"title": "Learning invariant representations with local transformations", "authors": ["Sohn", "Kihyuk", "Lee", "Honglak"], "venue": "In Proceedings of the 29th International Conference on Machine Learning", "year": 2012}, {"title": "Neural networks with periodic and monotonic activation functions: a comparative study in classification problems", "authors": ["Sopena", "Josep M", "Romero", "Enrique", "Alquezar", "Rene"], "venue": "In ICANN", "year": 1999}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "authors": ["Srivastava", "Nitish", "Hinton", "Geoffrey", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan"], "venue": "The Journal of Machine Learning Research,", "year": 1929}, {"title": "End-to-end text recognition with convolutional neural networks", "authors": ["Wang", "Tao", "Wu", "David J", "Coates", "Andrew", "Ng", "Andrew Y"], "venue": "In Pattern Recognition (ICPR),", "year": 2012}, {"title": "A proximal stochastic gradient method with progressive variance reduction", "authors": ["Xiao", "Lin", "Zhang", "Tong"], "venue": "SIAM Journal on Optimization,", "year": 2014}, {"title": "`1regularized neural networks are improperly learnable in polynomial time", "authors": ["Zhang", "Yuchen", "Lee", "Jason D", "Jordan", "Michael I"], "venue": "In Proceedings on the 33rd International Conference on Machine Learning,", "year": 2016}, {"title": "Convexified convolutional neural networks. CoRR, abs/1609.01000, 2016b. URL http://arxiv.org/ abs/1609.01000", "authors": ["Zhang", "Yuchen", "Liang", "Percy", "Wainwright", "Martin J"], "year": 2016}], "id": "SP:49fe0c4e086289cc2cd6582e99e239f89ec1f5f0", "authors": [{"name": "Yuchen Zhang", "affiliations": []}, {"name": "Percy Liang", "affiliations": []}, {"name": "Martin J. Wainwright", "affiliations": []}], "abstractText": "We describe the class of convexified convolutional neural networks (CCNNs), which capture the parameter sharing of convolutional neural networks in a convex manner. By representing the nonlinear convolutional filters as vectors in a reproducing kernel Hilbert space, the CNN parameters can be represented in terms of a lowrank matrix, and the rank constraint can be relaxed so as to obtain a convex optimization problem. For learning two-layer convolutional neural networks, we prove that the generalization error obtained by a convexified CNN converges to that of the best possible CNN. For learning deeper networks, we train CCNNs in a layerwise manner. Empirically, we find that CCNNs achieve competitive or better performance than CNNs trained by backpropagation, SVMs, fully-connected neural networks, stacked denoising auto-encoders, and other baseline methods.", "title": "Convexified Convolutional Neural Networks"}