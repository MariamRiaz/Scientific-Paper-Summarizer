{"sections": [{"heading": "1 Introduction", "text": "The problem of low-rank approximation of a matrix is usually studied as approximating a given matrix by a matrix of low rank so that the Frobenius norm of the error in the approximation is minimized. The Frobenius norm of a matrix is obtained by taking the sum of the squares of the entries in the matrix. Under this objective, the optimal solution is obtained using the singular value decomposition (SVD) of the given matrix. Low-rank approximation is useful in large data analysis, especially in predicting missing entries of a matrix by projecting the row and column entities (e.g., users and movies) into a low-dimensional space. In this work we consider the low-rank approximation problem, but under the general entrywise `p norm, for any p \u2208 [1,\u221e].\nThere are several reasons for considering the `p version of low-rank approximation instead of the usually studied `2 (i.e., Frobenius) version. For example, it is widely acknowledged that the `1 version is more robust to noise and outliers than the `2 version [2, 13, 24]. Several data mining and computer vision-related applications exploit this insight and resort to finding a low-rank approximation to minimize the `1 error [15, 16, 20, 22]. Furthermore, the `1 error is typically used as a proxy for capturing sparsity in many applications including robust versions of PCA, sparse recovery, and matrix completion; see, for example [2, 23]. For these reasons the problem has already received attention [10] and was suggested as an open problem by Woodruff in his survey on sketching techniques for linear algebra [21]. Likewise, the `\u221e version (dubbed also as the Chebyshev norm) has been studied for the past many years [11, 12], though to the best of our knowledge, no result with theoretical guarantees was known for `\u221e before our work. Our algorithm is also quite general, and works for every p \u2265 1.\nWorking with `p error, however, poses many technical challenges. First of all, unlike `2, the general `p space is not amenable to spectral techniques. Secondly, the `p space is not as nicely behaved as the `2 space, for example, it lacks the notion of orthogonality. Thirdly, the `p version quickly runs into computational complexity barriers: for example, even the rank-1 approximation in `1 has been shown to be NP-hard by Gillis and Vavasis [10]. However, there has been \u2217Work done in part while visiting Google. Supported in part by a Google Focused Research Award, by the ERC Starting Grant DMAP 680153, and by the SIR Grant RBSI14Q743.\nno dearth in terms of heuristics for the `p low-rank approximation problem, in particular for p = 1 and p =\u221e: this includes alternating convex (and, in fact, linear) minimization [14], methods based on expectation-maximization [19], minimization with augmented Lagrange multipliers [26], hyperplanes projections and linear programming [1], and generalizations of the Wiberg algorithm [6]. These heuristics, unfortunately, do not come with any performance guarantees. Polynomial-time algorithms for the general problem of rank-k approximation has been stated as an open problem [21]. While theoretical approximation guarantees have been given for the rank-1 version for the GF (2) and the Boolean cases [3], to the best of our knowledge there have been no provably good (approximation) algorithms for general matrices, or for rank more than one, or for general `p."}, {"heading": "1.1 Our Contributions", "text": "In this paper we obtain the first provably good algorithms for the `p rank-k approximation problem for every p \u2265 1. Let n\u00d7m be the dimensions of the input matrix. From an algorithmic viewpoint, there are three quantities of interest: the running time of the algorithm, the approximation factor guaranteed by the algorithm, and the actual number of vectors in the low-rank approximation that is output by the algorithm (even though we only desire k).\nGiven this setting, we show three main algorithmic results intended for the case when k is not too large. First, we show that one can obtain a (k + 1)-approximation to the rank-k problem in time mk poly(n,m); note that this running time is not polynomial once k is larger than a constant. To address this, next we show that one can get an O(k)-approximation to the best k-factorization in time O(poly(nm)); however, the algorithm returns O(k logm) columns, which is more than the desired k (this is referred to as a bi-criteria approximation). Finally, we combine these two algorithms. We first show that the output of the second algorithm can further be refined to output exactly k vectors, with an approximation factor of poly(k) and a running time of O(poly(n,m)(k log n)k). The running time now is polynomial as long as k = O(log n/ log log n). Next, we show that for any constant p \u2265 1, we can obtain approximation factor (k logm)O(p) and a running time of poly(n,m) for every value of k.\nOur first algorithm is existential in nature: it shows that there are k columns in the given matrix that can be used, along with an appropriate convex program, to obtain a (k + 1)-approximation. Realizing this as an algorithm would therefore na\u00efvely incur a factor mk in the running time. Our second algorithm works by sampling columns and iteratively \u201ccovering\u201d the columns of the given matrix, for an appropriate notion of covering. In each round of sampling our algorithm uniformly samples from a remaining set of columns; we note here that it is critical that our algorithm is adaptive as otherwise uniform sampling would not work. While this is computationally efficient and maintains an O(k)-approximation to the best rank-k approximation, it can end up with more than k columns, in fact O(k logm). Our third algorithm fixes this issue by combining the first algorithm with the notion of a near-isoperimetric transformation for the `p-space, which lets us transform a given matrix into another matrix spanning the same subspace but with small `p distortion.\nA useful feature of our algorithms is that they are uniform with respect to all values of p. We test the performance of our algorithms, for p = 1 and p =\u221e, on real and synthetic data and show that they produce low-rank approximations that are substantially better than what the SVD (i.e., p = 2) would obtain."}, {"heading": "1.2 Related Work", "text": "In [18], a low-rank approximation was obtained which holds for every p \u2208 [1, 2]. Their main result is an (O(logm) poly(k))approximation in nnz(A) + (n+m) poly(k) time, for every k, where nnz(A) is the number of non-zero entries in A. In our work, we also obtain such a result for p \u2208 [1, 2] via very different sampling-based methods, whereas the results in [18] are sketching-based. In addition to that, we obtain an algorithm with a poly(k) approximation factor which is independent of m and n, though this latter algorithm requires k = O(log n/ log log n) in order to be polynomial time.\nAnother result in [18] shows how to achieve a k poly(log k)-approximation, in nO(k) time for p \u2208 [1, 2]. For k larger than a constant, this is larger than polynomial time, whereas our algorithm with poly(k) approximation ratio is polynomial time for k as large as \u0398(log n/ log log n).\nImportantly, our results hold for every p \u2265 1, rather than only p \u2208 [1, 2], so for example, include p =\u221e. In addition we note that there exist papers solving problems that, at first blush, might seem similar to ours. For instance, [5] study a convex relation, and a rounding algorithm to solve the subspace approximation problem (an `p generalization of the least squares fit), which is related to but different from our problem. Also, [7] offer a bi-criteria\nsolution for another related problem of approximating a set of points by a collection of flats; they use convex relaxations to solve their problem and are limited to bi-criteria solutions, unlike ours. Finally, in some special settings robust PCA can be used to solve `1 low-rank approximation [2]. However, robust PCA and `1 low-rank approximation have some apparent similarities but they have key differences. Firstly, `1 low-rank approximation allows to recover an approximating matrix of any chosen rank, whereas RPCA returns some matrix of some unknown (possibly full) rank. While variants of robust PCA have been proposed to force the output rank to be a given value [17, 25], these variants make additional noise model and incoherence assumptions on the input matrix, whereas our results hold for every input matrix. Secondly, in terms of approximation quality, it is unclear if near-optimal solutions of robust PCA provide near-optimal solutions for `1 low-rank approximation.\nFinally, we mention concrete example matrices A for which the SVD gives a poor approximation factor for `papproximation error. First, suppose p < 2 and k = 1. Consider the following n\u00d7 n block diagonal matrix composed of two blocks: a 1\u00d7 1 matrix with value n and an (n\u2212 1)\u00d7 (n\u2212 1) matrix with all 1s. The SVD returns as a solution the first column, and therefore incurs polynomial in n error for p = 2\u2212\u2126(1). Now suppose p > 2 and k = 1. Consider the following n\u00d7n block diagonal matrix composed of two blocks: a 1\u00d71 matrix with value n\u22122 and an (n\u22121)\u00d7(n\u22121) matrix with all 1s. The SVD returns as a solution the matrix spanned by the bottom block, and so also incurs an error polynomial in n for p = 2 + \u2126(1)."}, {"heading": "2 Background", "text": "For a matrix M , let Mi,j denote the entry in its ith row and jth column and let Mi denote its ith column. Let MT\ndenote its transpose and let |M |p = (\u2211 i,j |Mi,j |p )1/p\ndenote its entry-wise p norm. Given a set S = {i1, . . . , it} of column indices, let MS = Mi1,...,it be the matrix composed of the columns of M with the indices in S.\nGiven a matrix M with m columns, we will use spanM = { \u2211m i=1 \u03b1iMi | \u03b1i \u2208 R} to denote the vectors spanned by its columns. If M is a matrix and v is a vector, we let dp(v,M) denote the minimum `p distance between v and a vector in spanM :\ndp(v,M) = inf w\u2208spanM\n|v \u2212 w|p.\nLet A \u2208 Rn\u00d7m denote the input matrix and let k > 0 denote the target rank. We assume, without loss of generality (w.l.o.g.), that m \u2264 n. Our first goal is, given A and k, to find a subset U \u2208 Rn\u00d7k of k columns of A and V \u2208 Rk\u00d7m so as to minimize the `p error, p \u2265 1, given by\n|A\u2212 UV |p.\nOur second goal is, given A and k, to find U \u2208 Rn\u00d7k, V \u2208 Rk\u00d7m to minimize the `p error, p \u2265 1, given by\n|A\u2212 UV |p.\nNote that in the second goal, we do not require U be a subset of columns. We refer to the first problem as the k-columns subset selection problem in the `p norm, denoted k-CSSp, and to the second problem as the rank-k approximation problem in the `p norm, denoted k-LRAp.1 In the paper we often call U, V the k-factorization of A. Note that a solution to k-CSSp can be used as a solution to k-LRAp, but not necessarily vice-versa.\nIn this paper we focus on solving the two problems for general p. Let U?V ? be a k-factorization of A that is optimal in the `p norm, where U? \u2208 Rn\u00d7k and V ? \u2208 Rk\u00d7m, and let optk,p(A) = |A\u2212 U?V ?|p. An algorithm is said to be an \u03b1-approximation, for an \u03b1 \u2265 1, if it outputs U \u2208 Rn\u00d7k, V \u2208 Rk\u00d7m such that\n|A\u2212 UV |p \u2264 \u03b1 \u00b7 optk,p(A).\nIt is often convenient to view the input matrix as A = U?V ? + \u2206 = A? + \u2206, where \u2206 is some error matrix of minimum `p-norm. Let \u03b4 = |\u2206|p = optk,p(A).\nWe will use the following observation.\n1k-LRA2 is the classical SVD problem of finding U \u2208 Rn\u00d7k, V \u2208 Rk\u00d7m so as to minimize |A\u2212 UV |2.\nLemma 1. Let U \u2208 Rn\u00d7k and v \u2208 Rn\u00d71. Suppose that there exists x \u2208 Rk\u00d71 such that \u03b4 = |U \u00b7 x\u2212 v|p. Then, there exists a polynomial time algorithm that, given U and v, finds y \u2208 Rk\u00d71 such that |U \u00b7 y \u2212 v|p \u2264 \u03b4.\nProof. This `p regression problem is a convex program and well-known to be solvable in polynomial time.\n3 An (mk poly(nm))-time algorithm for k-LRAp In this section we will present an algorithm that runs in time mk poly(nm) and produces a (k + 1)-approximation to k-CSSp (so also to k-LRAp) of a matrix A \u2208 Rn\u00d7m, m \u2264 n, for any p \u2208 [1,\u221e]. The algorithm simply tries all possible subsets of k columns of A for producing one of the factors, U , and then uses Lemma 1 to find the second factor V ."}, {"heading": "3.1 The existence of one factor in A", "text": "For simplicity, we assume that |\u2206i|p > 0 for each column i. To satisfy this, we can add an arbitrary small random error to each entry of the matrix. For instance, for any \u03b3 > 0, and to each entry of the matrix, we can add an independent uniform value in [\u2212\u03b3, \u03b3]. This would guarantee that |\u2206i|p > 0 for each i \u2208 [m].\nRecall that A = A? + \u2206 is the perturbed matrix, and we only have access to A, not A?. Consider Algorithm 1 and its output S. Note that we cannot actually run this algorithm since we do not know A?. Thus, it is a hypothetical algorithm used for the purpose of our proof. That is, the algorithm serves as a proof that there exists a subset of k columns of A providing a good low rank approximation. In Theorem 3 we prove that the columns in A indexed by the subset S can be used as one factor of a k-factorization of A.\nAlgorithm 1 Enumerating and selecting k columns of A. Require: A rank k matrix A? and perturbation matrix \u2206 Ensure: k column indices of A?\n1: For each column index i, let A\u0303?i \u2190 A?i /|\u2206i|p. 2: Write A\u0303? = U\u0303 \u00b7 V\u0303 , s.t. U\u0303 \u2208 Rn\u00d7k, V\u0303 \u2208 Rk\u00d7m. 3: Let S be the subset of k columns of V\u0303 \u2208 Rk\u00d7m that has maximum determinant in absolute value (note that the\nsubset S indexes a k \u00d7 k submatrix). 4: Output S.\nBefore proving the main theorem of the subsection, we show a useful property of the matrix A\u0303?, that is, the matrix having the vector A?i /|\u2206i|p as the ith column. Then we will use this property to prove Theorem 3.\nLemma 2. For each column A\u0303?i of A\u0303?, one can write A\u0303?i = \u2211 j\u2208SMi(j)A\u0303 ? j , where |Mi(j)| \u2264 1 for all i, j.\nProof. Fix an i \u2208 {1, . . . ,m}. Consider the equation V\u0303SMi = V\u0303i for Mi \u2208 Rk. We can assume the columns in V\u0303S are linearly independent, since w.l.o.g., A\u0303? has rank k. Hence, there is a unique solution Mi = (V\u0303S)\u22121V\u0303i. By Cramer\u2019s rule, the jth coordinate Mi(j) of Mi satisfies Mi(j) = det(V\u0303 jS )\ndet(V\u0303S) , where V\u0303 jS is the matrix obtained by replacing the jth\ncolumn of V\u0303S with V\u0303i. By our choice of S, |det(V\u0303 jS )| \u2264 |det(V\u0303S)|, which implies |Mi(j)| \u2264 1. Multiplying both sides of equation V\u0303SMi = V\u0303i by U\u0303 , we have A\u0303?SMi = A\u0303 ? i .\nNow we prove the main theorem of this subsection.\nTheorem 3. Let U = AS . For p \u2208 [1,\u221e], let M1, . . . ,Mm be the vectors whose existence is guaranteed by Lemma 2 and let V \u2208 Rk\u00d7n be the matrix having the vector |\u2206i|p \u00b7 (Mi(1)/|\u2206i1 |p, . . . ,Mi(k)/|\u2206ik |p)\nT as its ith column. Then, |Ai \u2212 (UV )i|p \u2264 (k + 1)|\u2206i|p and hence |A\u2212 UV |p \u2264 (k + 1)|\u2206|p.\nProof. We consider the generic column (UV )i.\n(UV )i = |\u2206i|p k\u2211 j=1 ( Mi(j) |\u2206ij |p Aij )\n= |\u2206i|p k\u2211 j=1 ( Mi(j) |\u2206ij |p ( A?ij + \u2206ij )) = |\u2206i|p k\u2211 j=1 ( Mi(j)A\u0303 ? ij +Mi(j) \u2206ij |\u2206ij |p ) = |\u2206i|pA\u0303?i + |\u2206i|p k\u2211 j=1 ( Mi(j) \u2206ij |\u2206ij |p )\n= A?i + k\u2211 j=1 ( |\u2206i|p \u00b7Mi(j) \u2206ij |\u2206ij |p ) \u2206 = A?i + Ei.\nObserve that Ei is the weighted sum of k vectors, \u2206i1 |\u2206i1 |p , . . . , \u2206ik |\u2206ik |p , having unit `p-norm. Observe further that, since the sum of their weights satisfies |\u2206i|p \u2211k j=1 |Mi(j)| \u2264 k|\u2206i|p, we have the `p-norm of Ei is not larger than |Ei|p \u2264 k|\u2206i|p. The proof is complete using the triangle inequality:\n|Ai \u2212 (UV )i|p \u2264 |A?i \u2212Ai|p + |A?i \u2212 (UV )i|p = |\u2206i|p + |Ei|p \u2264 (k + 1)|\u2206i|p.\n3.2 An mk poly(nm)-time algorithm In this section we give an algorithm that returns a (k+ 1)-approximation to the k-LRAp problem in time mk poly(nm).\nAlgorithm 2 A (k + 1)-approximation to k-LRAp. Require: An integer k and a matrix A Ensure: U \u2208 Rn\u00d7k, V \u2208 Rk\u00d7m s.t. |A\u2212 UV |p \u2264 (k + 1)optk,p(A).\n1: for all I \u2208 (\n[m] k\n) do\n2: Let U = AI 3: Use Lemma 1 to compute a matrix V that minimizes the distance dI = |A\u2212 UV |p 4: end for 5: Return U, V that minimizes dI , for I \u2208 ( [m] k\n) The following statement follows directly from the existence of k columns in A that make up a factor U having small\n`p error (Theorem 3).\nTheorem 4. Algorithm 2 obtains a (k + 1)-approximation to k-LRAp in time mk poly(nm).\n4 A poly(nm)-time bi-criteria algorithm for k-CSSp We next show an algorithm that runs in time poly(nm) but returns O(k logm) columns of A that can be used in place of U , with an error O(k) times the error of the best k-factorization. In other words, it obtains more than k columns but achieves a polynomial running time; we will later build upon this algorithm in Section 5 to obtain a faster algorithm for\nthe k-LRAp problem. We also show a lower bound: there exists a matrix A for which the best possible approximation for the k-CSSp, for p \u2208 (2,\u221e), is k\u2126(1).\nDefinition 5 (Approximate coverage). Let S be a subset of k column indices. We say that column Ai is cpapproximately covered by S if for p \u2208 [1,\u221e) we have minx\u2208Rk\u00d71 |ASx \u2212 Ai|pp \u2264 c 100(k+1)p|\u2206|pp n , and for p = \u221e, minx\u2208Rk\u00d71 |ASx\u2212Ai|\u221e \u2264 c(k + 1)|\u2206|\u221e. If c = 1, we say Ai is covered by S.\nWe first show that if we select a set R columns of size 2k uniformly at random in (\n[m] 2k\n) , with constant probability\nwe cover a constant fraction of columns of A.\nLemma 6. Suppose R is a set of 2k uniformly random chosen columns of A. With probability at least 2/9, R covers at least a 1/10 fraction of columns of A.\nProof. Let i be a column index of A selected uniformly at random and not in the set R. Let T = R \u222a {i} and let \u03b7 be the cost of the best `p rank-k approximation to AT . Note that T is a uniformly random subset of 2k + 1 columns of A.\nCase: p <\u221e. Since T is a uniformly random subset of 2k+ 1 columns of A, ET [\u03b7p] = (2k+1)|\u2206|pp\nn . Let E1 denote the event \u201c\u03b7p \u2264 10(2k+1)|\u2206| p p\nn \u201d. By a Markov bound, Pr[E1] \u2265 9/10. By Theorem 3, there exists a subset L of k columns of AT for which minX |ALX \u2212 AT |pp \u2264 (k + 1)p\u03b7p. Since\ni is itself uniformly random in the set T , it holds that Ei[minx |ALx \u2212 Ai|pp \u2264 (k+1)p\u03b7p\n2k+1 . Let E2 denote the event \u201cminx |ALx\u2212Ai|pp \u2264 10(k+1)p\u03b7p\n2k+1 \u201d. By a Markov bound, Pr[E2] \u2265 9/10. Let E3 denote the event \u201ci /\u2208 L\u201d. Since i is uniformly random in the set T , Pr[E3] \u2265 k+12k > 1/2. Clearly Pr[E1 \u2227 E2 \u2227 E3] \u2265 3/10. Conditioned on E1 \u2227 E2 \u2227 E3, we have\nmin x |ARx\u2212Ai|pp\nE3 \u2264 min\nx |ALx\u2212Ai|pp\nE2 \u2264 10(k + 1) p\u03b7p 2k + 1 E1 \u2264\n100(k + 1)p|\u2206|pp n ,\nwhich implies that i is covered by R. Note that the first inequality uses that L is a subset of R given E3, and so the regression cost using AL cannot be smaller than that of using AR\nLet Zi be an indicator variable if i is covered by R and let Z = \u2211 i Zi. We have E[Z] = \u2211 iE[Zi] \u2265 \u2211 i 3 10 =\n3m/10; hence E[m\u2212 Z] \u2264 7m10 . By a Markov bound, Pr[m\u2212 Z \u2265 9m 10 ] \u2264 7 9 .\nCase p =\u221e. Then \u03b7 \u2264 |\u2206|\u221e since AT is a submatrix of A. By Theorem 3, there exists a subset L of k columns of AT for which minX |ALX \u2212AT |\u221e \u2264 (k + 1)\u03b7. Defining E3 as before and conditioning on it, we have\nmin x |ARx\u2212Ai|\u221e \u2264 min x |ALx\u2212Ai|\u221e\n\u2264 min X |ALX \u2212AT |\u221e \u2264 (k + 1)|\u2206|\u221e,\ni.e., i is covered by R. Again defining Zi to be the event that i is covered by R, we have E[Zi] \u2265 12 , and so E[m\u2212 Z] \u2264 m2 , which implies Pr[m\u2212 Z \u2265 9m 10 ] \u2264 5 9 < 7 9 .\nWe are now ready to introduce Algorithm 3. We can without loss of generality assume that the algorithm knows a number N for which |\u2206|p \u2264 N \u2264 2|\u2206|p. Indeed, such a value can be obtained by first computing |\u2206|2 using the SVD. Note that although one does not know \u2206, one does know |\u2206|2 since this is the Euclidean norm of all but the top k singular values of A, which one can compute from the SVD of A. Then, note that for p < 2, |\u2206|2 \u2264 |\u2206|p \u2264 n2\u2212p|\u2206|2, while for p \u2265 2, |\u2206|p \u2264 |\u2206|2 \u2264 n1\u22122/p|\u2206|p. Hence, there are only O(log n) values of N to try, given |\u2206|2, one of which will satisfy |\u2206|p \u2264 N \u2264 2|\u2206|p. One can take the best solution found by Algorithm 3 for each of the O(log n) guesses to N .\nAlgorithm 3 Selecting O(k logm) columns of A. Require: An integer k, and a matrix A = A? + \u2206. Ensure: O(k logm) columns of A SELECTCOLUMNS (k,A)\nif number of columns of A \u2264 2k then return all the columns of A else repeat\nLet R be uniform at random 2k columns of A until at least (1/10)-fraction columns of A are cp-approximately covered Let AR be the columns of A not approximately covered by R return AR\u222a SELECTCOLUMNS (k,AR)\nend if\nTheorem 7. With probability at least 9/10, Algorithm 3 runs in time poly(nm) and returns O(k logm) columns that can be used as a factor of the whole matrix inducing `p error O(k|\u2206|p).\nProof. First note, that if |\u2206|p \u2264 N \u2264 2|\u2206|p and if i is covered by a set R of columns, then i is cp-approximately covered by R for a constant cp; here cp = 2p for p < \u221e and c\u221e = 2. By Lemma 6, the expected number of repetitions of selecting 2k columns until (1/10)-fraction of columns of A are covered is O(1). When we recurse on SELECTCOLUMNS on the resulting matrix AR, each such matrix admits a rank-k factorization of cost at most |\u2206|p. Moreover, the number of recursive calls to SELECTCOLUMNS can be upper bounded by log10m. In expectation there will be O(logm) total repetitions of selecting 2k columns, and so by a Markov bound, with probability 9/10, the algorithm will choose O(k logm) columns in total and run in time poly(nm).\nLet S be the union of all columns of A chosen by the algorithm. Then for each column i of A, for p \u2208 [1,\u221e), we have minx |ASx\u2212Ai|pp \u2264 100(k+1)p2p|\u2206|pp n , and so minX |ASX \u2212A| p p \u2264 100(k + 1)p2p|\u2206|pp. For p =\u221e we instead have minx |ASx\u2212Ai|\u221e \u2264 2(k + 1)|\u2206|\u221e, and so minX |ASX \u2212A|\u221e \u2264 2(k + 1)|\u2206|\u221e.\n4.1 A lower bound for k-CSSp In this section we prove an existential result showing that there exists a matrix for which the best approximation to the k-CSSp is k\u2126(1).\nLemma 8. There exists a matrix A such that the best approximation for the k-CSSp problem, for p \u2208 (2,\u221e), is k\u2126(1).\nProof. Consider A = (k + 1)Ik+1, where Ik+1 is the (k + 1) \u00d7 (k + 1) identity matrix. And consider the matrix B = (k + 1) \u00b7 Ik+1 \u2212 E, where E is the (k + 1)\u00d7 (k + 1) all ones matrix. Note that B has rank at most k, since the sum of its columns is 0.\nCase: 2 < p <\u221e. If we choose any k columns of A, then the `p cost of using them to approximate A is (k + 1). On the other hand, |A\u2212B|\u221e = 1, which means that `p cost of B is smaller or equal than ( (k + 1)2 )1/p .\nCase: p =\u221e. If we choose any k columns of A, then the `\u221e cost of using them to approximate A is k + 1. On the other hand, |A\u2212B|\u221e = 1, which means that `\u221e cost of B is smaller or equal than 1.\nNote also that in [18] the authors show that for p = 1 the best possible approximation is \u2126( \u221a k) up to poly(log k)\nfactors.\n5 A ((k log n)k poly(mn))-time algorithm for k-LRAp In the previous section we have shown how to get a rank-O(k logm), O(k)-approximation in time poly(nm) to the k-CSSp and k-LRAp problems. In this section we first show how to get a rank-k, poly(k)-approximation efficiently\nstarting from a rank-O(k logm) approximation. This algorithm runs in polynomial time as long as k = O (\nlogn log logn\n) .\nWe then show how to obtain a (k logm)O(p)-approximation ratio in polynomial time for every k. Let U be the columns of A selected by Algorithm 3."}, {"heading": "5.1 An isoperimetric transformation", "text": "The first step of our proof is to show that we can modify the selected columns of A to span the same space but to have small distortion. For this, we need the following notion of isoperimetry.\nDefinition 9 (Almost isoperimetry). A matrix B \u2208 Rn\u00d7m is almost-`p-isoperimetric if for all x, we have\n|x|p 2m \u2264 |Bx|p \u2264 |x|p.\nWe now show that given a full rank A \u2208 Rn\u00d7m, it is possible to construct in polynomial time a matrix B \u2208 Rn\u00d7m such that A and B span the same space and B is almost-`p-isoperimetric.\nLemma 10. Given a full (column) rank A \u2208 Rn\u00d7m, there is an algorithm that transforms A into a matrix B such that spanA = spanB and B is almost-`p-isoperimetric. Furthermore the running time of the algorithm is poly(nm).\nProof. In [4], specifically, Equation (4) in the proof of Theorem 4, the authors show that in polynomial time it is possible to find a matrix B such that spanB = spanA and for all x,\n|x|2 \u2264 |Bx|p \u2264 \u221a m|x|2,\nfor any p \u2265 1. If p < 2, their result implies\n|x|p\u221a m \u2264 |x|2 \u2264 |Bx|p \u2264 \u221a m|x|2 \u2264 \u221a m|x|p,\nand so rescaling B by \u221a m makes it almost-`p-isoperimetric. On the other hand, if p > 2, then\n|x|p \u2264 |x|2 \u2264 |Bx|p \u2264 \u221a m|x|2 \u2264 m|x|p,\nand rescaling B by m makes it almost-`p-isoperimetric.\nNote that the algorithm used in [4] relies on the construction of the L\u00f6wner\u2013John ellipsoid for a specific set of points. Interestingly, we can also show that there is a more simple and direct algorithm to compute such a matrix B; this may be of independent interest. We provide the details of our algorithm in the supplementary material."}, {"heading": "5.2 Reducing the rank to k", "text": "The main idea for reducing the rank is to first apply the almost-`p-isoperimetric transformation to the factor U to obtain a new factor Z0. For such a Z0, the `p-norm of Z0V is at most the `p-norm of V . Using this fact we show that V has a low-rank approximation and a rank-k approximation of V translates into a good rank-k approximation of UV . But a good rank-k approximation of V can be obtained by exploring all possible k-subsets of rows of V , as in Algorithm 2. More formally, in Algorithm 4 we give the pseudo-code to reduce the rank of our low-rank approximation from O(k logm) to k. Let \u03b4 = |\u2206|p = optk,p(A).\nTheorem 11. Let A \u2208 Rn\u00d7m, U \u2208 Rn\u00d7O(k logm), V \u2208 RO(k logm)\u00d7m be such that |A \u2212 UV |p = O(k\u03b4). Then, Algorithm 4 runs in time O(k logm)k(mn)O(1) and outputs W \u2208 Rn\u00d7k, Z \u2208 Rk\u00d7m such that |A \u2212 WZ|p = O((k4 log k)\u03b4).\nAlgorithm 4 An algorithm that transforms an O(k logm)-rank matrix decomposition into a k-rank matrix decomposition without inflating the error too much.\nRequire: U \u2208 Rn\u00d7O(k logm), V \u2208 RO(k logm)\u00d7m Ensure: W \u2208 Rn\u00d7k, Z \u2208 Rk\u00d7m\n1: Apply Lemma 10 to U to obtain matrix W 0 2: Apply Lemma 1 to obtain matrix Z0, s.t. \u2200i, |W 0Z0i \u2212 (UV )i|p is minimized 3: Apply Algorithm 2 with input (Z0)T \u2208 Rn\u00d7O(k logm) and k to obtain X and Y 4: Set Z \u2190 XT 5: Set W \u2190W 0Y T 6: Output W and Z\nProof. We start by bounding the running time. Step 3 is computationally the most expensive since it requires to execute a brute-force search on the O(k logm) columns of (Z0)T . So the running time follows from Theorem 4.\nNow we have to show that the algorithm returns a good approximation. The main idea behind the proof is that UV is a low-rank approximable matrix. So after applying Lemma 10 to U to obtain a low-rank approximation for UV we can simply focus on Z0 \u2208 RO(k logm)\u00d7n. Next, by applying Algorithm 2 to Z0, we obtain a low-rank approximation in time O(k logm)k(mn)O(1). Finally we can use this solution to construct the solution to our initial problem.\nWe know by assumption that |A \u2212 UV |p = O(k\u03b4). Therefore, it suffices by the triangle inequality to show |UV \u2212WZ|p = O((k4 log k)\u03b4). First note that UV = W 0Z0 since Lemma 10 guarantees that spanU = spanW 0. Hence we can focus on proving |W 0Z0 \u2212WZ|p \u2264 O((k4 log k)\u03b4).\nWe first prove two useful intermediate steps.\nLemma 12. There exist matrices U\u2217 \u2208 Rn\u00d7k, V \u2217 \u2208 Rk\u00d7m such that |W 0Z0 \u2212 U\u2217V \u2217|p = O(k\u03b4).\nProof. There exist U\u2217 \u2208 Rn\u00d7k, V \u2217 \u2208 Rk\u00d7m such that |A \u2212 U\u2217V \u2217|p \u2264 \u03b4 and, furthermore, |A \u2212 UV |p = |A \u2212 W 0Z0|p = O(k\u03b4). The claim follows by the Minkowski inequality.\nLemma 13. There exist matrices F \u2208 RO(k logm)\u00d7k, D \u2208 Rk\u00d7n such that |W 0(Z0 \u2212 FD)|p = O(k2\u03b4).\nProof. From Lemma 12, we know that |W 0Z0\u2212U\u2217V \u2217|p = O(k\u03b4). Hence, from Theorem 3, we know that there exists a matrix C \u2208 Rn\u00d7k composed of k columns of W 0Z0, and a matrix D \u2208 Rk\u00d7m such that |W 0Z0 \u2212 CD|p = O(k2\u03b4). Furthermore, note that selecting k columns of W 0Z0 is equivalent to select the same columns in Z0 and multiplying them by W 0. So we can express C = W 0F for some matrix F \u2208 RO(k logm)\u00d7k. Thus we can rewrite\n|W 0Z0 \u2212 CD|p = |W 0Z0 \u2212W 0FD|p = |W 0(Z0 \u2212 FD)|p \u2264 O(k2\u03b4).\nNow from the guarantees of Lemma 10 we know that for any vector y, |W 0y|p \u2264 |y|pk log k . So we have |Z 0\u2212FD|p \u2264 O((k3 log k)\u03b4), Thus |(Z0)T \u2212DTFT |p \u2264 O((k3 log k)\u03b4), so (Z0)T has a low-rank approximation with error at most O((k3 log k)\u03b4). So we can apply Theorem 3 again and we know that there are k columns of (Z0)T such that the lowrank approximation obtained starting from those columns has error at most O((k4 log k)\u03b4). We obtain such a low-rank approximation from Algorithm 2 with input (Z0)T \u2208 Rn\u00d7O(k logm) and k. More precisely, we obtain an X \u2208 Rn\u00d7k and Y \u2208 Rk\u00d7O(k logm) such that |(Z0)T \u2212XY |p \u2264 O((k4 log k)\u03b4). Thus |Z0 \u2212 Y TXT |p \u2264 O((k4 log k)\u03b4).\nNow using again the guarantees of Lemma 10 for W 0, we get |W 0(Z0 \u2212 Y TXT )|p \u2264 O((k4 log k)\u03b4). So |W 0(Z0 \u2212 Y TXT )|p = |W 0Z0 \u2212WZ)|p = |UV \u2212WZ)|p \u2264 O((k4 log k)\u03b4). By combining it with |A\u2212 UV |p = O(k\u03b4) and using the Minkowski inequality, the proof is complete."}, {"heading": "5.3 Improving the Running Time", "text": "We now show how to improve the running time to (mn)O(1) for every k and every constant p \u2265 1, at the cost of a poly(k log(m))-approximation instead of the poly(k)-approximation we had previously.\nTheorem 14. Let A \u2208 Rn\u00d7m, 1 \u2264 k \u2264 min(m,n), and p \u2265 1 be an arbitrary constant. Let U \u2208 Rn\u00d7O(k logm) and V \u2208 RO(k logm)\u00d7m be such that |A\u2212UV |p = O(k\u03b4). There is an algorithm which runs in time (mn)O(1) and outputs W \u2208 Rn\u00d7k, Z \u2208 Rk\u00d7m such that |A\u2212WZ|p = (k logm)O(p)\u03b4. Proof. The proof of Theorem 11 shows there exists a rank-k matrix X for which |UXV T \u2212 A|p = O(k4 log k)\u03b4. Instead of the enumeration algorithm used in the proof of Theorem 11 to find such an X , we will instead use `p-leverage score sampling [4].\nIt is shown in Theorem 6 of [4] that given U one can in poly(mn) time and with probability 1 \u2212 o(1), find a sampling and rescaling matrix S with (k logm)O(p) rows such that for all vectors w, |SUw|p = (1 \u00b1 1/2)|Uw|p. Indeed, in their notation one can compute a well-conditioned-basis in poly(mn) time and then sample rows of U according to the p-th power of the p-norms of the rows of the well-conditioned basis. Since S is a sampling and rescaling matrix, we have E[|SY |pp] = |Y |pp for any fixed matrix Y .\nLet X\u2217 be the rank-k matrix minimizing |UX\u2217V T \u2212A|p. By the triangle inequality, for an arbitrary X we have |SUXV T \u2212 SA|p = |SUX\u2217V T \u2212 SUXV T |p \u00b1 |SUX\u2217V T \u2212 SA|p. (1)\nBy a Markov bound, |SUX\u2217V T \u2212 SA|pp \u2264 100p|UX\u2217V T \u2212A|pp with probability 1\u2212 1/100p, and so\n|SUX\u2217V T \u2212 SA|p \u2264 100|UX\u2217V T \u2212A|p (2) with this probability. Moreover, with probability 1\u2212 o(1),\n|SUX\u2217V T \u2212 SUXV T |p = (1\u00b1 1/2)|UX\u2217V T \u2212 UXV T |p (3) simultaneously for all X . By a union bound, both of these events occur with probability 1\u2212 1/100p\u2212 o(1). In this case, it follows that if X \u2032 satisfies |SUX \u2032V T \u2212 SA|p \u2264 \u03b1minrank k B |SUBV T \u2212 SA|p, then also |SUX \u2032V T \u2212 SA|p \u2264 \u03b1|SUX\u2217V T \u2212 SA|p. Thus, using the triangle inequality, (2) and (3),\n|UX \u2032V T \u2212A|p \u2264 |UX \u2032V T \u2212 UX\u2217V T |p + |UX\u2217V T \u2212A|p \u2264 (1 + 1/2)|SUX \u2032V T \u2212 SUX\u2217V T |p + |UX\u2217V T \u2212A|p \u2264 (1 + 1/2)(|SUX \u2032V T \u2212 SA|p + |SUX\u2217V T \u2212 SA|p) + |UX\u2217V T \u2212A|p \u2264 (1 + 1/2)((\u03b1+ 1)|SUX\u2217V T \u2212 SA|) + |UX\u2217V T \u2212A|p = O(\u03b1)|UX\u2217V T \u2212A|p.\nNow consider the problem |SUXV T \u2212 SA|p. We can compute a well-conditioned basis in poly(mn) time and then sample columns of V according to the p-th power of the p-norms of the columns of the well-conditioned basis. Let T denote this sampling matrix, which has (k logm)O(p) columns. We condition on analogous events to those in (2) and (3) above, which hold again with probability 1\u2212 1/100p \u2212 o(1). Then if X \u2032\u2032 is a \u03b2-approximate minimizer to |SUX \u2032\u2032V TT \u2212 SAT |p, then analogously,\n|SUX \u2032\u2032V T \u2212 SA|p \u2264 O(\u03b2)|SUX \u2032V T \u2212 SA|p. (4) We thus have by several applications of the triangle inequality and the above,\n|UX \u2032\u2032V T \u2212A|p \u2264 |UX \u2032\u2032V T \u2212 UX \u2032V T |p + |UX \u2032V T \u2212A|p \u2264 (1 + 1/2)|SUX \u2032\u2032V T \u2212 SUX \u2032V T |p +O(\u03b1)|UX\u2217V T \u2212A|p \u2264 (1 + 1/2)(|SUX \u2032\u2032V T \u2212 SA|p + |SUX \u2032V T \u2212 SA|p) +O(\u03b1\u03b4) \u2264 O(\u03b2)|SUX \u2032V T \u2212 SA|p +O(\u03b1\u03b4) \u2264 O(\u03b2)(|SUX \u2032V T \u2212 SUX\u2217V T |p + |SUX\u2217V T \u2212 SA|p) +O(\u03b1\u03b4) \u2264 O(\u03b2)(|UX \u2032V T \u2212 UX\u2217V T |p) +O((\u03b1+ \u03b2)\u03b4) \u2264 O(\u03b2)(|UX \u2032V T \u2212A|p + \u03b4) +O((\u03b1+ \u03b2)\u03b4) \u2264 O(\u03b1\u03b2\u03b4). (5)\nFinally, observe that since SUXV TT \u2212 SAT is a (k logm)O(p) \u00d7 (k logm)O(p) matrix for any X , it follows that its Frobenius norm is related up to a (k logm)O(p) factor to its entrywise p-norm. Consequently, the Frobenius norm minimizer X \u2032\u2032 is a (k logm)O(p)-approximate minimizer to the entrywise p-norm, and so \u03b2 = (k logm)O(p) in the notation above. It then follows from (4) that \u03b1 = O(\u03b2) = (k logm)O(p) as well. Consequently, by (5), we have that |UX \u2032\u2032V T \u2212A|p = (k logm)O(p)\u03b4.\nFinally, note that the Frobenius norm minimizer X \u2032\u2032 to |SUX \u2032\u2032V TT \u2212 SAT |p can be solved in time (k logm)O(p) time, using the result in [9]. This completes the proof."}, {"heading": "6 Experiments", "text": "In this section, we show the effectiveness of Algorithm 2 compared to the SVD. We run our comparison both on synthetic as well as real data sets. For the real data sets, we use matrices from the FIDAP set2 and a word frequency dataset from UC Irvine 3. The FIDAP matrix is 27 \u00d7 27 with 279 real asymmetric non-zero entries. The KOS blog entries matrix, representing word frequencies in blogs, is 3430 \u00d7 6906 with 353160 non-zero entries. For the synthetic data sets, we use two matrices. For the first, we use a 20 \u00d7 30 random matrix with 184 non-zero entries\u2014this random matrix was generated as follows: independently, we set each entry to 0 with probability 0.7, and to a uniformly random value in [0, 1] with probability 0.3. Both matrices are full rank. For the second matrix, we use a random \u00b11 20 \u00d7 30 matrix.\n2ihttp://math.nist.gov/MatrixMarket/data/SPARSKIT/fidap/fidap005.html 3https://archive.ics.uci.edu/ml/datasets/Bag+of+Words\nIn all our experiments, we run a simplified version of Algorithm 2, where instead of running for all possible (\n[m] k ) subsets of k columns (which would be computationally prohibitive), we repeatedly sample k columns, a few thousand times, uniformly at random. We then run the `p-projection on each sampled set and finally select the solution with the smallest `p-error. (While this may not guarantee provable approximations, we use this a reasonable heuristic that seems to work well in practice, without much computational overhead.) We focus on p = 1 and p =\u221e.\nFigure 1 illustrates the relative performance of Algorithm 2 compared to the SVD for different values of k on the real data sets. In the figure the green line is the ratio of the total error. The `1-error for Algorithm 2 is always less than the corresponding error for the SVD and in fact consistently outperforms the SVD by roughly 40% for small values of k on the FIDAP matrix. On the larger KOS matrix, the relative improvement in performance with respect to `\u221e-error is more uniform (around 10%).\nWe observe similar trends for the synthetic data sets as well. Figures 2 and 3 illustrate the trends. Algorithm 2 performs consistently better than the SVD in the case of `1-error for both the matrices. In the case of `\u221e-error, it outperforms SVD by around 10% for higher values of k on the random matrix. Furthermore, it consistently outperforms SVD, between 30% and 50%, for all values of k on the random \u00b11 matrix.\nTo see why our `\u221e error is always 1 for a random \u00b11 matrix A, note that by setting our rank-k approximation to be the zero matrix, we achieve an `\u221e error of 1. This is optimal for large values of n and m and small k as can be seen by recalling the notion of the sign-rank of a matrix A \u2208 {\u22121, 1}n\u00d7m, which is the minimum rank of a matrix B for which the sign of Bi,j equals Ai,j for all entries i, j. If the sign-rank of A is larger than k, then for any rank-k matrix B, we have \u2016A\u2212B\u2016\u221e \u2265 1 since necessarily there is an entry Ai,j for which |Ai,j \u2212Bi,j | \u2265 1. It is known that the sign-rank of a random m\u00d7m matrix A, and thus also of a random n\u00d7m matrix A, is \u2126( \u221a m) with high probability [8]."}, {"heading": "7 Conclusions", "text": "We studied the problem of low-rank approximation in the entrywise `p error norm and obtained the first provably good approximation algorithms for the problem that work for every p \u2265 1. Our algorithms are extremely simple, which makes them practically appealing. We showed the effectiveness of our algorithms compared with the SVD on real and synthetic data sets. We obtain a kO(1) approximation factor for every p for the column subset selection problem, and we showed an example matrix for this problem for which a k\u2126(1) approximation factor is necessary. It is unclear if better approximation factors are possible by designing algorithms that do not choose a subset of input columns to span the output low rank approximation. Resolving this would be an interesting and important research direction."}], "year": 2017, "references": [{"title": "A pure `1-norm principal component analysis", "authors": ["J.P. Brooks", "J.H. Dul\u00e1", "E.L. Boone"], "venue": "Computational Statistics & Data Analysis,", "year": 2013}, {"title": "Robust principal component analysis? JACM", "authors": ["Emmanuel J. Cand\u00e8s", "Xiaodong Li", "Yi Ma", "John Wright"], "year": 2011}, {"title": "On low rank approximation of binary matrices", "authors": ["C. Dan", "K.A. Hansen", "H. Jiang", "L. Wang", "Y. Zhou"], "venue": "Technical Report 1511.01699v1,", "year": 2015}, {"title": "Sampling algorithms and coresets for lp regression", "authors": ["Anirban Dasgupta", "Petros Drineas", "Boulos Harb", "Ravi Kumar", "Michael W. Mahoney"], "year": 2009}, {"title": "Algorithms and hardness for subspace approximation", "authors": ["Amit Deshpande", "Madhur Tulsiani", "Nisheeth K. Vishnoi"], "venue": "In SODA,", "year": 2011}, {"title": "Efficient computation of robust low-rank matrix approximations using the L1", "authors": ["A. Eriksson", "A. van den Hengel"], "venue": "norm. PAMI,", "year": 2012}, {"title": "Bi-criteria linear-time approximations for generalized k-mean/median/center", "authors": ["Dan Feldman", "Amos Fiat", "Micha Sharir", "Danny Segev"], "venue": "In SoCG,", "year": 2007}, {"title": "A linear lower bound on the unbounded error probabilistic communication complexity", "authors": ["J\u00fcrgen Forster"], "venue": "J. Comput. Syst. Sci.,", "year": 2002}, {"title": "Generalized rank-constrained matrix approximations", "authors": ["Shmuel Friedland", "Anatoli Torokhti"], "venue": "SIAM Journal on Matrix Analysis and Applications,", "year": 2007}, {"title": "On the complexity of robust PCA and `1-norm low-rank matrix approximation", "authors": ["Nicolas Gillis", "Stephen A. Vavasis"], "venue": "Technical Report 1509.09236,", "year": 2015}, {"title": "The maximal-volume concept in approximation by low-rank matrices", "authors": ["S.A. Goreinov", "E.E. Tyrtyshnikov"], "venue": "Contemporary Mathematics,", "year": 2001}, {"title": "Quasioptimality of skeleton approximation of a matrix in the Chebyshev norm", "authors": ["S.A. Goreinov", "E.E. Tyrtyshnikov"], "venue": "Doklady Mathematics,", "year": 2011}, {"title": "Robust Statistics", "authors": ["Peter J. Huber"], "year": 1981}, {"title": "Robust L1 norm factorization in the presence of outliers and missing data by alternative convex programming", "authors": ["Qifa Ke", "Takeo Kanade"], "venue": "In CVPR,", "year": 2005}, {"title": "Scalable adaptive robust dictionary", "authors": ["Cewu Lu", "Jiaping Shi", "Jiaya Jia"], "venue": "learning. TIP,", "year": 2014}, {"title": "Robust matrix factorization with unknown noise", "authors": ["Deyu Meng", "Fernando. D.L. Torre"], "venue": "In ICCV,", "year": 2013}, {"title": "Non-convex robust PCA", "authors": ["Praneeth Netrapalli", "U.N. Niranjan", "Sujay Sanghavi", "Animashree Anandkumar", "Prateek Jain"], "venue": "In Advances in Neural Information Processing Systems 27: Annual Conference on Neural Information Processing Systems", "year": 2014}, {"title": "Low rank approximation with entrywise `1-norm error", "authors": ["Zhao Song", "David P. Woodruff", "Pelin Zhong"], "venue": "Technical Report 1611.00898,", "year": 2016}, {"title": "A probabilistic approach to robust matrix factorization", "authors": ["Naiyan Wang", "Tiansheng Yao", "Jingdong Wang", "Dit-Yan Yeung"], "venue": "In ECCV,", "year": 2012}, {"title": "Bayesian robust matrix factorization for image and video processing", "authors": ["Naiyan Wang", "Dit-Yan Yeung"], "venue": "In ICCV,", "year": 2013}, {"title": "Sketching as a tool for numerical linear algebra", "authors": ["David P. Woodruff"], "venue": "Foundations and Trends in Theoretical Computer Science,", "year": 2014}, {"title": "Direct robust matrix factorization for anomaly detection", "authors": ["L. Xiong", "X. Chen", "J. Schneider"], "venue": "In ICDM,", "year": 2011}, {"title": "Robust PCA via outlier pursuit", "authors": ["H. Xu", "C. Caramanis", "S. Sanghavi"], "venue": "TOIT, 58(5):3047\u20133064,", "year": 2012}, {"title": "Robust principal component analysis by self-organizing rules based on statistical physics approach", "authors": ["L. Xu", "A.L. Yuille"], "venue": "IEEE Transactions on Neural Networks,", "year": 1995}, {"title": "Fast algorithms for robust pca via gradient descent", "authors": ["Xinyang Yi", "Dohyung Park", "Yudong Chen", "Constantine Caramanis"], "venue": "Advances in Neural Information Processing Systems", "year": 2016}, {"title": "Practical low-rank matrix approximation under robust L1-norm", "authors": ["Y. Zheng", "G. Liu", "S. Sugimoto", "S. Yan", "M. Okutomi"], "venue": "In CVPR,", "year": 2012}], "id": "SP:eb8eca4969691abbf46e0ebf9b72a883149142a5", "authors": [{"name": "Flavio Chierichetti", "affiliations": []}, {"name": "Sreenivas Gollapudi", "affiliations": []}, {"name": "Ravi Kumar", "affiliations": []}, {"name": "Rina Panigrahy", "affiliations": []}, {"name": "David P. Woodruff", "affiliations": []}], "abstractText": "We consider the problem of approximating a given matrix by a low-rank matrix so as to minimize the entrywise `p-approximation error, for any p \u2265 1; the case p = 2 is the classical SVD problem. We obtain the first provably good approximation algorithms for this version of low-rank approximation that work for every value of p \u2265 1, including p = \u221e. Our algorithms are simple, easy to implement, work well in practice, and illustrate interesting tradeoffs between the approximation quality, the running time, and the rank of the approximating matrix.", "title": "Algorithms for `p Low-Rank Approximation"}