18	55	We implement a practical parser with a statistical disambiguation model and evaluate it on four data sets: those used in SemEval 2014 Task 8 (Oepen et al., 2014), and the dependency graphs extracted from CCGbank (Hockenmaier and Steedman, 2007).
22	35	Semantic dependency parsing can be formulated as the search for Maximum Subgraph for graph class G: Given a graph G = (V,A), find a subset A′ ⊆ A with maximum total score such that the induced subgraph G′ = (V,A′) belongs to G. Formally, we have the following optimization problem: arg max G∗∈G(s,G) ∑ p in G∗ spart(s, p) G(s, G) denotes the set of all graphs that belong to G and are compatible with s and G. G is usually a complete digraph.
32	59	A dependency graph is 1-EndpointCrossing if for any edge e, all edges that cross e share an endpoint p named pencil point.
36	14	These half-planes may be thought of as the pages of a book, with the vertex line corresponding to the books spine, and the embedding of a graph into such a structure is known as a book embedding.
37	36	(Pitler et al., 2013) proved that 1-endpointcrossing trees are a subclass of graphs whose pagenumber is at most 2.
42	11	Cao et al. (2017) designed a polynomial time Maximum Subgraph algorithm, viz.
48	20	In each construction step, GCHSW allows multiple arcs to be constructed, but whether or not such arcs are added to the target graph depends on their arc-weights.
50	15	For the higher-order MST algorithms, in a single construction step, it is clear whether adding a new arc, and which one.
53	15	Therefore the deterministic strategy is a prerequisite to incorporate higher-order features.
55	18	It is very difficult to enumerate all high-order features for crossing arcs.
63	12	When we decompose the whole graph into inverval [i, j] plus x and remaining part, we will factor out e(x,k) in a successive decomposition for resolving [i, j] plus x.
65	23	Pitler (2014) showed that it is still possible to build accurate tree parsers by considering only higher-order features of noncrossing arcs.
66	40	This is in part because only a tiny fraction of neighboring arcs involve crossing arcs.
71	17	Because ignoring one linguistically-rare structure associated with the C problem in GCHSW descreases the complexity, we exclude this structure in our algorithm.
105	11	e(i,k) is taken as a possible crossing edge.
161	39	The following is a rough illustration.
163	37	a.2 There is a crossing arc from j.
164	17	This case is handled in the same way as the first-order algorithm.
167	47	b.2 There is a crossing arc from j.
171	42	c.2 There is a crossing arc from j.
172	16	c.3 There is a noncrossing arc from j too.
175	26	The sub-problem Int is of size O(n2), with a calculating time of order O(n2) at most.
180	20	This model is somehow inadequate given that the second-order score function cannot penalize a bad factor.
184	25	The derivation that starts from IntC [a, e]⇒ IntC [a, c]+IntO[c, e] incorporates the second-order score ssib(a, c, e).
203	14	We use “standard” training, validation, and test splits to facilitate comparisons.
207	12	Experiments for the other three data sets used POS-tags provided by the shared task.
208	30	We also use features extracted from pseudo trees.
209	61	We utilize the Mate parser (Bohnet, 2010) to generate pseudo trees.
210	78	All experimental results consider directed dependencies in a standard way.
214	17	We can see that the firstorder parser obtains a considerably good accuracy, with rich syntactic features.
