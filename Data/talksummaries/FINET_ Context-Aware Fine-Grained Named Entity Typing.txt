0	31	Named entity typing (NET) is the task of detecting the type(s) of a named entity in context.
1	33	For instance, given “John plays guitar on the stage”, our goal is to infer that “John” is a guitarist or a musician and a person.
16	27	The sentence “Pavano never even made it to the mound,” however, only implicitly indicates that “Pavano” is a baseball player.
19	36	The key problem of this approach is that training data is scarce; this scarcity is amplified for finegrained type systems.
21	33	A popular approach is to train an extractor on a corpus of sentences (e.g., on Wikipedia), in which each named entity is associated with all its types in a KB.
22	27	The key problem with such an approach is that the so-obtained type information is oblivious to the context in which the entity was mentioned.
23	56	For example, in the sentences “Klitschko is known for his powerful punches” and “Klitschko is the Mayor of Kiew,” “Klitschko” will be associated with all its types, e.g., boxer, politician and mayor.
38	24	Instead of restricting types, FINET operates on the the entire WordNet hierarchy with more than 16k types for persons, organizations, and locations.
41	38	In this phase, we collect candidate types for each entity.
51	28	When the condition is not met, we enrich the set of candidate types of the extractor with their hypernyms; we expect types to be overly specific and want to allow the selection phase to be able to select a more general type.
55	18	Preprocessing consists of 5 steps: (i) dependency parsing (Socher et al., 2013); (ii) co-reference (Recasens et al., 2013); (iii) named entity recogni- tion (NER) (Finkel et al., 2005) with the detection of coarse-grained types (i.e., person, organization, location); (iv) clause identification (Del Corro and Gemulla, 2013); (v) word and multi-word expression recognition (Del Corro et al., 2014).
58	18	FINET extractors operate either on the sentence or the clause level.
60	25	Finally, we identify multiword explicit type mentions such as Prime Minister or Secretary of Housing and Urban Development (Del Corro et al., 2014).
63	20	Following previous work (Hearst, 1992), we use a set of patterns to look for expressions that may refer named entity types.
65	27	Once lexical types have been identified, we collect as candidate types the WordNet synsets to which they refer (e.g., 〈father1〉, .
79	19	The KB lookup (described in the next section) both prunes and expands the candidate set using a KB, and acts as a stopping condition.
116	17	A simple way to infer lexical types for entities acting as subjects or objects of a clause is nominalization, i.e., the transformation of the verb into deverbal nouns (e.g., “play” into “player”).
118	23	If the entity mention acts as a subject, we try adding the suffixes “-er,”, “-or,” and “-ant” to the verb’s lemma.
121	27	We consider as potential candidates all types referred to by one of the deverbal nouns and connected to a sense of the verb via DER.
139	18	Our extractor is related to semi-supervised KB methods in that it propagates types of named entity mentions that may appear in a similar context.
167	28	WSD aims to disambiguate a word or phrase (e.g., a noun) with respect to a type system as WordNet; e.g., from “player” to 〈player-1〉.
172	20	For each entity, we consider entity-oblivious context (from the input sentence) as well as entity-specific context (using lexical expansions).
224	74	FINET’s type system consists of more than 16k types with top categories persons, locations and organizations.
247	22	FINET had significantly higher precision across all settings, especially for SFG types (almost three times more than Hyena).
250	21	FINET extracted the largest number of correct SFG types on each dataset.
278	67	The KB types are also noisy, e.g., many soccer players in Yago2 are typed as 〈football player-1〉 and the United Nations is typed as a 〈nation-1〉.
283	27	Errors in the KB also propagate in supervised system, which may lead to “contradictory” types (i.e., an entity being typed as both 〈person-1〉 and 〈location-1〉).
302	45	We presented FINET, a system for fine-grained typing of named entities in context.
303	40	FINET generates candidates using multiple extractors, ranging from explicitly mentioned to implicit types, and subsequently selects the most appropriate.
304	166	Our experimental study indicates that FINET has significantly better performance than previous methods.
