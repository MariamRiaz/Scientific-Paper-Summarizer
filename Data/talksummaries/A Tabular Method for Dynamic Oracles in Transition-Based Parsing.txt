19	37	Like the arc-standard system, the LR-spine parser is not arc-decomposable, and a dynamic oracle for this system was not known.
21	19	The dynamic oracles developed by Goldberg and Nivre (2013) for arc-decomposable systems are based on local properties of computations.
26	67	We show experimentally that this is indeed the case (§8), and that using the training-with-exploration method of (Goldberg and Nivre, 2013) with our dynamic programming based oracles yields superior parsing accuracies on many languages.
27	59	In this section we introduce the arc-standard parser of Nivre (2004), which is the model that we use in this article.
29	34	The set of non-negative integers is denoted as N0.
30	55	For i, j ∈ N0 with i ≤ j, we write [i, j] to denote the set {i, i + 1, .
32	19	We represent an input sentence as a string w = w0 · · ·wn, n ∈ N0, where token w0 is a special root symbol, and each wi with i ∈ [1, n] is a lexical token.
35	38	Arc (i, j) encodes a dependency i → j, and we will often use the latter notation to denote arcs.
36	26	We assume the reader is familiar with the formal framework of transition-based dependency parsing originally introduced by Nivre (2003); see Nivre (2008) for an introduction.
37	40	We only summarize here our notation.
38	97	Transition-based dependency parsers use a stack data structure, where each stack element is associated with a tree spanning (generating) some substring of the input w. The parser processes the input string incrementally, from left to right, applying at each step a transition that updates the stack and/or consumes one token from the input.
41	99	, σ1], d ∈ N0, of nodes σi ∈ Vw, with the topmost element placed at the right.
43	18	The parser also uses a buffer to store the portion of the input string still to be processed.
44	36	We represent the buffer as an ordered sequence β = [i, .
45	124	, n] of nodes from Vw, with i the first element of the buffer.
46	69	In this way β always encodes a (non-necessarily proper) suffix of w. We denote the empty buffer as β = [].
47	54	Sometimes we use the vertical bar to denote the append operator for β, and write β = i|β′ to indicate that i is the first token of β; consequently, we have β′ = [i+ 1, .
49	38	A configuration of the parser relative to w is a triple c = (σ, β,A), where σ and β are a stack and a buffer, respectively, and A ⊆ Vw × Vw is a set of arcs.
53	16	A computation of the parser on w is a sequence c0, .
62	14	They also show that the arc-standard parser is not arc-decomposable.
64	24	A transition-based parser is arc-decomposable if, for every configuration c and for every set of arcs A that can be extended to a projective tree, we have ∀(i→ j) ∈ A,∃c′[c `∗ c′ ∧ (i→ j) ∈ Ac′ ] ⇒ ∃c′′[c `∗ c′′ ∧A ⊆ Ac′′ ] .
66	23	The arc decomposition property is useful for deriving dynamic oracles because it is relatively easy to investigate derivability for single arcs and then, using this property, draw conclusions about the number of gold-arcs that are simultaneously derivable from the given configuration.
71	18	Yet, it is easy to see that a configuration containing both arcs cannot be reached.
73	17	We aim to derive a dynamic oracle for the arc-standard (and related) system.
74	36	This is a function that takes a configuration c and a gold tree tG and returns a set of transitions that are “optimal” for c with respect to tG.
75	27	As already mentioned in the introduction, a dynamic oracle can be used to improve training of greedy transition-based parsers.
76	17	In this section we provide a formal definition for a dynamic oracle.
77	21	Let t1 and t2 be two dependency trees over the same stringw, with arc setsA1 andA2, respectively.
81	18	Let c be a configuration of our parser relative to input string w. We write D(c) to denote the set of all dependency trees that can be obtained in a computation of the form c `∗ cf , where cf is some final configuration.
82	24	We extend the loss function in (1) to configurations by letting L(c, t2) = min t1∈D(c) L(t1, t2) .
