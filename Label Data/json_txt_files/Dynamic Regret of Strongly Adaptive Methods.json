{"sections": [{"heading": "1. Introduction", "text": "Online convex optimization is a powerful paradigm for sequential decision making (Zinkevich, 2003). It can be viewed as a game between a learner and an adversary: In the t-th round, the learner selects a decision wt \u2208 \u2126, simultaneously the adversary chooses a function ft(\u00b7) : \u2126 7\u2192 R, and then the learner suffers an instantaneous loss ft(wt). This study focuses on the full-information setting, where the learner can query the value and gradient of ft (Cesa-Bianchi & Lugosi, 2006). The goal of the learner is to minimize the cumulative loss over T periods . The standard performance measure is regret, which is the difference between the loss\n1National Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China 2Department of Computer Science, The University of Iowa, Iowa City, USA 3Alibaba Group, Seattle, USA. Correspondence to: Lijun Zhang <zhanglj@lamda.nju.edu.cn>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nincurred by the learner and that of the best fixed decision in hindsight, i.e.,\nRegret(T ) = T\u2211 t=1 ft(wt)\u2212 min w\u2208\u2126 T\u2211 t=1 ft(w).\nThe above regret is typically referred to as static regret in the sense that the comparator is time-invariant. The rationale behind this evaluation metric is that one of the decision in \u2126 is reasonably good over the T rounds. However, when the underlying distribution of loss functions changes, the static regret may be too optimistic and fails to capture the hardness of the problem.\nTo address this limitation, new forms of performance measure, including adaptive regret (Hazan & Seshadhri, 2007; 2009) and dynamic regret (Zinkevich, 2003; Hall & Willett, 2013), were proposed and received significant interest recently. Following the terminology of Daniely et al. (2015), we define the strongly adaptive regret as the maximum static regret over intervals of length \u03c4 , i.e.,\nSA-Regret(T, \u03c4)\n= max [s,s+\u03c4\u22121]\u2286[T ] ( s+\u03c4\u22121\u2211 t=s ft(wt)\u2212 min w\u2208\u2126 s+\u03c4\u22121\u2211 t=s ft(w) ) .\n(1)\nMinimizing the adaptive regret enforces the learner to have a small static regret over any interval of length \u03c4 . Since the best decision for different intervals could be different, the learner is essentially competing with a changing comparator.\nA parallel line of research introduces the concept of dynamic regret, where the cumulative loss of the learner is compared against a comparator sequence u1, . . . ,uT \u2208 \u2126, i.e.,\nD-Regret(u1, . . . ,uT ) = T\u2211 t=1 ft(wt)\u2212 T\u2211 t=1 ft(ut). (2)\nIt is well-known that in the worst case, a sublinear dynamic regret is impossible unless we impose some regularities on the comparator sequence or the function sequence (Jadbabaie et al., 2015). A representative example is the functional variation defined below\nVT = T\u2211 t=2 max w\u2208\u2126 |ft(w)\u2212 ft\u22121(w)|. (3)\nBesbes et al. (2015) have proved that as long as VT is sublinear in T , there exists an algorithm that achieves a sublinear dynamic regret. Furthermore, a general restarting procedure is developed, and it enjoys O(T 2/3V 1/3T ) andO(log T \u221a TVT ) rates for convex functions and strongly convex functions, respectively. However, the restarting procedure can only be applied when an upper bound of VT is known beforehand, thus limiting its application in practice.\nWhile both the adaptive and dynamic regrets aim at coping with changing environments, little is known about their relationship. This paper makes a step towards understanding their connections. Specifically, we show that the strongly adaptive regret in (1), together with the functional variation, can be used to upper bound the dynamic regret in (2). Thus, an algorithm with a small strongly adaptive regret is automatically equipped with a tight dynamic regret. As a result, we obtain a series of algorithms for minimizing the dynamic regret that do not need any prior knowledge of the functional variation. The main contributions of this work are summarized below.\n\u2022 We provide a general theorem that upper bounds the dynamic regret in terms of the strongly adaptive regret and the functional variation. \u2022 For convex functions, we show that the strongly adaptive algorithm of Jun et al. (2017) has a dynamic regret of O(T 2/3V 1/3T log\n1/3 T ), which matches the minimax rate (Besbes et al., 2015), up to a polylogarithmic factor. \u2022 For exponentially concave functions, we propose a strongly adaptive algorithm that allows us to control the tradeoff between the adaptive regret and the computational cost explicitly. Then, we demonstrate that its dynamic regret is O(d \u221a TVT log T ), where d is the\ndimensionality. To the best of our knowledge, this is the first time that exponential concavity is utilized in the analysis of dynamic regret. \u2022 For strongly convex functions, our proposed algorithm can also be applied and yields a dynamic regret of O( \u221a TVT log T ), which is also minimax optimal up to\na polylogarithmic factor."}, {"heading": "2. Related Work", "text": "We give a brief introduction to previous work on static, adaptive, and dynamic regrets in the context of online convex optimization."}, {"heading": "2.1. Static Regret", "text": "The majority of studies in online learning are focused on static regret (Shalev-Shwartz & Singer, 2007; Langford et al., 2009; Shalev-Shwartz, 2011; Zhang et al., 2013). For general convex functions, the classical online gradient\ndescent achieves O( \u221a T ) and O(log T ) regret bounds for convex and strongly convex functions, respectively (Zinkevich, 2003; Hazan et al., 2007; Shalev-Shwartz et al., 2007). Both the O( \u221a T ) and O(log T ) rates are known to be minimax optimal (Abernethy et al., 2009). When functions are exponentially concave, a different algorithm, named online Newton step, is developed and enjoys an O(d log T ) regret bound, where d is the dimensionality (Hazan et al., 2007)."}, {"heading": "2.2. Adaptive Regret", "text": "The concept of adaptive regret is introduced by Hazan & Seshadhri (2007), and later strengthened by Daniely et al. (2015). Specifically, Hazan & Seshadhri (2007) introduce the weakly adaptive regret\nWA-Regret(T )\n= max [s,q]\u2286[T ] ( q\u2211 t=s ft(wt)\u2212 min w\u2208\u2126 q\u2211 t=s ft(w) ) .\nTo minimize the adaptive regret, Hazan & Seshadhri (2007) have developed two meta-algorithms: an efficient algorithm with O(log T ) computational complexity per iteration and an inefficient one with O(T ) computational complexity per iteration. These meta-algorithms use an existing online method (that was possibly designed to have small static regret) as a subroutine.1 For convex functions, the efficient and inefficient meta-algorithms have O( \u221a T log3 T )\nand O( \u221a T log T ) regret bounds, respectively. For exponentially concave functions, those rates are improved to O(d log2 T ) and O(d log T ), respectively. We can see that the price paid for the adaptivity is very small: The rates of weakly adaptive regret differ from those of static regret only by logarithmic factors.\nA major limitation of weakly adaptive regret is that it does not respect short intervals well. Taking convex functions as an example, the O( \u221a T log3 T ) and O( \u221a T log T ) bounds are meaningless for intervals of length O( \u221a T ). To overcome this limitation, Daniely et al. (2015) proposed the strongly adaptive regret SA-Regret(T, \u03c4) which takes the length of the interval \u03c4 as a parameter, as indicated in (1). From the definitions, we have SA-Regret(T, \u03c4) \u2264 WA-Regret(T ), but it does not mean the notation of weakly adaptive regret is stronger, because an upper bound for WA-Regret(T ) could be very loose for SA-Regret(T, \u03c4) when \u03c4 is small.\nIf the strongly adaptive regret is small for all \u03c4 < T , we can guarantee the learner has a small regret over any interval of\n1For brevity, we ignored the factor of subroutine in the statements of computational complexities. The O(\u00b7) computational complexity should be interpreted as O(\u00b7) \u00d7 s space complexity and O(\u00b7)\u00d7 t time complexity, where s and t are space and time complexities of the subroutine per iteration, respectively.\nany length. In particular, Daniely et al. (2015) introduced the following definition.\nDefinition 1 Let R(\u03c4) be the minimax static regret bound of the learning problem over \u03c4 periods. An algorithm is strongly adaptive, if\nSA-Regret(T, \u03c4) = O(poly(log T ) \u00b7R(\u03c4)), \u2200\u03c4.\nIt is easy to verify that the meta-algorithms of Hazan & Seshadhri (2007) are strongly adaptive for exponentially concave functions,2 but not for convex functions. Thus, Daniely et al. (2015) developed a new meta-algorithm that satisfies SA-Regret(T, \u03c4) = O( \u221a \u03c4 log T ) for convex functions, and thus is strongly adaptive. The algorithm is also efficient and the computational complexity per iteration is O(log T ). Later, the strongly adaptive regret of convex functions was improved to O( \u221a \u03c4 log T ) by Jun et al. (2017), and the computational complexity remains O(log T ) per iteration. All the previously mentioned algorithms for minimizing adaptive regret need to query the gradient of the loss function at least O(log t) times in the t-th iteration. In a recent study, Wang et al. (2018) demonstrate that the number of gradient evaluations per iteration can be reduced to 1 by introducing the surrogate loss."}, {"heading": "2.3. Dynamic Regret", "text": "In a seminal work, Zinkevich (2003) proposed to use the path-length defined as\nP(u1, . . . ,uT ) = T\u2211 t=2 \u2016ut \u2212 ut\u22121\u20162\nto upper bound the dynamic regret, where u1, . . . ,uT \u2208 \u2126 is a comparator sequence. Specifically, Zinkevich (2003) proved that for any sequence of convex functions, the dynamic regret of online gradient descent can be upper bounded by O( \u221a TP(u1, . . . ,uT )). Another regularity of the comparator sequence, which is similar to the path-length, is defined as\nP \u2032(u1, . . . ,uT ) = T\u2211 t=2 \u2016ut \u2212 \u03a6t(ut\u22121)\u20162\nwhere \u03a6t(\u00b7) is a dynamic model that predicts a reference point for the t-th round. Hall & Willett (2013) developed a novel algorithm named dynamic mirror descent and proved that its dynamic regret is on the order of\u221a TP \u2032(u1, . . . ,uT ). The advantage of P \u2032(u1, . . . ,uT ) is that when the comparator sequence follows the dynamical\n2That is because (i) SA-Regret(T, \u03c4) \u2264 WA-Regret(T ), and (ii) there is a poly(log T ) factor in the definition of strong adaptivity.\nmodel closely, it can be much smaller than the path-length P(u1, . . . ,uT ).\nLet w\u2217t \u2208 argminw\u2208\u2126 ft(w) be a minimizer of ft(\u00b7). For any sequence of u1, . . . ,uT \u2208 \u2126, we have\nD-Regret(u1, . . . ,uT ) = T\u2211 t=1 ft(wt)\u2212 T\u2211 t=1 ft(ut)\n\u2264D-Regret(w\u22171, . . . ,w\u2217T ) = T\u2211 t=1 ft(wt)\u2212 T\u2211 t=1 min w\u2208\u2126 ft(w).\nThus, D-Regret(w\u22171, . . . ,w \u2217 T ) can be treated as the worst case of the dynamic regret, and there are many works that were devoted to minimizing D-Regret(w\u22171, . . . ,w \u2217 T ) (Jadbabaie et al., 2015; Mokhtari et al., 2016; Yang et al., 2016; Zhang et al., 2017).\nWhen a prior knowledge of P(w\u22171, . . . ,w\u2217T ) is available, D-Regret(w\u22171, . . . ,w \u2217 T ) can be upper bounded by\nO( \u221a TP(w\u22171, . . . ,w\u2217T )) (Yang et al., 2016). If all the functions are strongly convex and smooth, the upper bound can be improved to O(P(w\u22171, . . . ,w\u2217T )) (Mokhtari et al., 2016). The O(P(w\u22171, . . . ,w\u2217T )) rate is also achievable when all the functions are convex and smooth, and all the minimizers w\u2217t \u2019s lie in the interior of \u2126 (Yang et al., 2016). In a recent study, Zhang et al. (2017) introduced a new regularity\u2014squared path-length\nS(w\u22171, . . . ,w\u2217T ) = T\u2211 t=2 \u2016w\u2217t \u2212w\u2217t\u22121\u201622\nwhich could be much smaller than the path-length P(w\u22171, . . . ,w\u2217T ) when the difference between successive minimizers is small. Zhang et al. (2017) developed a novel algorithm named online multiple gradient descent, and proved that D-Regret(w\u22171, . . . ,w \u2217 T ) is on the order of min(P(w\u22171, . . . ,w\u2217T ),S(w\u22171, . . . ,w\u2217T )) for (semi-) strongly convex and smooth functions.\nDiscussions Although closely related, adaptive regret and dynamic regret are studied independently and there are few discussions of their relationships. In the literature, dynamic regret is also referred to as tracking regret or shifting regret (Littlestone & Warmuth, 1994; Herbster & Warmuth, 1998; 2001). In the setting of \u201cprediction with expert advice\u201d, Adamskiy et al. (2012) have shown that the tracking regret can be derived from the adaptive regret. In the setting of \u201conline linear optimization in the simplex\u201d, Cesa-bianchi et al. (2012) introduced a generalized notion of shifting regret which unifies adaptive regret and shifting regret. Different from previous work, this paper considers the setting of online convex optimization, and illustrates that the dynamic regret can be upper bounded by the adaptive regret and the functional variation."}, {"heading": "3. A Unified Adaptive Algorithm", "text": "In this section, we introduce a unified approach for minimizing the adaptive regret of exponentially concave functions, as well as strongly convex functions."}, {"heading": "3.1. Motivation", "text": "We first provide the definition of exponentially concave (abbr. exp-concave) functions (Cesa-Bianchi & Lugosi, 2006).\nDefinition 2 A function f(\u00b7) : \u2126 7\u2192 R is \u03b1-exp-concave if exp(\u2212\u03b1f(\u00b7)) is concave over \u2126.\nFor exp-concave functions, Hazan & Seshadhri (2007) have developed two meta-algorithms that take the online Newton step as its subroutine, and proved the following properties.\n\u2022 The inefficient one has O(T ) computational complexity per iteration, and its adaptive regret is O(d log T ). \u2022 The efficient one hasO(log T ) computational complexity per iteration, and its adaptive regret is O(d log2 T ).\nAs can be seen, there is a tradeoff between the computational complexity and the adaptive regret: A lighter computation incurs a looser bound and a tighter bound requires a higher computation. Our goal is to develop a unified approach, that allows us to trade effectiveness for efficiency explicitly."}, {"heading": "3.2. Improved Following the Leading History (IFLH)", "text": "Let E be an online learning algorithm that is designed to minimize the static regret of exp-concave functions or strongly convex functions, e.g., online Newton step (Hazan et al., 2007) or online gradient descent (Zinkevich, 2003). Similar to the approach of following the leading history (FLH) (Hazan & Seshadhri, 2007), at any time t, we will instantiate an expert by applying the online learning algorithm E to the sequence of loss functions ft, ft+1, . . ., and utilize the strategy of learning from expert advice to combine solutions of different experts (Herbster & Warmuth, 1998). Our method is named as improved following the leading history (IFLH), and is summarized in Algorithm 1.\nLet Et be the expert that starts to work at time t. To control the computational complexity, we will associate an ending time et for eachEt. The expertEt is alive during the period [t, et \u2212 1]. In each round t, we maintain a working set of experts St, which contains all the alive experts, and assign a probability pjt for each E\nj \u2208 St. In Steps 6 and 7, we remove all the experts whose ending times are no larger than t. Since the number of alive experts has changed, we need to update the probability assigned to them, which is performed in Steps 12 to 14. In Steps 15 and 16, we add a new expert Et to St, calculate its ending time according to Definition 3 introduced below, and set ptt = 1 t . It is easy\nAlgorithm 1 Improved Following the Leading History (IFLH)\n1: Input: An integer K 2: Initialize S0 = \u2205. 3: for t = 1, . . . , T do 4: Set Zt = 0 {Remove some existing experts} 5: for Ej \u2208 St\u22121 do 6: if ej \u2264 t then 7: Update St\u22121 \u2190 St\u22121 \\ {Ej} 8: else 9: Set Zt = Zt + p\u0302 j t\n10: end if 11: end for {Normalize the probability} 12: for Ej \u2208 St\u22121 do 13: Set pjt = p\u0302jt Zt ( 1\u2212 1t ) 14: end for {Add a new expert Et} 15: Set St = St\u22121 \u222a {Et} 16: Compute the ending time et = EK(t) according to\nDefinition 3 and set ptt = 1 t\n{Compute the final predicted model} 17: Submit the solution\nwt = \u2211 Ej\u2208St pjtw j t\nand suffer loss ft(wt) {Update weights and expert}\n18: Set Zt+1 = 0 19: for Ej \u2208 St do 20: Compute pjt+1 = p j t exp(\u2212\u03b1ft(w j t )) and Zt+1 =\nZt+1 + p j t+1\n21: Pass the function ft(\u00b7) to Ej 22: end for 23: for Ej \u2208 St do 24: Set p\u0302jt+1 = pjt+1 Zt+1 25: end for 26: end for\nto verify \u2211 Ej\u2208St p j t = 1. Let w j t be the output of E\nj at the t-th round, where t \u2265 j. In Step 17, we submit the weighted average of wjt with coefficient p j t as the output wt, and suffer the loss ft(wt). From Steps 18 to 25, we use the exponential weighting scheme to update the weight for each expert Ej based on its loss ft(w j t ). In Step 21, we pass the loss function to all the alive experts such that they can update their predictions for the next round.\nThe difference between our IFLH and the original FLH is how to decide the ending time et of expert Et. In this paper, we propose the following base-K ending time.\nDefinition 3 (Base-K Ending Time) Let K be an integer, and the representation of t in the base-K number system as\nt = \u2211 \u03c4\u22650 \u03b2\u03c4K \u03c4\nwhere 0 \u2264 \u03b2\u03c4 < K, for all \u03c4 \u2265 0. Let k be the smallest integer such that \u03b2k > 0, i.e., k = min{\u03c4 : \u03b2\u03c4 > 0}. Then, the base-K ending time of t is defined as\nEK(t) = \u2211\n\u03c4\u2265k+1\n\u03b2\u03c4K \u03c4 +Kk+1.\nIn other words, the ending time is the number represented by the new sequence obtained by setting the first nonzero element in the sequence \u03b20, \u03b21, . . . to be 0 and adding 1 to the element after it.\nLet\u2019s take the decimal system as an example (i.e., K = 10). Then,\nE10(1) = E10(2) = \u00b7 \u00b7 \u00b7 = E10(9) = 10, E10(11) = E10(12) = \u00b7 \u00b7 \u00b7 = E10(19) = 20, E10(10) = E10(20) = \u00b7 \u00b7 \u00b7 = E10(90) = 100."}, {"heading": "3.3. Theoretical Guarantees", "text": "When the base-K ending time is used in Algorithm 1, we have the following properties.\nLemma 1 Suppose we use the base-K ending time in Algorithm 1.\n1. For any t \u2265 1, we have |St| \u2264 (blogK tc+ 1) (K \u2212 1) = O ( K log t\nlogK\n) .\n2. For any interval I = [r, s] \u2286 [T ], we can always find m segments Ij = [tj , etj \u2212 1], j \u2208 [m] with m \u2264 dlogK(s\u2212 r + 1)e+ 1, such that t1 = r, etj = tj+1, j \u2208 [m\u2212 1], and etm > s.\nThe first part of Lemma 1 implies that the size of St is O(K log t/ logK). An example of St in the decimal system is given below.\nS486 =  481, 482, . . . , 486, 410, 420, . . . , 480,\n100, 200, . . . , 400  . The second part of Lemma 1 implies that for any interval I = [r, s], we can find O(log s/ logK) experts such that their survival periods cover I . Again, we present an example in the decimal system: The interval [111, 832] can be covered by\n[111, 119], [120, 199], and [200, 999]\nwhich are the survival periods of experts E111, E120, and E200, respectively. Recall that E10(111) = 120, E10(120) = 200, and E10(200) = 1000.\nWe note that a similar strategy for deciding the ending time was proposed by Gyo\u0308rgy et al. (2012) in the study of \u201cprediction with expert advice\u201d. The main difference is that their strategy is built upon base-2 number system and introduces an additional parameter g to compromise between the computational complexity and the regret, in contrast our method relies on base-K number system and uses K to control the tradeoff. Lemma 2 of Gyo\u0308rgy et al. (2012) indicates an O(g log t) bound on the number of alive experts, which is worse than our O(K log t/ logK) bound by a logarithmic factor.\nTo present adaptive regret bounds, we introduce the following common assumption.\nAssumption 1 Both the gradient and the domain are bounded.\n\u2022 The gradients of all the online functions are bounded by G, i.e., maxw\u2208\u2126 \u2016\u2207ft(w)\u2016 \u2264 G for all ft. \u2022 The diameter of the domain \u2126 is bounded by B, i.e., maxw,w\u2032\u2208\u2126 \u2016w \u2212w\u2032\u2016 \u2264 B.\nBased on Lemma 1, we have the following theorem regarding the adaptive regret of exp-concave functions.\nTheorem 1 Suppose Assumption 1 holds, \u2126 \u2282 Rd, and all the functions are \u03b1-exp-concave. If online Newton step is used as the subroutine in Algorithm 1, we have\ns\u2211 t=r ft(wt)\u2212 min w\u2208\u2126 s\u2211 t=r ft(w)\n\u2264 ( (5d+ 1)m+ 2\n\u03b1 + 5dmGB\n) log T\nwhere [r, s] \u2286 [T ] and m \u2264 dlogK(s\u2212 r + 1)e+ 1. Thus,\nSA-Regret(T, \u03c4) \u2264 ( (5d+ 1)m\u0304+ 2\n\u03b1 + 5dm\u0304GB\n) log T = O ( d log2 T\nlogK ) where m\u0304 = dlogK \u03c4e+ 1.\nFrom Lemma 1 and Theorem 1, we observe that the adaptive regret is a decreasing function of K, while the computational cost is an increasing function of K. Thus, we can control the tradeoff by tuning the value of K. Specifically, Lemma 1 indicates the proposed algorithm has\n(blogK T c+ 1) (K \u2212 1) = O ( K log T\nlogK ) computational complexity per iteration. On the other hand, Theorem 1 implies that for \u03b1-exp-concave functions that\nsatisfy Assumption 1, the strongly adaptive regret of Algorithm 1 is(\n(5d+ 1)m\u0304+ 2\n\u03b1 + 5dm\u0304GB\n) log T = O ( d log2 T\nlogK ) where d is the dimensionality and m\u0304 = dlogK(\u03c4)e+ 1.\nWe list several choices of K and the resulting theoretical guarantees in Table 1, and have the following observations.\n\u2022 When K = 2, we recover the guarantee of the efficient algorithm of Hazan & Seshadhri (2007), and when K = T , we obtain the inefficient one. \u2022 By setting K = dT 1/\u03b3e where \u03b3 > 1 is a small constant, such as 10, the strongly adaptive regret can be viewed as O(d log T ), and at the same time, the computational complexity is also very low for a large range of T .\nNext, we consider strongly convex functions.\nDefinition 4 A function f(\u00b7) : \u2126 7\u2192 R is \u03bb-strongly convex if\nf(y) \u2265 f(x)+ \u3008\u2207f(x),y \u2212 x\u3009+ \u03bb 2 \u2016y\u2212x\u201622, \u2200x,y \u2208 \u2126.\nIt is easy to verify that strongly convex functions with bounded gradients are also exp-concave (Hazan et al., 2007).\nLemma 2 Suppose f(\u00b7) : \u2126 7\u2192 R is \u03bb-strongly convex and \u2016\u2207f(w)\u2016 \u2264 G for all w \u2208 \u2126. Then, f(\u00b7) is \u03bbG2 -expconcave.\nAccording to the above lemma, we still use Algorithm 1 as the meta-algorithm, but choose online gradient descent as the subroutine. In this way, the adaptive regret does not depend on the dimensionality d.\nTheorem 2 Suppose Assumption 1 holds, and all the functions are \u03bb-strongly convex. If online gradient descent is used as the subroutine in Algorithm 1, we have s\u2211 t=r ft(wt)\u2212 min w\u2208\u2126 s\u2211 t=r ft(w) \u2264 G2 2\u03bb ( m+ (3m+ 4) log T )\nwhere [r, s] \u2286 [T ] and m \u2264 dlogK(s\u2212 r + 1)e+ 1. Thus\nSA-Regret(T, \u03c4)\n\u2264G 2\n2\u03bb\n( m\u0304+ (3m\u0304+ 4) log T ) = O\n( log2 T\nlogK ) where m\u0304 = dlogK \u03c4e+ 1."}, {"heading": "4. From Adaptive to Dynamic", "text": "In this section, we first introduce a general theorem that bounds the dynamic regret by the adaptive regret, and then derive specific regret bounds for convex functions, exponentially concave functions, and strongly convex functions."}, {"heading": "4.1. Adaptive-to-Dynamic Conversion", "text": "Let I1 = [s1, q1], I2 = [s2, q2], . . . , Ik = [sk, qk] be a partition of [1, T ]. That is, they are successive intervals such that\ns1 = 1, qi + 1 = si+1, i \u2208 [k \u2212 1], and qk = T. (4)\nDefine the local functional variation of the i-th interval as\nVT (i) = qi\u2211 t=si+1 max w\u2208\u2126 |ft(w)\u2212 ft\u22121(w)|\nand it is obvious that \u2211k i=1 VT (i) \u2264 VT .3 Then, we have the following theorem for bounding the dynamic regret in terms of the strongly adaptive regret and the functional variation.\nTheorem 3 Let w\u2217t \u2208 argminw\u2208\u2126 ft(w). For all integer k \u2208 [T ], we have\nD-Regret(w\u22171, . . . ,w \u2217 T )\n\u2264 min I1,...,Ik k\u2211 i=1 ( SA-Regret(T, |Ii|) + 2|Ii| \u00b7 VT (i) ) where the minimization is taken over any sequence of intervals that satisfy (4).\nThe above theorem is analogous to Proposition 2 of Besbes et al. (2015), which provides an upper bound for a special choice of the interval sequence. The main difference is that there is a minimization operation in our bound, which allows us to get rid of the issue of parameter selection. For a specific type of problems, we can plug in the corresponding\n3Note that in certain cases, the sum of local functional variation \u2211k i=1 VT (i) can be much smaller than the total functional variation VT . For example, when the sequence of functions only changes k times, we can construct the intervals based on the changing rounds such that \u2211k i=1 VT (i) = 0.\nupper bound of strongly adaptive regret, and then choose any sequence of intervals to obtain a concrete upper bound. In particular, the choice of the intervals may depend on the (possibly unknown) functional variation."}, {"heading": "4.2. Convex Functions", "text": "For convex functions, we choose the meta-algorithm of Jun et al. (2017) and take the online gradient descent as its subroutine. The following theorem regarding the adaptive regret can be obtained from that paper.\nTheorem 4 Under Assumption 1, the meta-algorithm of Jun et al. (2017) is strongly adaptive with\nSA-Regret(T, \u03c4) \u2264 (\n12BG\u221a 2\u2212 1\n+ 8 \u221a 7 log T + 5 )\u221a \u03c4 = O( \u221a \u03c4 log T ).\nFrom Theorems 3 and 4, we derive the following bound for the dynamic regret.\nCorollary 5 Under Assumption 1, the meta-algorithm of Jun et al. (2017) satisfies\nD-Regret(w\u22171, . . . ,w \u2217 T )\n\u2264max  (c+ 9 \u221a 7 log T + 5) \u221a T (c+ 8 \u221a 5)T 2/3V 1/3 T\nlog1/6 T + 24T 2/3V 1/3 T log 1/3 T\n=O ( max {\u221a\nT log T , T 2/3V 1/3 T log\n1/3 T })\nwhere c = 12BG/( \u221a 2\u2212 1).\nAccording to Theorem 2 of Besbes et al. (2015), we know that the minimax dynamic regret of convex functions is O(T 2/3V\n1/3 T ). Thus, our upper bound is minimax optimal\nup to a polylogarithmic factor. Although the restarted online gradient descent of Besbes et al. (2015) achieves a dynamic regret of O(T 2/3V 1/3T ), it requires to know an upper bound of the functional variation VT . In contrast, the metaalgorithm of Jun et al. (2017) does not need any prior knowledge of VT . We note that the meta-algorithm of Daniely et al. (2015) can also be used here, and its dynamic regret is on the order of max {\u221a T log T, T 2/3V\n1/3 T log\n2/3 T } ."}, {"heading": "4.3. Exponentially Concave Functions", "text": "We proceed to consider exp-concave functions, defined in Definition 2. Exponential concavity is stronger than convexity but weaker than strong convexity. It can be used to model many popular losses used in machine learning, such as the square loss in regression, logistic loss in classification and negative logarithm loss in portfolio management (Koren, 2013).\nFor exp-concave functions, we choose Algorithm 1 in this paper, and take the online Newton step as its subroutine. Based on Theorems 1 and 3, we derive the dynamic regret of the proposed algorithm.\nCorollary 6 Let K = dT 1/\u03b3e, where \u03b3 > 1 is a small constant. Suppose Assumption 1 holds, \u2126 \u2282 Rd, and all the functions are \u03b1-exp-concave. Algorithm 1, with online Newton step as its subroutine, is strongly adaptive with\nSA-Regret(T, \u03c4) \u2264 ( (5d+ 1)(\u03b3 + 1) + 2\n\u03b1 + 5d(\u03b3 + 1)GB\n) log T\n=O (\u03b3d log T ) = O (d log T )\nand its dynamic regret satisfies\nD-Regret(w\u22171, . . . ,w \u2217 T ) \u2264 ( (5d+ 1)(\u03b3 + 1) + 2\n\u03b1 + 5d(\u03b3 + 1)GB + 2 ) \u00b7max { log T, \u221a TVT log T\n} =O ( d \u00b7max { log T, \u221a TVT log T }) .\nTo the best of our knowledge, this is the first dynamic regret that exploits exponential concavity. Furthermore, according to the minimax dynamic regret of strongly convex functions (Besbes et al., 2015), our upper bound is minimax optimal, up to a polylogarithmic factor."}, {"heading": "4.4. Strongly Convex Functions", "text": "Finally, we study strongly convex functions. According to Lemma 2, we know that strongly convex functions with bounded gradients are also exp-concave. Thus, Corollary 6 can be directly applied to strongly convex functions, and yields a dynamic regret of O(d \u221a TVT log T ). However, the upper bound depends on the dimensionality d. To address this limitation, we use online gradient descent as the subroutine in Algorithm 1.\nFrom Theorems 2 and 3, we have the following theorem, in which both the adaptive and dynamic regrets are independent from d.\nCorollary 7 Let K = dT 1/\u03b3e, where \u03b3 > 1 is a small constant. Suppose Assumption 1 holds, and all the functions are \u03bb-strongly convex. Algorithm 1, with online gradient descent as its subroutine, is strongly adaptive with\nSA-Regret(T, \u03c4)\n\u2264G 2\n2\u03bb\n( \u03b3 + 1 + (3\u03b3 + 7) log T ) =O (\u03b3 log T ) = O (log T )\nand its dynamic regret satisfies\nD-Regret(w\u22171, . . . ,w \u2217 T )\n\u2264max  \u03b3G2 \u03bb + ( 5\u03b3G2 \u03bb + 2 ) log T \u03b3G2\n\u03bb \u221a TVT log T + ( 5\u03b3G2 \u03bb + 2 )\u221a TVT log T\n=O ( max { log T, \u221a TVT log T }) .\nAccording to Theorem 4 of Besbes et al. (2015), the minimax dynamic regret of strongly convex functions is O( \u221a TVT ), which implies our upper bound is almost minimax optimal. By comparison, the restarted online gradient descent of Besbes et al. (2015) has a dynamic regret of O(log T \u221a TVT ), but it requires to know an upper bound of VT ."}, {"heading": "5. Analysis", "text": "We here present the proof of Theorem 3. The omitted proofs are provided in the supplementary."}, {"heading": "5.1. Proof of Theorem 3", "text": "First, we upper bound the dynamic regret in the following way\nD-Regret(w\u22171, . . . ,w \u2217 T )\n= k\u2211 i=1 ( qi\u2211 t=si ft(wt)\u2212 qi\u2211 t=si min w\u2208\u2126 ft(w) )\n= k\u2211 i=1  qi\u2211 t=si ft(wt)\u2212 min w\u2208\u2126 qi\u2211 t=si\nft(w)\ufe38 \ufe37\ufe37 \ufe38 :=ai\n+ min w\u2208\u2126 qi\u2211 t=si ft(w)\u2212 qi\u2211 t=si min w\u2208\u2126\nft(w)\ufe38 \ufe37\ufe37 \ufe38 :=bi\n .\n(5)\nFrom the definition of strongly adaptive regret, we can upper bound ai by\nqi\u2211 t=si ft(wt)\u2212 min w\u2208\u2126 qi\u2211 t=si ft(w) \u2264 SA-Regret(T, |Ii|).\nTo upper bound bi, we follow the analysis of Proposition 2\nof Besbes et al. (2015):\nmin w\u2208\u2126 qi\u2211 t=si ft(w)\u2212 qi\u2211 t=si min w\u2208\u2126 ft(w)\n= min w\u2208\u2126 qi\u2211 t=si ft(w)\u2212 qi\u2211 t=si ft(w \u2217 t )\n\u2264 qi\u2211 t=si ft(w \u2217 si)\u2212 qi\u2211 t=si ft(w \u2217 t )\n\u2264|Ii| \u00b7 max t\u2208[si,qi]\n( ft(w \u2217 si)\u2212 ft(w \u2217 t ) ) .\n(6)\nFurthermore, for any t \u2208 [si, qi], we have\nft(w \u2217 si)\u2212 ft(w \u2217 t )\n=ft(w \u2217 si)\u2212 fsi(w \u2217 si) + fsi(w \u2217 si)\u2212 ft(w \u2217 t ) \u2264ft(w\u2217si)\u2212 fsi(w \u2217 si) + fsi(w \u2217 t )\u2212 ft(w\u2217t ) \u22642VT (i).\n(7)\nCombining (6) with (7), we have\nmin w\u2208\u2126 qi\u2211 t=si ft(w)\u2212 qi\u2211 t=si min w\u2208\u2126 ft(w) \u2264 2|Ii| \u00b7 VT (i).\nSubstituting the upper bounds of ai and bi into (5), we arrive at\nD-Regret(w\u22171, . . . ,w \u2217 T )\n\u2264 k\u2211 i=1 (SA-Regret(T, |Ii|) + 2|Ii| \u00b7 VT (i)) .\nSince the above inequality holds for any partition of [1, T ], we can take minimization to get a tight bound."}, {"heading": "6. Conclusions and Future Work", "text": "In this paper, we demonstrate that the dynamic regret can be upper bounded by the adaptive regret and the functional variation, which implies strongly adaptive algorithms are automatically equipped with tight dynamic regret bounds. As a result, we are able to derive dynamic regret bounds for convex functions, exp-concave functions, and strongly convex functions. Moreover, we provide a unified approach for minimizing the adaptive regret of exp-concave functions, as well as strongly convex functions.\nThe adaptive-to-dynamic conversion leads to a series of dynamic regret bounds in terms of the functional variation. As we mentioned before, dynamic regret can also be upper bounded by other regularities such as the path-length. It is interesting to investigate whether those kinds of upper bounds can also be established for strongly adaptive algorithms."}, {"heading": "Acknowledgements", "text": "This work was partially supported by the National Key R&D Program of China (2018YFB1004300), NSFC (61603177, 61333014), JiangsuSF (BK20160658), YESS (2017QNRC001), NSF (IIS-1545995), and the Collaborative Innovation Center of Novel Software Technology and Industrialization."}], "year": 2018, "references": [{"title": "A stochastic view of optimal regret through minimax duality", "authors": ["J. Abernethy", "A. Agarwal", "P.L. Bartlett", "A. Rakhlin"], "venue": "In Proceedings of the 22nd Annual Conference on Learning Theory,", "year": 2009}, {"title": "A closer look at adaptive regret", "authors": ["D. Adamskiy", "W.M. Koolen", "A. Chernov", "V. Vovk"], "venue": "In Proceedings of the 23rd International Conference on Algorithmic Learning Theory, pp", "year": 2012}, {"title": "Non-stationary stochastic optimization", "authors": ["O. Besbes", "Y. Gur", "A. Zeevi"], "venue": "Operations Research,", "year": 2015}, {"title": "Prediction, Learning, and Games", "authors": ["N. Cesa-Bianchi", "G. Lugosi"], "year": 2006}, {"title": "Mirror descent meets fixed share (and feels no regret)", "authors": ["N. Cesa-bianchi", "P. Gaillard", "G. Lugosi", "G. Stoltz"], "venue": "In Advances in Neural Information Processing Systems", "year": 2012}, {"title": "Strongly adaptive online learning", "authors": ["A. Daniely", "A. Gonen", "S. Shalev-Shwartz"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "year": 2015}, {"title": "Efficient tracking of large classes of experts", "authors": ["A. Gy\u00f6rgy", "T. Linder", "G. Lugosi"], "venue": "IEEE Transactions on Information Theory,", "year": 2012}, {"title": "Dynamical models and tracking regret in online convex programming", "authors": ["E.C. Hall", "R.M. Willett"], "venue": "In Proceedings of the 30th International Conference on Machine Learning,", "year": 2013}, {"title": "Adaptive algorithms for online decision problems", "authors": ["E. Hazan", "C. Seshadhri"], "venue": "Electronic Colloquium on Computational Complexity,", "year": 2007}, {"title": "Efficient learning algorithms for changing environments", "authors": ["E. Hazan", "C. Seshadhri"], "venue": "In Proceedings of the 26th Annual International Conference on Machine Learning,", "year": 2009}, {"title": "Logarithmic regret algorithms for online convex optimization", "authors": ["E. Hazan", "A. Agarwal", "S. Kale"], "venue": "Machine Learning,", "year": 2007}, {"title": "Tracking the best expert", "authors": ["M. Herbster", "M.K. Warmuth"], "venue": "Machine Learning,", "year": 1998}, {"title": "Tracking the best linear predictor", "authors": ["M. Herbster", "M.K. Warmuth"], "venue": "Journal of Machine Learning Research,", "year": 2001}, {"title": "Online optimization : Competing with dynamic comparators", "authors": ["A. Jadbabaie", "A. Rakhlin", "S. Shahrampour", "K. Sridharan"], "venue": "In Proceedings of the 18th International Conference on Artificial Intelligence and Statistics,", "year": 2015}, {"title": "Improved Strongly Adaptive Online Learning using Coin Betting", "authors": ["Jun", "K.-S", "F. Orabona", "S. Wright", "R. Willett"], "venue": "In Proceedings of the 20th International Conference on Artificial Intelligence and Statistics,", "year": 2017}, {"title": "Open problem: Fast stochastic exp-concave optimization", "authors": ["T. Koren"], "venue": "In Proceedings of the 26th Annual Conference on Learning Theory, pp", "year": 2013}, {"title": "Sparse online learning via truncated gradient", "authors": ["J. Langford", "L. Li", "T. Zhang"], "venue": "In Advances in Neural Information Processing Systems", "year": 2009}, {"title": "The weighted majority algorithm", "authors": ["N. Littlestone", "M.K. Warmuth"], "venue": "Information and Computation,", "year": 1994}, {"title": "Online optimization in dynamic environments: Improved regret rates for strongly convex problems", "authors": ["A. Mokhtari", "S. Shahrampour", "A. Jadbabaie", "A. Ribeiro"], "venue": "In IEEE 55th Conference on Decision and Control,", "year": 2016}, {"title": "Online learning and online convex optimization", "authors": ["S. Shalev-Shwartz"], "venue": "Foundations and Trends in Machine Learning,", "year": 2011}, {"title": "A primal-dual perspective of online learning algorithms", "authors": ["S. Shalev-Shwartz", "Y. Singer"], "venue": "Machine Learning,", "year": 2007}, {"title": "Pegasos: primal estimated sub-gradient solver for SVM", "authors": ["S. Shalev-Shwartz", "Y. Singer", "N. Srebro"], "venue": "In Proceedings of the 24th International Conference on Machine Learning,", "year": 2007}, {"title": "Minimizing adaptive regret with one gradient per iteration", "authors": ["G. Wang", "D. Zhao", "L. Zhang"], "venue": "In Proceedings of the 27th International Joint Conference on Artificial Intelligence,", "year": 2018}, {"title": "Tracking slowly moving clairvoyant: Optimal dynamic regret of online learning with true and noisy gradient", "authors": ["T. Yang", "L. Zhang", "R. Jin", "J. Yi"], "venue": "In Proceedings of the 33rd International Conference on Machine Learning,", "year": 2016}, {"title": "Online kernel learning with a near optimal sparsity bound", "authors": ["L. Zhang", "J. Yi", "R. Jin", "M. Lin", "X. He"], "venue": "In Proceedings of the 30th International Conference on Machine Learning,", "year": 2013}, {"title": "Improved dynamic regret for non-degenerate functions", "authors": ["L. Zhang", "T. Yang", "J. Yi", "R. Jin", "Zhou", "Z.-H"], "venue": "In Advances in Neural Information Processing Systems", "year": 2017}, {"title": "Online convex programming and generalized infinitesimal gradient ascent", "authors": ["M. Zinkevich"], "venue": "In Proceedings of the 20th International Conference on Machine Learning,", "year": 2003}], "id": "SP:4ca54626029e43f12d23e7be0f9fb7bbde814893", "authors": [{"name": "Lijun Zhang", "affiliations": []}, {"name": "Tianbao Yang", "affiliations": []}, {"name": "Rong Jin", "affiliations": []}, {"name": "Zhi-Hua Zhou", "affiliations": []}], "abstractText": "To cope with changing environments, recent developments in online learning have introduced the concepts of adaptive regret and dynamic regret independently. In this paper, we illustrate an intrinsic connection between these two concepts by showing that the dynamic regret can be expressed in terms of the adaptive regret and the functional variation. This observation implies that strongly adaptive algorithms can be directly leveraged to minimize the dynamic regret. As a result, we present a series of strongly adaptive algorithms that have small dynamic regrets for convex functions, exponentially concave functions, and strongly convex functions, respectively. To the best of our knowledge, this is the first time that exponential concavity is utilized to upper bound the dynamic regret. Moreover, all of those adaptive algorithms do not need any prior knowledge of the functional variation, which is a significant advantage over previous specialized methods for minimizing dynamic regret.", "title": "Dynamic Regret of Strongly Adaptive Methods"}