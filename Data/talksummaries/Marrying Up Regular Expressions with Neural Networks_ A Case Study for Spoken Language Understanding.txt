0	133	Regular expressions (REs) are widely used in various natural language processing (NLP) tasks like pattern matching, sentence classification, sequence labeling, etc.
1	72	As a technique based on human-crafted rules, it is concise, interpretable, tunable, and does not rely on much training data to generate.
2	9	As such, it is commonly used in industry, especially when the available training examples are limited – a problem known as few-shot learning (GC et al., 2015).
3	27	While powerful, REs have a poor generalization ability because all synonyms and variations in a RE must be explicitly specified.
4	20	As a result, REs are often ensembled with data-driven methods, such as neural network (NN) based techniques, where a set of carefully-written REs are used to handle certain cases with high precision, leaving the rest for data-driven methods.
5	33	We believe the use of REs can go beyond simple pattern matching.
6	22	In addition to being a separate classifier to be ensembled, a RE also encodes a developer’s knowledge for the problem domain.
11	24	This also provides us an opportunity to learn from various kinds of REs, since NNs are known to be good at tolerating noises (Xie et al., 2016).
13	47	At the input layer, we propose to use the evaluation outcome of REs as the input features of a NN (Sec.3.2).
14	114	At the network module level, we show how to exploit the knowledge encoded in REs to guide the attention mechanism of a NN (Sec.
15	47	At the output layer, we combine the evaluation outcome of a RE with the NN output in a learnable manner (Sec.
16	247	We evaluate our approach by applying it to two spoken language understanding (SLU) tasks, namely intent detection and slot filling, which respectively correspond to two fundamental NLP tasks: sentence classification and sequence labeling.
17	58	To demonstrate the usefulness of REs in realworld scenarios where the available number of annotated data can vary, we explore both the fewshot learning setting and the one with full training data.
18	78	Experimental results show that our approach is highly effective in utilizing the available annotated data, yielding significantly better learning performance over the RE-unaware method.
20	6	(1) We present the first work to systematically investigate methods for combining REs with NNs.
21	60	(2) The proposed methods are shown to clearly improve the NN performance in both the few-shot learning and the full annotation settings.
22	41	(3) We provide a set of guidance on how to combine REswith NNs and RE annotation.
23	326	In this paper, we use italic for emphasis like intent detection, the Courier typeface for abbreviations like RE, bold italic for the first appearance of a concept like clue words, Courier surrounded by / for regular expressions like /list( the)?
24	74	AIRLINE/, and underlined italic for words of sentences in our dataset like Boston.
26	32	The former is a sentence classification task where we learn a function to map an input sentence of n words, x = [x1, ..., xn], to a corresponding intent label, c. The latter is a sequence labeling task for which we learn a function to take in an input query sentence of n words, x = [x1, ..., xn], to produce a corresponding labeling sequence, y = [y1, ..., yn], where yi is the slot label of the corresponding word, xi.
28	10	A slot filler, on the other hand, should identify the slots fromloc.city and toloc.city by labeling Boston and Miami, respectively, using the begin-inside-outside (BIO) scheme.
29	4	In this work, a RE defines a mapping from a text pattern to several REtags which are the same as or related to the target labels (i.e., intent and slot labels).
30	23	A search function takes in a RE, applies it to all sentences, and returns any texts that match the pattern.
33	20	1, we get a REtag of flight that is the same as the intent label flight.
37	8	(1) When REs are used at the network module level (Sec.
46	11	1 would be simply tagged as city to capture the commonality of three related target slot labels: fromloc.city, toloc.city, stoploc.city.
48	17	The purpose of abstracting REtags to a simplified version of the target slot labels here is to show that REs can still be useful when their evaluation outcome does not exactly match our learning objective.
49	60	4.2, using simplified REtags can also make the development of REs easier in our tasks.
50	38	Intuitively, complicated REs can lead to better performance but require more efforts to generate.
51	19	Generally, there are two aspects affecting RE complexity most: the number of RE groups1 and or clauses (i.e., expressions separated by the disjunction operator |) in a RE group.
