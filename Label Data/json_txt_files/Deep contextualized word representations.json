{"sections": [{"heading": "1 Introduction", "text": "Pre-trained word representations (Mikolov et al., 2013; Pennington et al., 2014) are a key component in many neural language understanding models. However, learning high quality representations can be challenging. They should ideally model both (1) complex characteristics of word use (e.g., syntax and semantics), and (2) how these uses vary across linguistic contexts (i.e., to model polysemy). In this paper, we introduce a new type of deep contextualized word representation that directly addresses both challenges, can be easily integrated into existing models, and significantly improves the state of the art in every considered case across a range of challenging language understanding problems.\nOur representations differ from traditional word type embeddings in that each token is assigned a representation that is a function of the entire input sentence. We use vectors derived from a bidirectional LSTM that is trained with a coupled lan-\nguage model (LM) objective on a large text corpus. For this reason, we call them ELMo (Embeddings from Language Models) representations. Unlike previous approaches for learning contextualized word vectors (Peters et al., 2017; McCann et al., 2017), ELMo representations are deep, in the sense that they are a function of all of the internal layers of the biLM. More specifically, we learn a linear combination of the vectors stacked above each input word for each end task, which markedly improves performance over just using the top LSTM layer.\nCombining the internal states in this manner allows for very rich word representations. Using intrinsic evaluations, we show that the higher-level LSTM states capture context-dependent aspects of word meaning (e.g., they can be used without modification to perform well on supervised word sense disambiguation tasks) while lowerlevel states model aspects of syntax (e.g., they can be used to do part-of-speech tagging). Simultaneously exposing all of these signals is highly beneficial, allowing the learned models select the types of semi-supervision that are most useful for each end task.\nExtensive experiments demonstrate that ELMo representations work extremely well in practice. We first show that they can be easily added to existing models for six diverse and challenging language understanding problems, including textual entailment, question answering and sentiment analysis. The addition of ELMo representations alone significantly improves the state of the art in every case, including up to 20% relative error reductions. For tasks where direct comparisons are possible, ELMo outperforms CoVe (McCann et al., 2017), which computes contextualized representations using a neural machine translation encoder. Finally, an analysis of both ELMo and CoVe reveals that deep representations outperform ar X\niv :1\n80 2.\n05 36\n5v 2\n[ cs\n.C L\n] 2\n2 M\nar 2\n01 8\nthose derived from just the top layer of an LSTM. Our trained models and code are publicly available, and we expect that ELMo will provide similar gains for many other NLP problems.1"}, {"heading": "2 Related work", "text": "Due to their ability to capture syntactic and semantic information of words from large scale unlabeled text, pretrained word vectors (Turian et al., 2010; Mikolov et al., 2013; Pennington et al., 2014) are a standard component of most state-ofthe-art NLP architectures, including for question answering (Liu et al., 2017), textual entailment (Chen et al., 2017) and semantic role labeling (He et al., 2017). However, these approaches for learning word vectors only allow a single contextindependent representation for each word.\nPreviously proposed methods overcome some of the shortcomings of traditional word vectors by either enriching them with subword information (e.g., Wieting et al., 2016; Bojanowski et al., 2017) or learning separate vectors for each word sense (e.g., Neelakantan et al., 2014). Our approach also benefits from subword units through the use of character convolutions, and we seamlessly incorporate multi-sense information into downstream tasks without explicitly training to predict predefined sense classes.\nOther recent work has also focused on learning context-dependent representations. context2vec (Melamud et al., 2016) uses a bidirectional Long Short Term Memory (LSTM; Hochreiter and Schmidhuber, 1997) to encode the context around a pivot word. Other approaches for learning contextual embeddings include the pivot word itself in the representation and are computed with the encoder of either a supervised neural machine translation (MT) system (CoVe; McCann et al., 2017) or an unsupervised language model (Peters et al., 2017). Both of these approaches benefit from large datasets, although the MT approach is limited by the size of parallel corpora. In this paper, we take full advantage of access to plentiful monolingual data, and train our biLM on a corpus with approximately 30 million sentences (Chelba et al., 2014). We also generalize these approaches to deep contextual representations, which we show work well across a broad range of diverse NLP tasks.\n1http://allennlp.org/elmo\nPrevious work has also shown that different layers of deep biRNNs encode different types of information. For example, introducing multi-task syntactic supervision (e.g., part-of-speech tags) at the lower levels of a deep LSTM can improve overall performance of higher level tasks such as dependency parsing (Hashimoto et al., 2017) or CCG super tagging (S\u00f8gaard and Goldberg, 2016). In an RNN-based encoder-decoder machine translation system, Belinkov et al. (2017) showed that the representations learned at the first layer in a 2- layer LSTM encoder are better at predicting POS tags then second layer. Finally, the top layer of an LSTM for encoding word context (Melamud et al., 2016) has been shown to learn representations of word sense. We show that similar signals are also induced by the modified language model objective of our ELMo representations, and it can be very beneficial to learn models for downstream tasks that mix these different types of semi-supervision.\nDai and Le (2015) and Ramachandran et al. (2017) pretrain encoder-decoder pairs using language models and sequence autoencoders and then fine tune with task specific supervision. In contrast, after pretraining the biLM with unlabeled data, we fix the weights and add additional taskspecific model capacity, allowing us to leverage large, rich and universal biLM representations for cases where downstream training data size dictates a smaller supervised model."}, {"heading": "3 ELMo: Embeddings from Language Models", "text": "Unlike most widely used word embeddings (Pennington et al., 2014), ELMo word representations are functions of the entire input sentence, as described in this section. They are computed on top of two-layer biLMs with character convolutions (Sec. 3.1), as a linear function of the internal network states (Sec. 3.2). This setup allows us to do semi-supervised learning, where the biLM is pretrained at a large scale (Sec. 3.4) and easily incorporated into a wide range of existing neural NLP architectures (Sec. 3.3)."}, {"heading": "3.1 Bidirectional language models", "text": "Given a sequence of N tokens, (t1, t2, ..., tN ), a forward language model computes the probability of the sequence by modeling the probability of to-\nken tk given the history (t1, ..., tk\u22121):\np(t1, t2, . . . , tN ) = N\u220f k=1 p(tk | t1, t2, . . . , tk\u22121).\nRecent state-of-the-art neural language models (Jo\u0301zefowicz et al., 2016; Melis et al., 2017; Merity et al., 2017) compute a context-independent token representation xLMk (via token embeddings or a CNN over characters) then pass it through L layers of forward LSTMs. At each position k, each LSTM layer outputs a context-dependent representation \u2212\u2192 h LMk,j where j = 1, . . . , L. The top layer LSTM output, \u2212\u2192 h LMk,L , is used to predict the next token tk+1 with a Softmax layer. A backward LM is similar to a forward LM, except it runs over the sequence in reverse, predicting the previous token given the future context: p(t1, t2, . . . , tN ) = N\u220f k=1 p(tk | tk+1, tk+2, . . . , tN ).\nIt can be implemented in an analogous way to a forward LM, with each backward LSTM layer j in a L layer deep model producing representations\u2190\u2212 h LMk,j of tk given (tk+1, . . . , tN ).\nA biLM combines both a forward and backward LM. Our formulation jointly maximizes the log likelihood of the forward and backward directions: N\u2211 k=1 ( log p(tk | t1, . . . , tk\u22121; \u0398x, \u2212\u2192 \u0398LSTM ,\u0398s)\n+ log p(tk | tk+1, . . . , tN ; \u0398x, \u2190\u2212 \u0398LSTM ,\u0398s) ) .\nWe tie the parameters for both the token representation (\u0398x) and Softmax layer (\u0398s) in the forward and backward direction while maintaining separate parameters for the LSTMs in each direction. Overall, this formulation is similar to the approach of Peters et al. (2017), with the exception that we share some weights between directions instead of using completely independent parameters. In the next section, we depart from previous work by introducing a new approach for learning word representations that are a linear combination of the biLM layers."}, {"heading": "3.2 ELMo", "text": "ELMo is a task specific combination of the intermediate layer representations in the biLM. For\neach token tk, a L-layer biLM computes a set of 2L+ 1 representations\nRk = {xLMk , \u2212\u2192 h LMk,j , \u2190\u2212 h LMk,j | j = 1, . . . , L}\n= {hLMk,j | j = 0, . . . , L},\nwhere hLMk,0 is the token layer and h LM k,j = [ \u2212\u2192 h LMk,j ; \u2190\u2212 h LMk,j ], for each biLSTM layer.\nFor inclusion in a downstream model, ELMo collapses all layers in R into a single vector, ELMok = E(Rk; \u0398e). In the simplest case, ELMo just selects the top layer, E(Rk) = hLMk,L , as in TagLM (Peters et al., 2017) and CoVe (McCann et al., 2017). More generally, we compute a task specific weighting of all biLM layers:\nELMotaskk = E(Rk; \u0398 task) = \u03b3task L\u2211 j=0 staskj h LM k,j . (1) In (1), stask are softmax-normalized weights and the scalar parameter \u03b3task allows the task model to scale the entire ELMo vector. \u03b3 is of practical importance to aid the optimization process (see supplemental material for details). Considering that the activations of each biLM layer have a different distribution, in some cases it also helped to apply layer normalization (Ba et al., 2016) to each biLM layer before weighting."}, {"heading": "3.3 Using biLMs for supervised NLP tasks", "text": "Given a pre-trained biLM and a supervised architecture for a target NLP task, it is a simple process to use the biLM to improve the task model. We simply run the biLM and record all of the layer representations for each word. Then, we let the end task model learn a linear combination of these representations, as described below.\nFirst consider the lowest layers of the supervised model without the biLM. Most supervised NLP models share a common architecture at the lowest layers, allowing us to add ELMo in a consistent, unified manner. Given a sequence of tokens (t1, . . . , tN ), it is standard to form a context-independent token representation xk for each token position using pre-trained word embeddings and optionally character-based representations. Then, the model forms a context-sensitive representation hk, typically using either bidirectional RNNs, CNNs, or feed forward networks.\nTo add ELMo to the supervised model, we first freeze the weights of the biLM and then\nconcatenate the ELMo vector ELMotaskk with xk and pass the ELMo enhanced representation [xk; ELMo task k ] into the task RNN. For some tasks (e.g., SNLI, SQuAD), we observe further improvements by also including ELMo at the output of the task RNN by introducing another set of output specific linear weights and replacing hk with [hk; ELMotaskk ]. As the remainder of the supervised model remains unchanged, these additions can happen within the context of more complex neural models. For example, see the SNLI experiments in Sec. 4 where a bi-attention layer follows the biLSTMs, or the coreference resolution experiments where a clustering model is layered on top of the biLSTMs.\nFinally, we found it beneficial to add a moderate amount of dropout to ELMo (Srivastava et al., 2014) and in some cases to regularize the ELMo weights by adding \u03bb\u2016w\u201622 to the loss. This imposes an inductive bias on the ELMo weights to stay close to an average of all biLM layers."}, {"heading": "3.4 Pre-trained bidirectional language model architecture", "text": "The pre-trained biLMs in this paper are similar to the architectures in Jo\u0301zefowicz et al. (2016) and Kim et al. (2015), but modified to support joint training of both directions and add a residual connection between LSTM layers. We focus on large scale biLMs in this work, as Peters et al. (2017) highlighted the importance of using biLMs over forward-only LMs and large scale training.\nTo balance overall language model perplexity with model size and computational requirements for downstream tasks while maintaining a purely character-based input representation, we halved all embedding and hidden dimensions from the single best model CNN-BIG-LSTM in Jo\u0301zefowicz et al. (2016). The final model uses L = 2 biLSTM layers with 4096 units and 512 dimension projections and a residual connection from the first to second layer. The context insensitive type representation uses 2048 character n-gram convolutional filters followed by two highway layers (Srivastava et al., 2015) and a linear projection down to a 512 representation. As a result, the biLM provides three layers of representations for each input token, including those outside the training set due to the purely character input. In contrast, traditional word embedding methods only provide one layer of representation for tokens in a fixed vocabulary.\nAfter training for 10 epochs on the 1B Word Benchmark (Chelba et al., 2014), the average forward and backward perplexities is 39.7, compared to 30.0 for the forward CNN-BIG-LSTM. Generally, we found the forward and backward perplexities to be approximately equal, with the backward value slightly lower.\nOnce pretrained, the biLM can compute representations for any task. In some cases, fine tuning the biLM on domain specific data leads to significant drops in perplexity and an increase in downstream task performance. This can be seen as a type of domain transfer for the biLM. As a result, in most cases we used a fine-tuned biLM in the downstream task. See supplemental material for details."}, {"heading": "4 Evaluation", "text": "Table 1 shows the performance of ELMo across a diverse set of six benchmark NLP tasks. In every task considered, simply adding ELMo establishes a new state-of-the-art result, with relative error reductions ranging from 6 - 20% over strong base models. This is a very general result across a diverse set model architectures and language understanding tasks. In the remainder of this section we provide high-level sketches of the individual task results; see the supplemental material for full experimental details.\nQuestion answering The Stanford Question Answering Dataset (SQuAD) (Rajpurkar et al., 2016) contains 100K+ crowd sourced questionanswer pairs where the answer is a span in a given Wikipedia paragraph. Our baseline model (Clark and Gardner, 2017) is an improved version of the Bidirectional Attention Flow model in Seo et al. (BiDAF; 2017). It adds a self-attention layer after the bidirectional attention component, simplifies some of the pooling operations and substitutes the LSTMs for gated recurrent units (GRUs; Cho et al., 2014). After adding ELMo to the baseline model, test set F1 improved by 4.7% from 81.1% to 85.8%, a 24.9% relative error reduction over the baseline, and improving the overall single model state-of-the-art by 1.4%. A 11 member ensemble pushes F1 to 87.4, the overall state-of-the-art at time of submission to the leaderboard.2 The increase of 4.7% with ELMo is also significantly larger then the 1.8% improvement from adding CoVe to a baseline model (McCann et al., 2017).\n2As of November 17, 2017.\nTextual entailment Textual entailment is the task of determining whether a \u201chypothesis\u201d is true, given a \u201cpremise\u201d. The Stanford Natural Language Inference (SNLI) corpus (Bowman et al., 2015) provides approximately 550K hypothesis/premise pairs. Our baseline, the ESIM sequence model from Chen et al. (2017), uses a biLSTM to encode the premise and hypothesis, followed by a matrix attention layer, a local inference layer, another biLSTM inference composition layer, and finally a pooling operation before the output layer. Overall, adding ELMo to the ESIM model improves accuracy by an average of 0.7% across five random seeds. A five member ensemble pushes the overall accuracy to 89.3%, exceeding the previous ensemble best of 88.9% (Gong et al., 2018).\nSemantic role labeling A semantic role labeling (SRL) system models the predicate-argument structure of a sentence, and is often described as answering \u201cWho did what to whom\u201d. He et al. (2017) modeled SRL as a BIO tagging problem and used an 8-layer deep biLSTM with forward and backward directions interleaved, following Zhou and Xu (2015). As shown in Table 1, when adding ELMo to a re-implementation of He et al. (2017) the single model test set F1 jumped 3.2% from 81.4% to 84.6% \u2013 a new state-of-the-art on the OntoNotes benchmark (Pradhan et al., 2013), even improving over the previous best ensemble result by 1.2%.\nCoreference resolution Coreference resolution is the task of clustering mentions in text that refer to the same underlying real world entities. Our baseline model is the end-to-end span-based neural model of Lee et al. (2017). It uses a biLSTM\nand attention mechanism to first compute span representations and then applies a softmax mention ranking model to find coreference chains. In our experiments with the OntoNotes coreference annotations from the CoNLL 2012 shared task (Pradhan et al., 2012), adding ELMo improved the average F1 by 3.2% from 67.2 to 70.4, establishing a new state of the art, again improving over the previous best ensemble result by 1.6% F1.\nNamed entity extraction The CoNLL 2003 NER task (Sang and Meulder, 2003) consists of newswire from the Reuters RCV1 corpus tagged with four different entity types (PER, LOC, ORG, MISC). Following recent state-of-the-art systems (Lample et al., 2016; Peters et al., 2017), the baseline model uses pre-trained word embeddings, a character-based CNN representation, two biLSTM layers and a conditional random field (CRF) loss (Lafferty et al., 2001), similar to Collobert et al. (2011). As shown in Table 1, our ELMo enhanced biLSTM-CRF achieves 92.22% F1 averaged over five runs. The key difference between our system and the previous state of the art from Peters et al. (2017) is that we allowed the task model to learn a weighted average of all biLM layers, whereas Peters et al. (2017) only use the top biLM layer. As shown in Sec. 5.1, using all layers instead of just the last layer improves performance across multiple tasks.\nSentiment analysis The fine-grained sentiment classification task in the Stanford Sentiment Treebank (SST-5; Socher et al., 2013) involves selecting one of five labels (from very negative to very positive) to describe a sentence from a movie review. The sentences contain diverse linguistic phenomena such as idioms and complex syntac-\n\u03bb=1 \u03bb=0.001\ntic constructions such as negations that are difficult for models to learn. Our baseline model is the biattentive classification network (BCN) from McCann et al. (2017), which also held the prior state-of-the-art result when augmented with CoVe embeddings. Replacing CoVe with ELMo in the BCN model results in a 1.0% absolute accuracy improvement over the state of the art."}, {"heading": "5 Analysis", "text": "This section provides an ablation analysis to validate our chief claims and to elucidate some interesting aspects of ELMo representations. Sec. 5.1 shows that using deep contextual representations in downstream tasks improves performance over previous work that uses just the top layer, regardless of whether they are produced from a biLM or MT encoder, and that ELMo representations provide the best overall performance. Sec. 5.3 explores the different types of contextual information captured in biLMs and uses two intrinsic evaluations to show that syntactic information is better represented at lower layers while semantic information is captured a higher layers, consistent with MT encoders. It also shows that our biLM consistently provides richer representations then CoVe. Additionally, we analyze the sensitivity to where ELMo is included in the task model (Sec. 5.2), training set size (Sec. 5.4), and visualize the ELMo learned weights across the tasks (Sec. 5.5)."}, {"heading": "5.1 Alternate layer weighting schemes", "text": "There are many alternatives to Equation 1 for combining the biLM layers. Previous work on contextual representations used only the last layer, whether it be from a biLM (Peters et al., 2017) or an MT encoder (CoVe; McCann et al., 2017). The choice of the regularization parameter \u03bb is also important, as large values such as \u03bb = 1 effectively reduce the weighting function to a simple average over the layers, while smaller values (e.g., \u03bb = 0.001) allow the layer weights to vary.\nTable 2 compares these alternatives for SQuAD, SNLI and SRL. Including representations from all layers improves overall performance over just using the last layer, and including contextual representations from the last layer improves performance over the baseline. For example, in the case of SQuAD, using just the last biLM layer improves development F1 by 3.9% over the baseline. Averaging all biLM layers instead of using just the last layer improves F1 another 0.3% (comparing \u201cLast Only\u201d to \u03bb=1 columns), and allowing the task model to learn individual layer weights improves F1 another 0.2% (\u03bb=1 vs. \u03bb=0.001). A small \u03bb is preferred in most cases with ELMo, although for NER, a task with a smaller training set, the results are insensitive to \u03bb (not shown).\nThe overall trend is similar with CoVe but with smaller increases over the baseline. For SNLI, averaging all layers with \u03bb=1 improves development accuracy from 88.2 to 88.7% over using just the last layer. SRL F1 increased a marginal 0.1% to 82.2 for the \u03bb=1 case compared to using the last layer only."}, {"heading": "5.2 Where to include ELMo?", "text": "All of the task architectures in this paper include word embeddings only as input to the lowest layer biRNN. However, we find that including ELMo at the output of the biRNN in task-specific architectures improves overall results for some tasks. As shown in Table 3, including ELMo at both the input and output layers for SNLI and SQuAD improves over just the input layer, but for SRL (and coreference resolution, not shown) performance is highest when it is included at just the input layer. One possible explanation for this result is that both the SNLI and SQuAD architectures use attention layers after the biRNN, so introducing ELMo at this layer allows the model to attend directly to the biLM\u2019s internal representations. In the SRL case,\nthe task-specific context representations are likely more important than those from the biLM."}, {"heading": "5.3 What information is captured by the biLM\u2019s representations?", "text": "Since adding ELMo improves task performance over word vectors alone, the biLM\u2019s contextual representations must encode information generally useful for NLP tasks that is not captured in word vectors. Intuitively, the biLM must be disambiguating the meaning of words using their context. Consider \u201cplay\u201d, a highly polysemous word. The top of Table 4 lists nearest neighbors to \u201cplay\u201d using GloVe vectors. They are spread across several parts of speech (e.g., \u201cplayed\u201d, \u201cplaying\u201d as verbs, and \u201cplayer\u201d, \u201cgame\u201d as nouns) but concentrated in the sportsrelated senses of \u201cplay\u201d. In contrast, the bottom two rows show nearest neighbor sentences from the SemCor dataset (see below) using the biLM\u2019s context representation of \u201cplay\u201d in the source sentence. In these cases, the biLM is able to disambiguate both the part of speech and word sense in the source sentence.\nThese observations can be quantified using an"}, {"heading": "Model Acc.", "text": "intrinsic evaluation of the contextual representations similar to Belinkov et al. (2017). To isolate the information encoded by the biLM, the representations are used to directly make predictions for a fine grained word sense disambiguation (WSD) task and a POS tagging task. Using this approach, it is also possible to compare to CoVe, and across each of the individual layers.\nWord sense disambiguation Given a sentence, we can use the biLM representations to predict the sense of a target word using a simple 1- nearest neighbor approach, similar to Melamud et al. (2016). To do so, we first use the biLM to compute representations for all words in SemCor 3.0, our training corpus (Miller et al., 1994), and then take the average representation for each sense. At test time, we again use the biLM to compute representations for a given target word and take the nearest neighbor sense from the training set, falling back to the first sense from WordNet for lemmas not observed during training.\nTable 5 compares WSD results using the evaluation framework from Raganato et al. (2017b) across the same suite of four test sets in Raganato et al. (2017a). Overall, the biLM top layer rep-\nresentations have F1 of 69.0 and are better at WSD then the first layer. This is competitive with a state-of-the-art WSD-specific supervised model using hand crafted features (Iacobacci et al., 2016) and a task specific biLSTM that is also trained with auxiliary coarse-grained semantic labels and POS tags (Raganato et al., 2017a). The CoVe biLSTM layers follow a similar pattern to those from the biLM (higher overall performance at the second layer compared to the first); however, our biLM outperforms the CoVe biLSTM, which trails the WordNet first sense baseline.\nPOS tagging To examine whether the biLM captures basic syntax, we used the context representations as input to a linear classifier that predicts POS tags with the Wall Street Journal portion of the Penn Treebank (PTB) (Marcus et al., 1993). As the linear classifier adds only a small amount of model capacity, this is direct test of the biLM\u2019s representations. Similar to WSD, the biLM representations are competitive with carefully tuned, task specific biLSTMs (Ling et al., 2015; Ma and Hovy, 2016). However, unlike WSD, accuracies using the first biLM layer are higher than the top layer, consistent with results from deep biLSTMs in multi-task training (S\u00f8gaard and Goldberg, 2016; Hashimoto et al., 2017) and MT (Belinkov et al., 2017). CoVe POS tagging accuracies follow the same pattern as those from the biLM, and just like for WSD, the biLM achieves higher accuracies than the CoVe encoder.\nImplications for supervised tasks Taken together, these experiments confirm different layers in the biLM represent different types of information and explain why including all biLM layers is important for the highest performance in downstream tasks. In addition, the biLM\u2019s representations are more transferable to WSD and POS tagging than those in CoVe, helping to illustrate why ELMo outperforms CoVe in downstream tasks."}, {"heading": "5.4 Sample efficiency", "text": "Adding ELMo to a model increases the sample efficiency considerably, both in terms of number of parameter updates to reach state-of-the-art performance and the overall training set size. For example, the SRL model reaches a maximum development F1 after 486 epochs of training without ELMo. After adding ELMo, the model exceeds the baseline maximum at epoch 10, a 98% relative decrease in the number of updates needed to reach\nthe same level of performance.\nIn addition, ELMo-enhanced models use smaller training sets more efficiently than models without ELMo. Figure 1 compares the performance of baselines models with and without ELMo as the percentage of the full training set is varied from 0.1% to 100%. Improvements with ELMo are largest for smaller training sets and significantly reduce the amount of training data needed to reach a given level of performance. In the SRL case, the ELMo model with 1% of the training set has about the same F1 as the baseline model with 10% of the training set."}, {"heading": "5.5 Visualization of learned weights", "text": "Figure 2 visualizes the softmax-normalized learned layer weights. At the input layer, the task model favors the first biLSTM layer. For coreference and SQuAD, the this is strongly favored, but the distribution is less peaked for the other tasks. The output layer weights are relatively balanced, with a slight preference for the lower layers."}, {"heading": "6 Conclusion", "text": "We have introduced a general approach for learning high-quality deep context-dependent representations from biLMs, and shown large improvements when applying ELMo to a broad range of NLP tasks. Through ablations and other controlled experiments, we have also confirmed that the biLM layers efficiently encode different types of syntactic and semantic information about wordsin-context, and that using all layers improves overall task performance."}, {"heading": "A Supplemental Material to accompany", "text": "Deep contextualized word representations\nThis supplement contains details of the model architectures, training routines and hyper-parameter choices for the state-of-the-art models in Section 4.\nAll of the individual models share a common architecture in the lowest layers with a context independent token representation below several layers of stacked RNNs \u2013 LSTMs in every case except the SQuAD model that uses GRUs."}, {"heading": "A.1 Fine tuning biLM", "text": "As noted in Sec. 3.4, fine tuning the biLM on task specific data typically resulted in significant drops in perplexity. To fine tune on a given task, the supervised labels were temporarily ignored, the biLM fine tuned for one epoch on the training split and evaluated on the development split. Once fine tuned, the biLM weights were fixed during task training.\nTable 7 lists the development set perplexities for the considered tasks. In every case except CoNLL 2012, fine tuning results in a large improvement in perplexity, e.g., from 72.1 to 16.8 for SNLI.\nThe impact of fine tuning on supervised performance is task dependent. In the case of SNLI, fine tuning the biLM increased development accuracy 0.6% from 88.9% to 89.5% for our single best model. However, for sentiment classification development set accuracy is approximately the same regardless whether a fine tuned biLM was used.\nA.2 Importance of \u03b3 in Eqn. (1)\nThe \u03b3 parameter in Eqn. (1) was of practical importance to aid optimization, due to the different distributions between the biLM internal representations and the task specific representations. It is especially important in the last-only case in Sec. 5.1. Without this parameter, the last-only case performed poorly (well below the baseline) for SNLI and training failed completely for SRL."}, {"heading": "A.3 Textual Entailment", "text": "Our baseline SNLI model is the ESIM sequence model from Chen et al. (2017). Following the original implementation, we used 300 dimensions for all LSTM and feed forward layers and pretrained 300 dimensional GloVe embeddings that were fixed during training. For regularization, we\nadded 50% variational dropout (Gal and Ghahramani, 2016) to the input of each LSTM layer and 50% dropout (Srivastava et al., 2014) at the input to the final two fully connected layers. All feed forward layers use ReLU activations. Parameters were optimized using Adam (Kingma and Ba, 2015) with gradient norms clipped at 5.0 and initial learning rate 0.0004, decreasing by half each time accuracy on the development set did not increase in subsequent epochs. The batch size was 32.\nThe best ELMo configuration added ELMo vectors to both the input and output of the lowest layer LSTM, using (1) with layer normalization and \u03bb = 0.001. Due to the increased number of parameters in the ELMo model, we added `2 regularization with regularization coefficient 0.0001 to all recurrent and feed forward weight matrices and 50% dropout after the attention layer.\nTable 8 compares test set accuracy of our system to previously published systems. Overall, adding ELMo to the ESIM model improved accuracy by 0.7% establishing a new single model state-of-the-art of 88.7%, and a five member ensemble pushes the overall accuracy to 89.3%."}, {"heading": "A.4 Question Answering", "text": "Our QA model is a simplified version of the model from Clark and Gardner (2017). It embeds tokens by concatenating each token\u2019s case-sensitive 300 dimensional GloVe word vector (Pennington et al., 2014) with a character-derived embedding produced using a convolutional neural network followed by max-pooling on learned character embeddings. The token embeddings are passed through a shared bi-directional GRU, and then the bi-directional attention mechanism from BiDAF (Seo et al., 2017). The augmented con-\ntext vectors are then passed through a linear layer with ReLU activations, a residual self-attention layer that uses a GRU followed by the same attention mechanism applied context-to-context, and another linear layer with ReLU activations. Finally, the results are fed through linear layers to predict the start and end token of the answer.\nVariational dropout is used before the input to the GRUs and the linear layers at a rate of 0.2. A dimensionality of 90 is used for the GRUs, and 180 for the linear layers. We optimize the model using Adadelta with a batch size of 45. At test time we use an exponential moving average of the weights and limit the output span to be of at most size 17. We do not update the word vectors during training.\nPerformance was highest when adding ELMo without layer normalization to both the input and output of the contextual GRU layer and leaving the ELMo weights unregularized (\u03bb = 0).\nTable 9 compares test set results from the SQuAD leaderboard as of November 17, 2017 when we submitted our system. Overall, our submission had the highest single model and ensemble results, improving the previous single model result (SAN) by 1.4% F1 and our baseline by 4.2%. A 11 member ensemble pushes F1 to 87.4%, 1.0% increase over the previous ensemble best."}, {"heading": "A.5 Semantic Role Labeling", "text": "Our baseline SRL model is an exact reimplementation of (He et al., 2017). Words are represented using a concatenation of 100 dimensional vector representations, initialized using GloVe (Pennington et al., 2014) and a binary, per-word predicate feature, represented using an 100 dimensional em-\n3A comprehensive comparison can be found at https: //nlp.stanford.edu/projects/snli/\nbedding. This 200 dimensional token representation is then passed through an 8 layer \u201cinterleaved\u201d biLSTM with a 300 dimensional hidden size, in which the directions of the LSTM layers alternate per layer. This deep LSTM uses Highway connections (Srivastava et al., 2015) between layers and variational recurrent dropout (Gal and Ghahramani, 2016). This deep representation is then projected using a final dense layer followed by a softmax activation to form a distribution over all possible tags. Labels consist of semantic roles from PropBank (Palmer et al., 2005) augmented with a BIO labeling scheme to represent argument spans. During training, we minimize the negative log likelihood of the tag sequence using Adadelta with a learning rate of 1.0 and \u03c1 = 0.95 (Zeiler, 2012). At test time, we perform Viterbi decoding to enforce valid spans using BIO constraints. Variational dropout of 10% is added to all LSTM hidden layers. Gradients are clipped if their value exceeds 1.0. Models are trained for 500 epochs or until validation F1 does not improve for 200 epochs, whichever is sooner. The pretrained GloVe vectors are fine-tuned during training. The final dense layer and all cells of all LSTMs are initialized to be orthogonal. The forget gate bias is initialized to 1 for all LSTMs, with all other gates initialized to 0, as per (Jo\u0301zefowicz et al., 2015).\nTable 10 compares test set F1 scores of our ELMo augmented implementation of (He et al., 2017) with previous results. Our single model score of 84.6 F1 represents a new state-of-the-art result on the CONLL 2012 Semantic Role Labeling task, surpassing the previous single model result by 2.9 F1 and a 5-model ensemble by 1.2 F1."}, {"heading": "A.6 Coreference resolution", "text": "Our baseline coreference model is the end-to-end neural model from Lee et al. (2017) with all hy-"}, {"heading": "Model Average F1", "text": "perparameters exactly following the original implementation.\nThe best configuration added ELMo to the input of the lowest layer biLSTM and weighted the biLM layers using (1) without any regularization (\u03bb = 0) or layer normalization. 50% dropout was added to the ELMo representations.\nTable 11 compares our results with previously published results. Overall, we improve the single model state-of-the-art by 3.2% average F1, and our single model result improves the previous ensemble best by 1.6% F1. Adding ELMo to the output from the biLSTM in addition to the biLSTM input reduced F1 by approximately 0.7% (not shown)."}, {"heading": "A.7 Named Entity Recognition", "text": "Our baseline NER model concatenates 50 dimensional pre-trained Senna vectors (Collobert et al., 2011) with a CNN character based representation. The character representation uses 16 dimensional character embeddings and 128 convolutional filters of width three characters, a ReLU activation and by max pooling. The token representation is passed through two biLSTM layers, the first with 200 hidden units and the second with 100 hidden units before a final dense layer and softmax layer. During training, we use a CRF loss and at test time perform decoding using the Viterbi algorithm while ensuring that the output tag sequence is valid.\nVariational dropout is added to the input of both biLSTM layers. During training the gradients are rescaled if their `2 norm exceeds 5.0 and parameters updated using Adam with constant learning rate of 0.001. The pre-trained Senna embeddings are fine tuned during training. We employ early stopping on the development set and report the averaged test set score across five runs with different random seeds.\nELMo was added to the input of the lowest layer task biLSTM. As the CoNLL 2003 NER data set is relatively small, we found the best performance by constraining the trainable layer weights to be effectively constant by setting \u03bb = 0.1 with (1).\nTable 12 compares test set F1 scores of our ELMo enhanced biLSTM-CRF tagger with previous results. Overall, the 92.22% F1 from our system establishes a new state-of-the-art. When compared to Peters et al. (2017), using representations\nfrom all layers of the biLM provides a modest improvement."}, {"heading": "A.8 Sentiment classification", "text": "We use almost the same biattention classification network architecture described in McCann et al. (2017), with the exception of replacing the final maxout network with a simpler feedforward network composed of two ReLu layers with dropout. A BCN model with a batch-normalized maxout network reached significantly lower validation accuracies in our experiments, although there may be discrepancies between our implementation and that of McCann et al. (2017). To match the CoVe training setup, we only train on phrases that contain four or more tokens. We use 300-d hidden states for the biLSTM and optimize the model parameters with Adam (Kingma and Ba, 2015) using a learning rate of 0.0001. The trainable biLM layer weights are regularized by \u03bb = 0.001, and we add ELMo to both the input and output of the biLSTM; the output ELMo vectors are computed with a second biLSTM and concatenated to the input."}], "year": 2018, "references": [{"title": "Layer normalization", "authors": ["Jimmy Ba", "Ryan Kiros", "Geoffrey E. Hinton."], "venue": "CoRR abs/1607.06450.", "year": 2016}, {"title": "What do neural machine translation models learn about morphology", "authors": ["Yonatan Belinkov", "Nadir Durrani", "Fahim Dalvi", "Hassan Sajjad", "James R. Glass"], "year": 2017}, {"title": "Enriching word vectors with subword information", "authors": ["Piotr Bojanowski", "Edouard Grave", "Armand Joulin", "Tomas Mikolov."], "venue": "TACL 5:135\u2013146.", "year": 2017}, {"title": "A large annotated corpus for learning natural language inference", "authors": ["Samuel R. Bowman", "Gabor Angeli", "Christopher Potts", "Christopher D. Manning."], "venue": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing", "year": 2015}, {"title": "One billion word benchmark for measuring progress in statistical language modeling", "authors": ["Ciprian Chelba", "Tomas Mikolov", "Mike Schuster", "Qi Ge", "Thorsten Brants", "Phillipp Koehn", "Tony Robinson."], "venue": "INTERSPEECH.", "year": 2014}, {"title": "Enhanced lstm for natural language inference", "authors": ["Qian Chen", "Xiao-Dan Zhu", "Zhen-Hua Ling", "Si Wei", "Hui Jiang", "Diana Inkpen."], "venue": "ACL.", "year": 2017}, {"title": "Named entity recognition with bidirectional LSTM-CNNs", "authors": ["Jason Chiu", "Eric Nichols."], "venue": "TACL.", "year": 2016}, {"title": "On the properties of neural machine translation: Encoder-decoder approaches", "authors": ["Kyunghyun Cho", "Bart van Merrienboer", "Dzmitry Bahdanau", "Yoshua Bengio."], "venue": "SSST@EMNLP.", "year": 2014}, {"title": "Simple and effective multi-paragraph reading comprehension", "authors": ["Christopher Clark", "Matthew Gardner."], "venue": "CoRR abs/1710.10723.", "year": 2017}, {"title": "Deep reinforcement learning for mention-ranking coreference models", "authors": ["Kevin Clark", "Christopher D. Manning."], "venue": "EMNLP.", "year": 2016}, {"title": "Natural language processing (almost) from scratch", "authors": ["Ronan Collobert", "Jason Weston", "L\u00e9on Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel P. Kuksa."], "venue": "JMLR.", "year": 2011}, {"title": "Semisupervised sequence learning", "authors": ["Andrew M. Dai", "Quoc V. Le."], "venue": "NIPS.", "year": 2015}, {"title": "Easy victories and uphill battles in coreference resolution", "authors": ["Greg Durrett", "Dan Klein."], "venue": "EMNLP.", "year": 2013}, {"title": "A theoretically grounded application of dropout in recurrent neural networks", "authors": ["Yarin Gal", "Zoubin Ghahramani."], "venue": "NIPS.", "year": 2016}, {"title": "Natural language inference over interaction space", "authors": ["Yichen Gong", "Heng Luo", "Jian Zhang."], "venue": "ICLR.", "year": 2018}, {"title": "A joint many-task model: Growing a neural network for multiple nlp tasks", "authors": ["Kazuma Hashimoto", "Caiming Xiong", "Yoshimasa Tsuruoka", "Richard Socher."], "venue": "EMNLP 2017.", "year": 2017}, {"title": "Deep semantic role labeling: What works and what\u2019s next", "authors": ["Luheng He", "Kenton Lee", "Mike Lewis", "Luke S. Zettlemoyer."], "venue": "ACL.", "year": 2017}, {"title": "Long short-term memory", "authors": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural Computation 9.", "year": 1997}, {"title": "Embeddings for word sense disambiguation: An evaluation study", "authors": ["Ignacio Iacobacci", "Mohammad Taher Pilehvar", "Roberto Navigli."], "venue": "ACL.", "year": 2016}, {"title": "Exploring the limits of language modeling", "authors": ["Rafal J\u00f3zefowicz", "Oriol Vinyals", "Mike Schuster", "Noam Shazeer", "Yonghui Wu."], "venue": "CoRR abs/1602.02410.", "year": 2016}, {"title": "An empirical exploration of recurrent network architectures", "authors": ["Rafal J\u00f3zefowicz", "Wojciech Zaremba", "Ilya Sutskever."], "venue": "ICML.", "year": 2015}, {"title": "Character-aware neural language models", "authors": ["Yoon Kim", "Yacine Jernite", "David Sontag", "Alexander M Rush."], "venue": "AAAI 2016.", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "authors": ["Diederik P. Kingma", "Jimmy Ba."], "venue": "ICLR.", "year": 2015}, {"title": "Ask me anything: Dynamic memory networks for natural language processing", "authors": ["Ankit Kumar", "Ozan Irsoy", "Peter Ondruska", "Mohit Iyyer", "Ishaan Gulrajani James Bradbury", "Victor Zhong", "Romain Paulus", "Richard Socher."], "venue": "ICML.", "year": 2016}, {"title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data", "authors": ["John D. Lafferty", "Andrew McCallum", "Fernando Pereira."], "venue": "ICML.", "year": 2001}, {"title": "Neural architectures for named entity recognition", "authors": ["Guillaume Lample", "Miguel Ballesteros", "Sandeep Subramanian", "Kazuya Kawakami", "Chris Dyer."], "venue": "NAACL-HLT .", "year": 2016}, {"title": "End-to-end neural coreference resolution", "authors": ["Kenton Lee", "Luheng He", "Mike Lewis", "Luke S. Zettlemoyer."], "venue": "EMNLP.", "year": 2017}, {"title": "Stochastic answer networks for machine reading comprehension", "authors": ["Xiaodong Liu", "Yelong Shen", "Kevin Duh", "Jianfeng Gao."], "venue": "arXiv preprint arXiv:1712.03556 .", "year": 2017}, {"title": "End-to-end sequence labeling via bi-directional LSTM-CNNsCRF", "authors": ["Xuezhe Ma", "Eduard H. Hovy."], "venue": "ACL.", "year": 2016}, {"title": "Building a large annotated corpus of english: The penn treebank", "authors": ["Mitchell P. Marcus", "Beatrice Santorini", "Mary Ann Marcinkiewicz."], "venue": "Computational Linguistics 19:313\u2013330.", "year": 1993}, {"title": "Learned in translation: Contextualized word vectors", "authors": ["Bryan McCann", "James Bradbury", "Caiming Xiong", "Richard Socher."], "venue": "NIPS 2017.", "year": 2017}, {"title": "context2vec: Learning generic context embedding with bidirectional lstm", "authors": ["Oren Melamud", "Jacob Goldberger", "Ido Dagan."], "venue": "CoNLL.", "year": 2016}, {"title": "On the state of the art of evaluation in neural language models", "authors": ["G\u00e1bor Melis", "Chris Dyer", "Phil Blunsom."], "venue": "CoRR abs/1707.05589.", "year": 2017}, {"title": "Regularizing and optimizing lstm language models", "authors": ["Stephen Merity", "Nitish Shirish Keskar", "Richard Socher."], "venue": "CoRR abs/1708.02182.", "year": 2017}, {"title": "Distributed representations of words and phrases and their compositionality", "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."], "venue": "NIPS.", "year": 2013}, {"title": "Using a semantic concordance for sense identification", "authors": ["George A. Miller", "Martin Chodorow", "Shari Landes", "Claudia Leacock", "Robert G. Thomas."], "venue": "HLT .", "year": 1994}, {"title": "Neural tree indexers for text understanding", "authors": ["Tsendsuren Munkhdalai", "Hong Yu."], "venue": "EACL.", "year": 2017}, {"title": "Efficient nonparametric estimation of multiple embeddings per word in vector space", "authors": ["Arvind Neelakantan", "Jeevan Shankar", "Alexandre Passos", "Andrew McCallum."], "venue": "EMNLP.", "year": 2014}, {"title": "The proposition bank: An annotated corpus of semantic roles", "authors": ["Martha Palmer", "Paul Kingsbury", "Daniel Gildea."], "venue": "Computational Linguistics 31:71\u2013 106.", "year": 2005}, {"title": "Glove: Global vectors for word representation", "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher D. Manning."], "venue": "EMNLP.", "year": 2014}, {"title": "Semi-supervised sequence tagging with bidirectional language models", "authors": ["Matthew E. Peters", "Waleed Ammar", "Chandra Bhagavatula", "Russell Power."], "venue": "ACL.", "year": 2017}, {"title": "Towards robust linguistic analysis using ontonotes", "authors": ["Sameer Pradhan", "Alessandro Moschitti", "Nianwen Xue", "Hwee Tou Ng", "Anders Bj\u00f6rkelund", "Olga Uryupina", "Yuchen Zhang", "Zhi Zhong."], "venue": "CoNLL.", "year": 2013}, {"title": "Conll2012 shared task: Modeling multilingual unrestricted coreference in ontonotes", "authors": ["Sameer Pradhan", "Alessandro Moschitti", "Nianwen Xue", "Olga Uryupina", "Yuchen Zhang."], "venue": "EMNLPCoNLL Shared Task.", "year": 2012}, {"title": "Neural sequence learning models for word sense disambiguation", "authors": ["Alessandro Raganato", "Claudio Delli Bovi", "Roberto Navigli."], "venue": "EMNLP.", "year": 2017}, {"title": "Word sense disambiguation: A unified evaluation framework and empirical comparison", "authors": ["Alessandro Raganato", "Jose Camacho-Collados", "Roberto Navigli."], "venue": "EACL.", "year": 2017}, {"title": "Squad: 100, 000+ questions for machine comprehension of text", "authors": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang."], "venue": "EMNLP.", "year": 2016}, {"title": "Improving sequence to sequence learning with unlabeled data", "authors": ["Prajit Ramachandran", "Peter Liu", "Quoc Le."], "venue": "EMNLP.", "year": 2017}, {"title": "Introduction to the CoNLL-2003 shared task: Language-independent named entity recognition", "authors": ["Erik F. Tjong Kim Sang", "Fien De Meulder."], "venue": "CoNLL.", "year": 2003}, {"title": "Bidirectional attention flow for machine comprehension", "authors": ["Min Joon Seo", "Aniruddha Kembhavi", "Ali Farhadi", "Hannaneh Hajishirzi."], "venue": "ICLR.", "year": 2017}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "authors": ["Richard Socher", "Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts."], "venue": "EMNLP.", "year": 2013}, {"title": "Deep multi-task learning with low level tasks supervised at lower layers", "authors": ["Anders S\u00f8gaard", "Yoav Goldberg."], "venue": "ACL 2016.", "year": 2016}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "authors": ["Nitish Srivastava", "Geoffrey E. Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov."], "venue": "Journal of Machine Learning Research 15:1929\u20131958.", "year": 2014}, {"title": "Training very deep networks", "authors": ["Rupesh Kumar Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber."], "venue": "NIPS.", "year": 2015}, {"title": "Word representations: A simple and general method for semi-supervised learning", "authors": ["Joseph P. Turian", "Lev-Arie Ratinov", "Yoshua Bengio."], "venue": "ACL.", "year": 2010}, {"title": "Gated self-matching networks for reading comprehension and question answering", "authors": ["Wenhui Wang", "Nan Yang", "Furu Wei", "Baobao Chang", "Ming Zhou."], "venue": "ACL.", "year": 2017}, {"title": "Charagram: Embedding words and sentences via character n-grams", "authors": ["John Wieting", "Mohit Bansal", "Kevin Gimpel", "Karen Livescu."], "venue": "EMNLP.", "year": 2016}, {"title": "Learning global features for coreference resolution", "authors": ["Sam Wiseman", "Alexander M. Rush", "Stuart M. Shieber."], "venue": "HLT-NAACL.", "year": 2016}, {"title": "Adadelta: An adaptive learning rate method", "authors": ["Matthew D. Zeiler."], "venue": "CoRR abs/1212.5701.", "year": 2012}, {"title": "End-to-end learning of semantic role labeling using recurrent neural networks", "authors": ["Jie Zhou", "Wei Xu."], "venue": "ACL.", "year": 2015}, {"title": "Text classification improved by integrating bidirectional lstm with twodimensional max pooling", "authors": ["Peng Zhou", "Zhenyu Qi", "Suncong Zheng", "Jiaming Xu", "Hongyun Bao", "Bo Xu."], "venue": "COLING.", "year": 2016}, {"title": "Coreference resolution average F1 on the test set from the CoNLL 2012 shared task. perparameters exactly following the original implementation", "authors": ["Lee"], "venue": "ELMo", "year": 2012}, {"title": "2017), with the exception of replacing the final maxout network with a simpler feedforward network composed of two ReLu layers with dropout. A BCN model with a batch-normalized maxout", "authors": ["McCann"], "year": 2017}], "id": "SP:be5e250201dd9ec667c02d2e8e229321779e7384", "authors": [{"name": "Matthew E. Peters", "affiliations": []}, {"name": "Mark Neumann", "affiliations": []}, {"name": "Mohit Iyyer", "affiliations": []}, {"name": "Matt Gardner", "affiliations": []}, {"name": "Christopher Clark", "affiliations": []}, {"name": "Kenton Lee", "affiliations": []}, {"name": "Luke Zettlemoyer", "affiliations": []}], "abstractText": "We introduce a new type of deep contextualized word representation that models both (1) complex characteristics of word use (e.g., syntax and semantics), and (2) how these uses vary across linguistic contexts (i.e., to model polysemy). Our word vectors are learned functions of the internal states of a deep bidirectional language model (biLM), which is pretrained on a large text corpus. We show that these representations can be easily added to existing models and significantly improve the state of the art across six challenging NLP problems, including question answering, textual entailment and sentiment analysis. We also present an analysis showing that exposing the deep internals of the pre-trained network is crucial, allowing downstream models to mix different types of semi-supervision signals.", "title": "Deep contextualized word representations"}