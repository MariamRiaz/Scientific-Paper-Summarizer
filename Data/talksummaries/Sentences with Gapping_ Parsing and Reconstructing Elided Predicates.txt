7	59	While gapping constructions receive a lot of attention in the theoretical syntax literature (e.g., Ross 1970; Jackendoff 1971; Steedman 1990; Coppock 2001; Osborne 2006; Johnson 2014; Toosarvandani 2016; Kubota and Levine 2016), they have been almost entirely neglected by the NLP community so far.
8	57	The Penn Treebank explicitly annotates gapping constructions, by coindexing arguments in the clause with a predicate and the clause with the gap, but these co-indices are not included in the standard parsing metrics 1156 and almost all parsers ignore them.1 Despite the sophisticated analysis of gapping within CCG (Steedman, 1990), sentences with gapping were deemed too difficult to represent within the CCGBank (Hockenmaier and Steedman, 2007).
9	16	Similarly the treebanks for the Semantic Dependencies Shared Task (Oepen et al., 2015) exclude all sentences from the Wall Street Journal that contain gapping.
18	13	Gapping constructions in English come in many forms that can be broadly classified as follows.
23	40	(4) Non-contiguous predicate-argument gap: Arizona elected Goldwater Senator, and Pennsylvania Schwelker .
24	64	(Jackendoff, 1971) (5) Verb cluster gap: I want to try to begin to write a novel and ... Mary a play.
25	37	... Mary to begin to write a play.
27	44	(Ross, 1970) The defining characteristic of gapping constructions is that there is a clause that lacks a predicate (the gap) but still contains two or more arguments or modifiers of the elided predicate (the remnants or orphans).
28	21	In most cases, the remnants have a corresponding argument or modifier (the correspondent) in the clause with the overt predicate.
29	18	These types of gapping also make up the majority of attested constructions in other languages.
32	45	UD defines two types of representation: the basic UD representation which is a strict surface syntax dependency tree and the enhanced UD representation (Schuster and Manning, 2016) which may be a graph instead of a tree and may contain additional nodes.
33	57	The analysis of gapping in the enhanced representation makes use of copy nodes for elided predicates and additional edges for elided arguments, which we both try to automatically reconstruct in this paper.
34	29	In the simple case in which only one predicate was elided, there is exactly one copy node for the elided predicate, which leads to a structure that is identical to the structure of the same sentence without a gap.3 John bought books and Mary boughtâ€² flowers nsubj obj cc nsubj conj obj If a clause contains a more complex gap, the enhanced representation contains copies for all content words that are required to attach the remnants.
40	30	Our first method adapts one of the procedures by Seeker et al. (2012), which represents gaps in dependency trees by attaching dependents of an elided predicate with composite relations.
42	37	For example, in the following sentence, the verb bought, which would have been attached to the head of the first conjunct with a conj relation, was elided from the second conjunct and hence all nodes that would have depended on the elided verb, are attached to the first conjunct using a composite relation consisting of conj and the type of argument.
43	29	John bought books and Mary flowers nsubj obj conj>cc conj>nsubj conj>obj The major advantage of this approach is that the dependency tree contains information about the types of arguments and so it should be straightforward to turn dependency trees of this form into enhanced UD graphs.
44	11	For most dependency trees, one can obtain the enhanced UD graph by splitting the composite relations into its atomic parts and inserting copy nodes at the splitting points.4 At the same time, this approach comes with the drawback of drastically increasing the label space.
64	23	This can be done straightforwardly with the sequence alignment algorithm by Needleman and Wunsch (1970) if one defines a similarity function sim(g, f) that returns a similarity score between the arguments g and f .
66	12	The first intuition can be captured by penalizing mismatching POS tags, and the other two by computing the distance between argument embeddings.
81	16	The composite relations can be automatically obtained from the enhanced representation by removing the copy nodes and concatenating the dependency labels, which we did to build the training and test corpus for the composite relation procedure.
83	19	Parser We used the parser by Dozat and Manning (2017) for parsing to the two different intermediate dependency representations.
93	37	There was no significant difference between the parser that was trained on the UD representation (ORPHAN) and the parser trained on the composite representation (COMPOSITE) when tested on the EWT data sets, which is not surprising considering that there is just one sentence with gapping each in the development and the test split.
94	52	When evaluated on the GAPPING datasets, the ORPHAN parser performs significantly better (p < 0.01) in terms of labeled attachment score, which suggests that the parser trained on the COMPOSITE representation is indeed struggling with the greatly increased label space.
101	26	Evaluation Here, we evaluated dependency graphs and therefore used the labeled and unlabeled precision and recall metrics.
116	15	In general, precision tends to be a bit higher for the ORPHAN procedure whereas recall tends to be a bit higher for the COMPOSITE method but overall and in terms of sentence-level accuracy both methods seem to perform equally well.
129	42	Overall these results suggest that our dependency-based approach is much more reliable at identifying gapping constructions than the parser by K&K, which, in their defense, was optimized to output traces for other phenomena.
142	151	As Swedish is a Germanic language like English and thus shares many structural properties, we cannot conclude that our method is applicable to any language based on just this experiment.
159	15	We presented two methods to recover elided predicates in sentences with gapping.
163	56	Apart from being useful in a parsing pipeline, we therefore also expect our method to be useful for building enhanced UD treebanks.
164	51	Reproducibility All data, pre-trained models, system outputs as well as a package for running the enhancement procedure are available from https:// github.com/sebschu/naacl-gapping.
