{"sections": [{"heading": "1. Introduction", "text": "Multi-armed bandit (MAB) (Berry & Fristedt, 1985; Sutton & Barto, 1998) is a classical online learning model typically described as a game between a learning agent (player) and the environment withm arms. In each step, the environment generates an outcome, and the player uses a policy (or an algorithm), which takes the feedback from the previous steps as input, to select an arm to pull. After pulling an arm, the player receives a reward based on the pulled arm and the environment outcome. In this paper, we consider stochastic MAB problem, which means the environment outcome is drawn from an unknown distribution (Lai & Robbins, 1985), not generated by an adversary (Auer et al., 2002b). The goal of the player is to cumulate as much reward as possible over a total of T steps (T may be unknown). The performance metric is the (expected) regret, which is the cumulative\n1Tsinghua University, Beijing, China 2Microsoft Research, Beijing, China. Correspondence to: Siwei Wang <wangsw15@mails.tsinghua.edu.cn>, Wei Chen <weic@microsoft.com>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\ndifference over T steps between always playing the arm with the optimal expected reward and playing the arms according to the policy.\nMAB models the key tradeoff between exploration \u2014 continuing exploring new arms not observed often, and exploitation \u2014 sticking to the best performed arm based on the observation so far. A famous MAB algorithm is the upper confidence bound (UCB) policy (Gittins, 1989; Auer et al., 2002a), which achieves O(m log T/\u2206) distributiondependent regret, where \u2206 is the minimum gap in the expected reward between an optimal arm and any non-optimal arm, and it matches the lower bound (Lai & Robbins, 1985).\nCombinatorial multi-armed bandit (CMAB) problem has recently become an active research area (Gai et al., 2012; Chen et al., 2016b; Gopalan et al., 2014a; Kveton et al., 2014; 2015a;b; Wen et al., 2015; Combes et al., 2015; Chen et al., 2016a; Wang & Chen, 2017). In CMAB, the environment contains m base arms, but the player needs to pull a set of base arms S in each time slot, where S is called a super arm (or an action). The kind of reward and feedback varies in different settings. In this paper, we consider the semi-bandit setting, where the feedback includes the outcomes of all base arms in the played super arm, and the reward is a function of S and the observed outcomes of arms in S. CMAB has found applications in many areas such as wireless networking, social networks, online advertising, etc. Thus it is important to investigate different approaches to solve CMAB problems.\nAn alternative approach different from UCB is the Thompson sampling (TS) approach, which is introduced much earlier by Thompson (1933), but the theoretical analysis of the TS policy comes much later \u2014 Kaufmann et al. (2012) and Agrawal & Goyal (2012) give the first regret bound for the TS policy, which essentially matches the UCB policy theoretically. Moreover, TS policy often performs better than UCB in empirical simulation results, making TS an attractive policy for further studies.\nTS policy follows the Bayesian inference framework to solve the MAB problems. The unknown distribution of environment outcomes is parameterized, with an assumed prior distribution. TS updates the prior distribution in each step with two phases: first it uses the prior distribution to sample a parameter, which is used to determine the action to\nplay in the current step; second it uses the feedback obtained in the current step to update the prior distribution to posterior distribution according to the Bayes\u2019 rule. To avoid confusion on these two kinds of random variables, in the rest of this paper, we use the word \u201csample\u201d to denote the variable in the first phase, i.e. the random variable coming from the prior distribution. The word \u201cobservation\u201d represents the feedback random variable, which follows the unknown environment distribution.\nIn this paper, we study the application of the Thompson sampling approach to CMAB. The reason that we are interested in this approach is that it has good performance in experiments. We found out that TS-based policy performs better than many kinds of UCB-based policy in experiments. We also adjust the parameters of UCB-based policy to make it behave better, but those parameters do not have theoretical guarantees. Thompson sampling policy behaves almost the same as UCB-based policies with no-guarantee parameters, and much better than those with parameters that have theoretical regret bounds. We can see those results in our experiments from Section 5. Another interesting thing is that TS-based policy only require the reward function to be continuous, while UCB-based policy need it to be monotone as well. These make TS-based policy more competitive in real applications.\nWe consider a general CMAB case similar with (Chen et al., 2016b), i.e. we assume that (a) the problem instance satisfies a Lipschitz continuity assumption to handle non-linear reward functions, and (b) the player has access to an exact oracle for the offline optimization problem. We use the standard TS policy together with the offline oracle, and refer it as the combinatorial Thompson sampling (CTS) algorithm.\nCTS policy would first derive a set of parameters \u03b8 = (\u03b81, \u00b7 \u00b7 \u00b7 , \u03b8m) as sample set for the base arms, and then select the optimal super arm under \u03b8. The original analysis for TS on MAB model then faces a challenge in addressing the dependency issue: it essentially requires that different super arms be related with independent samples so that when comparing them and selecting the optimal super arm, the actual optimal one is selected with high probability. But when super arms are based on the same sample set \u03b8, dependency and correlation among super arms may likely fail the above high probability analysis.\nOne way to get around this is to independently derive a sample set \u03b8(S) for every super arm S and compute its expected reward under \u03b8(S), and then select the optimal super arm. Obviously this solution incurs exponential sampling cost and is what we want to avoid when solving CMAB.\nTo address the dependency challenge, we adapt an analysis of (Komiyama et al., 2015) for selecting the top-k arms to the general CMAB setting. The adaptation is nontrivial\nsince we are dealing with arbitrary combinatorial constraints while they only deal with super arms containing k arms.\nWe show that CTS achieves O( \u2211 i\u2208[m] log T/\u2206i,min) + O((2/\u03b5)2k \u2217 ) distribution-dependent regret bound for some small \u03b5, where \u2206i,min is the minimum gap between the optimal expected reward and any non-optimal expected reward containing arm i, and k\u2217 is the size of the optimal solution. This is the first distribution-dependent regret bound for general CMAB using TS-based policy, and the result matches the theoretical performance of the UCB-based solution CUCB in (Chen et al., 2016b). When considering CMAB with linear reward functions, the other complexity factors in the leading log T term also matches the regret lower bound for linear CMAB in (Kveton et al., 2015a). For the exponential constant term, we show an example that it is unavoidable for Thompson sampling.\nComparing to the UCB-based solution in (Chen et al., 2016b), the advantages of CTS is that: a) we do not need to assume that the expected reward is monotone to the mean outcomes of the base arms; b) it has better behaviour in experiments. CTS also suffers from some disadvantages. For example, CTS policy can not adapt an approximation oracle as in (Chen et al., 2016b) (the regret becomes to approximate regret as well). However, we claim that it is because of the difference between TS-based algorithm and UCB-based algorithm. To show this, we provide a counter example for origin MAB problem, which cause an approximate regret of \u0398(T ) when using TS policy.\nAnother disadvantage is that we need to assume that all the outcomes of all base arms are mutually independent. This is because TS policy maintains a prior distribution for every base arm\u2019s mean value \u00b5i. Only when the distributions are independent, we can use a simple method to update those prior distributions; otherwise the update method will be much more complicated for both the implmentation and the analysis. This assumption is still reasonable, since many real applications satisfy this assumption.\nHowever, when applying on some further combinatorial structures, we do not need such an assumption, such as in matroid bandit. Matroid bandit is a special class of CMAB (Kveton et al., 2014), in which the base arms are the elements in the ground set and the super arms are the independent sets of a matroid. The reward function is the sum of all outcomes of the base arms in the super arm. We show that the regret of CTS is upper bounded by O( \u2211 i 6\u2208S\u2217 log T/\u2206i) +O(m/\u03b5\n4) for some small \u03b5, where S\u2217 is an optimal solution and \u2206i is the minimum positive gap between the mean outcome of any arms in S\u2217 and the mean outcome of arm i. This result does not need to assume that all arm distributions are independent, and do not have a constant term exponential with k\u2217. It matches both the theoretical performance of the UCB-based algorithm\nand the lower bound given in Kveton et al. (2014), and the constant term is similar with results in Agrawal & Goyal (2012), which appears in almost every TS analysis paper.\nWe further conduct empirical simulations, and show that CTS performs much better than the CUCB algorithm of (Chen et al., 2016b) and C-KL-UCB algorithm based on KL-UCB of (Garivier & Capp\u00e9, 2011) on both matroid and non-matroid CMAB problem instances.\nIn summary, our contributions include that: (a) we provide a novel analysis for the general CMAB problem, and provides the first distribution-dependent regret bound for general CMAB problems and matroid bandit problems based on Thompson sampling; (b) we show that approximation oracle can not be used in TS-based algorithms; and (c) we show that the exponential constant in our regret bound for general CMAB problems is unavoidable.\nDue to space constraint, complete proofs are moved to the supplementary material."}, {"heading": "1.1. Related Work", "text": "A number of related works on the general context of multiarmed bandit and Thompson sampling have been given, and we focus here on the most relevant studies related to CMAB.\nOur study follows the general CMAB framework of (Chen et al., 2016b), which provides a UCB-style algorithm CUCB and show a O( \u2211 i\u2208[m] log T/\u2206i,min) regret bound. Comparing with our CTS, both use an offline oracle, assume a Lipschitz continuity condition, and the bound essentially match asymptotically on time horizon T . Their differences include: (a) CTS does not need the monotonicity property but CUCB requires that to use the offline oracle; (b) CUCB allows an approximation oracle (and uses approximate regret), but CTS requires an exact oracle; (c) the regret bound of CTS has some additional terms not related to T , which is common in TS-based regret bounds (See Section 3 for more details). Combes et al. (2015) propose ESCB algorithm to solve CMAB with linear reward functions and independent arms, and their regret is a factor O( \u221a m) better than our corresponding regret bound for CTS. However, their ESCB algorithm requires an exponential-time for computation, which is what we want to avoid when designing CMAB algorithms.\nMatroid bandit is defined and studied by Kveton et al. (2014), who provide a UCB-based algorithm with regret bound almost exactly matches CTS algorithm. They also prove a matching lower bound using a partition matroid bandit.\nThompson sampling has also been applied to settings with combinatorial actions. Gopalan et al. (2014b) study a general action space with a general feedback model, and provide\nanalytical regret bounds for the exact TS policy. However, their general model cannot be applied to our case. In particular, they assume that the arm outcome distribution is from a known parametric family and the prior distribution on the parameter space is finitely supported. We instead work on arbitrary nonparametric and unknown distributions with bounded support, and even if we work on a parametric family, we allow the support of prior distributions to be infinite or continuous. The reason is that in our CMAB setting, we only need to learn the means of base arms (same as in (Chen et al., 2016b)). Moreover, their regret bounds are high probability bounds, not expected regret bounds, and their bounds contain a potentially very large constant, which will turn into a non-constant term when we convert them to expected regret bounds.\nIn (Komiyama et al., 2015), the authors consider the TSbased policy for the top-k CMAB problem, a special case of matroid bandits where the super arms are subsets of size at most k. Thus we generalize top-k bandits to matroid bandits, and our regret bound for matroid bandit still matches the one in (Komiyama et al., 2015).\nWen et al. (2015) analyze the regret of using TS policy for contextual CMAB problems. The key difference between their work and ours is that they use the Bayesian regret metric. Bayesian regret takes another expectation on the prior distribution of parameters, while our regret bound works for any given parameter. This leads to very different analytical method, and they cannot provide distributiondependent regret bounds. Russo & Van Roy (2016) also use Bayesian regret to analyze the regret bounds of TS policy for any kind of MAB problems. Again, due to the use of Bayesian regret, their analytical method is very different and cannot be used for our purpose."}, {"heading": "2. Model and Definitions", "text": ""}, {"heading": "2.1. CMAB Problem Formulation", "text": "A CMAB problem instance is modeled as a tuple ([m], I, D,R,Q). [m] = {1, 2, \u00b7 \u00b7 \u00b7 ,m} is the set of base arms; I \u2286 2[m] is the set of super arms; D is a probability distribution in [0, 1]m, and is unknown to the player, R and Q are reward and feedback functions to be specified shortly. Let \u00b5 = (\u00b51, \u00b7 \u00b7 \u00b7 , \u00b5m), where \u00b5i = EX\u223cD[Xi]. At discrete time slot t \u2265 1, the player pulls a super arm S(t) \u2208 I, and the environment draws a random outcome vectorX(t) = {X1(t), \u00b7 \u00b7 \u00b7 , Xm(t)} \u2208 [0, 1]m from D, independent of any other random variables. Then the player receives an unknown reward R(t) = R(S(t),X(t)), and observes the feedback Q(t) = Q(S(t),X(t)). As in (Chen et al., 2016b) and other papers studying CMAB, we consider semi-bandit feedback, that is, Q(t) = {(i,Xi(t)) | i \u2208 S(t)}. At time t, the previous step information is\nFt\u22121 = {(S(\u03c4), Q(\u03c4)) : 1 \u2264 \u03c4 \u2264 t \u2212 1}, which is the input to the learning algorithm to select the action S(t). Similar to (Chen et al., 2016b), we make the following two assumptions. For a parameter vector\u00b5, we use\u00b5S to denote the projection of \u00b5 on S, where S is a subset of all the base arms.\nAssumption 1. The expected reward of a super arm S \u2208 I only depends on the mean outcomes of base arms in S. That is, there exists a function r such that E[R(t)] = EX(t)\u223cD[R(S(t),X(t))] = r(S(t),\u00b5S(t)).\nThe second assumption is a Lipschitz-continuity assumption of function r to deal with non-linear reward functions (it is based on one-norm).\nAssumption 2. There exists a constant B, such that for every super arm S and every pair of mean vectors \u00b5 and \u00b5\u2032, |r(S,\u00b5)\u2212 r(S,\u00b5\u2032)| \u2264 B||\u00b5S \u2212 \u00b5\u2032S ||1.\nThe goal of the player is to minimize the total (expected) regret under time horizon T , as defined below:\nReg(T ) , E [ T\u2211 t=1 (r(S\u2217,\u00b5)\u2212 r(S(t),\u00b5)) ] ,\nwhere S\u2217 \u2208 argmaxS\u2208I r(S,\u00b5) is a best super arm."}, {"heading": "2.2. Matroid Bandit", "text": "In matroid bandit settings, ([m], I) is a matroid, which means that I has two properties:\n\u2022 If A \u2208 I, then \u2200A\u2032 \u2286 A, A\u2032 \u2208 I;\n\u2022 If A1, A2 \u2208 I, |A1| > |A2|, then there exists i \u2208 A1 \\A2 such that A2 \u222a {i} \u2208 I. The reward function is R(S,x) = \u2211 i\u2208S xi, and thus the\nexpected reward function is r(S,\u00b5) = \u2211 i\u2208S \u00b5i."}, {"heading": "3. Combinatorial Thompson Sampling", "text": "We first consider the general CMAB setting. For this setting, we assume that the player has an exact oracle Oracle(\u03b8) that takes a vector of parameters \u03b8 = (\u03b81, . . . , \u03b8m) as input, and output a super arm S = argmaxS\u2208I r(S,\u03b8).\nThe combinatorial Thompson sampling (CTS) algorithm is described in Algorithm 1. Initially we set the prior distribution of the means of all base arms as the Beta distribution \u03b2(1, 1), which is the uniform distribution on [0, 1]. After we get observation Q(t), we update the prior of all base arms in S(t) using procedure Update (Algorithm 2): for each observation Xi(t), we generate a Bernoulli random variable Yi(t) (the value of Yi at time t) independently with mean Xi(t), and then we update the prior Beta distribution\nAlgorithm 1 CTS Algorithm for CMAB 1: For each arm i, let ai = bi = 1 2: for t = 1, 2, \u00b7 \u00b7 \u00b7 do 3: For all arm i, draw a sample \u03b8i(t) from Beta distribu-\ntion \u03b2(ai, bi); let \u03b8(t) = (\u03b81(t), . . . , \u03b8m(t)) 4: Play action S(t) = Oracle(\u03b8(t)), get the observation Q(t) = {(i,Xi(t)) : i \u2208 S(t)} 5: Update({(ai, bi) | i \u2208 S(t)}, Q(t)) 6: end for\nAlgorithm 2 Procedure Update 1: Input: {(ai, bi) | i \u2208 S}, Q = {(i,Xi) | i \u2208 S} 2: Output: updated {(ai, bi) | i \u2208 S} 3: for all (i,Xi) \u2208 Q do 4: Yi \u2190 1 with probabilityXi, 0 with probability 1\u2212Xi 5: ai \u2190 ai + Yi; bi \u2190 bi + 1\u2212 Yi 6: end for\nof base arm i using Yi(t) as the new observation. It is easy to see that {Yi(t)}t\u2019s are i.i.d. with the same mean \u00b5i as the samples {Xi(t)}t\u2019s. Let ai(t) and bi(t) denote the values of ai and bi at the beginning of time step t. Then, following the Bayes\u2019 rule, the posterior distribution of parameter \u00b5i after observation Q(t) is \u03b2(ai(t) +Yi(t), bi(t) + 1\u2212Yi(t)), which is what the Update procedure does for updating ai and bi. When choosing a super arm, we simply draw independent samples from all base arms\u2019 prior distributions, i.e. \u03b8i(t) \u223c \u03b2(ai(t), bi(t)), and then send the sample vector \u03b8(t) = (\u03b81(t), . . . , \u03b8m(t)) to the oracle. We use the output from the oracle S(t) as the super arm to play.\nWe also need a further assumption to tackle the problem:\nAssumption 3. D = D1\u00d7D2\u00d7\u00b7 \u00b7 \u00b7\u00d7Dm, i.e., the outcomes of all base arms are mutually independent.\nThis assumption is not necessary in CUCB algorithms. However, when using TS method, this assumption is needed. This is because that we are using the Bayes\u2019 Rule, thus we need the exact likelihood function (as we can see in (Gopalan et al., 2014b)). Only when the distributions for all the base arms are independent, we can use the Update procedure (Algorithm 2) to update their mean vector\u2019s prior distribution. When the distributions are correlated, the update procedure will also be much more complicated."}, {"heading": "3.1. Regret Upper Bound", "text": "Let OPT = argmaxS\u2208I r(S,\u00b5) be the set of optimal super arms. Let S\u2217 \u2208 argminS\u2208OPT |S| is one of the optimal super arm with minimum size k\u2217. Then we can define \u2206S = r(S\u2217,\u00b5) \u2212 r(S,\u00b5), and \u2206max = maxS\u2208I \u2206S . Kmax is the maximum size of super arms, i.e. Kmax = maxS\u2208I |S|. Theorem 1. Under Assumptions 1, 2, and 3, for all D,\nAlgorithm 1 has regret upper bound m\u2211 i=1 max S:i\u2208S 8B2|S| log T \u2206S \u2212 2B(k\u22172 + 2)\u03b5 + ( mK2max \u03b52 + 3m)\u2206max\n+\u03b11 \u00b7 (\n8\u2206max \u03b52 ( 4 \u03b52 + 1)k \u2217 log\nk\u2217\n\u03b52\n) , (1)\nfor any \u03b5 such that \u2200S,\u2206S > 2B(k\u22172 + 2)\u03b5, where B is the Lipschitz constant in Assumption 2, and \u03b11 is a constant not dependent on the problem instance.\nWhen \u03b5 is sufficiently small, the leading log T term in the regret bound is comparable with the regret bound for CUCB in (Chen et al., 2016b). The term related to \u03b5 is to handle continuous Beta prior \u2014 since we will never be able to sample a \u03b8(k)i (t) to be exactly the true value \u00b5i, we need to consider the \u03b5 neighborhood of \u00b5i. This \u03b5 term is common in most Thompson sampling analysis.\nThe constant term has an exponential dependency on k\u2217. This is because we need all the k\u2217 base arms in the best super arm to have samples close to their means to make sure that it is the best super arm in sampling. In contrast, for the top-k MAB of (Komiyama et al., 2015), there is no such exponential dependency, because they only compare one base arm at a time (this can also be seen in our matroid Bandit analysis). When dealing with the general actions, the regret result of (Gopalan et al., 2014b) also contains an exponentially large constant term without a close form, which is likely to be much larger than ours. In Section 3.3, we show that this exponential constant is unavoidable for the general CTS.\nWe now provide the proof outline for Theorem 1. First we define the following four events:\n\u2022 A(t) = {S(t) /\u2208 OPT}\n\u2022 B(t) = {\u2203i \u2208 S(t), |\u00b5\u0302i(t)\u2212 \u00b5i| > \u03b5|S(t)|}\n\u2022 C(t) = {||\u03b8S(t)(t)\u2212 \u00b5S(t)||1 > \u2206S(t) B \u2212 (k \u22172 + 1)\u03b5}\n\u2022 D(t) = {\u2203i \u2208 S(t), |\u03b8i(t)\u2212 \u00b5\u0302i(t)| > \u221a\n2 log T Ni(t) }\nThen the total regret can be written as:\nT\u2211 t=1 E [ I[A(t)]\u00d7\u2206S(t) ] \u2264\nT\u2211 t=1 E [ I[B(t) \u2227 A(t)]\u00d7\u2206S(t) ] +\nT\u2211 t=1 E [ I[\u00acB(t) \u2227 C(t) \u2227 D(t) \u2227 A(t)]\u00d7\u2206S(t) ]\n+ T\u2211 t=1 E [ I[\u00acB(t) \u2227 C(t) \u2227 \u00acD(t) \u2227 A(t)]\u00d7\u2206S(t) ] +\nT\u2211 t=1 E [ I[\u00acC(t) \u2227 A(t)]\u00d7\u2206S(t) ] The first term can be bounded by Chernoff Bound, which is( mK2max \u03b52 +m ) \u2206max. The second term can be bounded by some basic results of Beta distribution, the upper bound is 2m\u2206max.\nThe third term is a little bit tricky. Notice that under C(t), we can use B||\u03b8S(t)(t) \u2212 \u00b5S(t)||1 as an approximation of \u2206S(t). However, it is hard to bound \u2211 i\u2208S(t) |\u03b8i(t) \u2212 \u00b5i|. To deal with this, we say one base arm i \u2208 S(t) is sufficiently learned if Ni(t) > Li(S(t)) = 2 log T/( \u2206S(t) 2B|S(t)| \u2212\nk\u22172+2 |S(t)| \u03b5) 2. When computing \u2211 i\u2208S(t) |\u03b8i(t) \u2212 \u00b5i|, we do not count all the sufficiently learned arms in. To compensate their contributions, we double all the insufficiently\nlearned arms\u2019 contributions from \u221a\n2 log T Ni(t)\nto 2 \u221a\n2 log T Ni(t) . One can check that the sum of contributions from insufficiently learned arms is an upper bound for the regret \u2206S(t) under \u00acB(t)\u2227C(t)\u2227\u00acD(t). Thus, we can upper bound the total contribution of base arm i as: \u2211 i 4B \u221a 2 log TLmaxi where Lmaxi = maxS:i\u2208S Li(S).\nThe difficulty comes mainly from the last term. Although the \u03b8i(t)\u2019s of all base arms are mutually independent, when it comes to super arms, the value r(S,\u03b8(t)S)\u2019s for different super arms S are not mutually independent, because super arms may overlap one another. For example, Lemma 1 in (Agrawal & Goyal, 2013) is not true for considering super arms because of the lack of independence. This means that we cannot simply use the technique of (Agrawal & Goyal, 2013). Dealing with the dependency issue for this case is the main novelty in our analysis, as we now explain.\nLet \u03b8 = (\u03b81, \u00b7 \u00b7 \u00b7 , \u03b8m) be a vector of parameters, Z \u2286 [m] and Z 6= \u2205 be some base arm set and Zc be the complement of Z. Recall that \u03b8Z is the sub-vector of \u03b8 projected onto Z, and we use notation (\u03b8\u2032Z ,\u03b8Zc) to denote replacing \u03b8i\u2019s with \u03b8\u2032i\u2019s for i \u2208 Z and keeping the values \u03b8i for i \u2208 Zc unchanged.\nGiven a subset Z \u2286 S\u2217, we consider the following property for \u03b8Zc . For any ||\u03b8\u2032Z \u2212 \u00b5Z ||\u221e \u2264 \u03b5, let \u03b8\u2032 = (\u03b8\u2032Z ,\u03b8Zc):\n\u2022 Z \u2286 Oracle(\u03b8\u2032);\n\u2022 Either Oracle(\u03b8\u2032) \u2208 OPT or ||\u03b8\u2032Oracle(\u03b8\u2032) \u2212 \u00b5Oracle(\u03b8\u2032)||1 > \u2206Oracle(\u03b8\u2032) B \u2212 (k \u22172 + 1)\u03b5.\nThe first one is to make sure that if we have normal samples in Z at time t, then arms in Z will be played and observed.\nThese observations would update the Beta distributions of these arms to be more accurate, such that it is easier next time that the samples from these arms are also within \u03b5 of their true value. This fact would be used later in the quantitative regret analysis. The second one says that if the samples in Z are normal, then \u00acC(t)\u2227A(t) can not happen (similar to the analysis in (Agrawal & Goyal, 2013) and (Komiyama et al., 2015)). As time going on, the probability that \u00acC(t)\u2227A(t) happens will become smaller and smaller, thus the expectation on its sum has an constant upper bound.\nWe use EZ,1(\u03b8) to denote the event that the vector \u03b8Zc has such a property, and emphasize that this event only depends on the values in vector \u03b8Zc . What we want to do is to find some exact Z such that EZ,1(\u03b8) happens when \u00acC(t)\u2227A(t) happens. The following lemma shows that such Z must exist, it is the key lemma in this section.\nLemma 1. Suppose that \u00acC(t) \u2227 A(t) happens, then there exists Z \u2286 S\u2217 and Z 6= \u2205 such that EZ,1(\u03b8(t)) holds.\nBy Lemma 1, for some nonempty Z, EZ,1(\u03b8(t)) occurs when \u00acC(t) \u2227 A(t) happens. Another fact is that ||\u03b8Z(t)\u2212 \u00b5Z ||\u221e > \u03b5. The reason is that if ||\u03b8Z(t)\u2212 \u00b5Z ||\u221e \u2264 \u03b5, by definition of the property, either S(t) \u2208 OPT or ||\u03b8S(t)(t)\u2212 \u00b5S(t)||1 > \u2206S(t) B \u2212 (k\n\u22172 + 1)\u03b5, which means \u00acC(t)\u2227A(t) can not happen. Let EZ,2(\u03b8) be the event {||\u03b8Z \u2212\u00b5Z ||\u221e > \u03b5}. Then {\u00acC(t) \u2227 A(t)} \u2192 \u2228Z\u2286S\u2217,Z 6=\u2205(EZ,1(\u03b8(t)) \u2227 EZ,2(\u03b8(t))).\nUsing similar techniques in (Komiyama et al., 2015) we can get the upper bound O ( 8 \u03b52 ( 4 \u03b52 ) |Z| log |Z|\u03b52 ) for\u2211T\nt=1 E [I{EZ,1(\u03b8(t)), EZ,2(\u03b8(t))}]."}, {"heading": "3.2. Approximation Oracle", "text": "We consider using an approximation oracle in our CTS algorithm as well, like what the author did in (Chen et al., 2016b) or (Wen et al., 2015). However, we found out that Thompson sampling does not work with an approximation oracle even in the original MAB model, as shown in Theorem 2. Notice that here we do not consider the Bayesian regret, so it does not contradict with the results in (Wen et al., 2015).\nTo make it clear, we need to show the definitions of approximation oracle and approximation regret here.\nDefinition 1. An approximation oracle with rate \u03bb for MAB problem is a function Oracle : [0, 1]m \u2192 {1, \u00b7 \u00b7 \u00b7 ,m} such that \u00b5Oracle(\u00b5) \u2265 \u03bbmaxi \u00b5i. Definition 2. The approximation regret with rate \u03bb of MAB problem on mean vector \u00b5 is defined as:\nT\u2211 t=1 (\u03bbmax i \u00b5i \u2212 \u00b5i(t)),\nwhere i(t) is the arm pulled on time step t.\nThe TS algorithm using approximation oracle Oralce works just as Algorithm 1.\nTheorem 2. There exists an MAB instance with an approximation oracle such that when using Algorithm 1, the regret is \u2126(T ).\nProof Sketch. Consider the following MAB instance:\nProblem Instance 1. m = 3, \u00b5 = [0.9, 0.82, 0.7], approximate rate \u03bb = 0.8. The Oracle works as following: if \u00b53 \u2265 \u03bbmaxi \u00b5i, Oracle(\u00b5) = 3; else if \u00b52 \u2265 \u03bbmaxi \u00b5i, Oracle(\u00b5) = 2; otherwise Oracle(\u00b5) = 1.\nThe key idea is that we may never play the best arm (arm 1 above) when using the approximation oracle. When the sample from the prior distribution of the best arm is good, we choose an approximate arm (arm 2 above) but not the best arm; otherwise we choose an bad arm (arm 3 above) with positive approximation regret. Thus the expected regret of each time slot depends on whether the prior distribution of the best arm at the beginning is good or not. Since the best arm is never observed, we never update its prior distribution. Thus the expected regret in each time slot can remain a positive constant forever."}, {"heading": "3.3. The Exponential Constant Term", "text": "Since every arm\u2019s sample \u03b8i(t) is chosen independently, the worst case is that we need all the samples for base arms in the best super arm to be close to their true means to choose that super arm. Under this case, the probability that we have no regret in each time slot is exponentially with k\u2217, thus we will have such a constant term.\nTheorem 3. There exists a CMAB instance such that the regret of Algorithm 1 on this instance is at least \u2126(2k \u2217 ).\nProof Sketch. Consider the following CMAB instance:\nProblem Instance 2. m = k\u2217+1, there are only two super arms in I, where S1 = {1, 2, \u00b7 \u00b7 \u00b7 , k\u2217} and S2 = {k\u2217 + 1}. The mean vector \u00b5S1 = [1, \u00b7 \u00b7 \u00b7 , 1]. The reward function R follows R(S1,X) = \u220f i\u2208S1 Xi, and R(S2,X) = 1 \u2212 \u2206, while \u2206 = 0.5. The distributions Di are all independent Bernoulli distributions with mean \u00b5i (since \u00b5i = 1, the observations are always 1).\nOne can show that the expected time until Algorithm 1 plays the optimal super arm S1 for the first time is \u2126(2k \u2217 ).\nThe exponential term comes from the bad prior distribution at the beginning of the algorithm. In fact, from the proof of Theorem 1 we know that if we can pull each base arm for O\u0303( 1\u03b52 ) times at the beginning and then use the CTS policy\nwhose prior distribution at the beginning is the posterior distribution after those observations, then we can reduce the exponential constant term to O(m 4 ). However, since \u03b5 depends on \u2206min, which is unknown to the player, we can not simply run each base arm for a few time steps to avoid the exponential constant regret term. Perhaps an adaptive choice can be used here, and this is a further research item."}, {"heading": "4. Matroid Bandit Case", "text": "In matroid bandit, we suppose the oracle we use is the greedy one since the greedy algorithm gives back the exact best super arm."}, {"heading": "4.1. Regret Upper Bound", "text": "Let S\u2217 \u2208 argmaxS\u2208I r(S,\u00b5) be one of the optimal super arm. Define \u2206i = minj|j\u2208S\u2217,\u00b5j>\u00b5i \u00b5j \u2212 \u00b5i. If i /\u2208 S\u2217 but {j | j \u2208 S\u2217, \u00b5j > \u00b5i} = \u2205, we define \u2206i = \u221e, so that 1\u2206i = 0. Let K = maxS\u2208I |S| = |S\n\u2217|. We have the following theorem for CTS algorithm under the matroid bandit case: Theorem 4. Under Assumptions 1 and 2, the regret upper bound of Algorithm 1 for a matroid bandit is:\nReg(T ) \u2264 \u2211 i/\u2208S\u2217 log T \u2206i \u2212 2\u03b5 \u2206i \u2212 \u03b5 \u2206i \u2212 2\u03b5 + \u03b12 \u00b7 (m \u03b54 ) +m2,\nfor any \u03b5 > 0 such that \u2200i /\u2208 S\u2217,\u2206i \u2212 2\u03b5 > 0, where \u03b12 is a constant not dependent on the problem instance.\nNotice that we do not need the distributions of all the base arms to be independent due to the special structure of matroid. When \u03b5 is small, the leading log T term of the above regret bound matches the regret lower bound\u2211 i/\u2208S\u2217 1 \u2206i\nlog T given in (Kveton et al., 2014). For the constant term, we have anO( 1\u03b54 ) factor while Agrawal & Goyal (2013) have an O( 1\u03b52 ) factor in their theorem. However, even following their analysis, we can only obtainO( 1\u03b54 ) and cannot recover the O( 1\u03b52 ) in their analysis.\nWe now provide a proof outline. The difference from Theorem 1 is that we can use the special combinatorial structure of matroid to improve the analysis.\nFirstly, we introduce a fact from (Kveton et al., 2014). Fact 1. (Lemma 1 in (Kveton et al., 2014)) For each S(t) = {i(1)(t), \u00b7 \u00b7 \u00b7 , i(K)(t)} chosen by Algorithm 1 (the superscript is the order when they are chosen), we could find a bijection Lt from {1, 2, . . . ,K} to S\u2217 such that:\n1) If i(k)(t) \u2208 S\u2217, then Lt(k) = i(k)(t);\n2) \u22001 \u2264 k \u2264 K, {i(1)(t), \u00b7 \u00b7 \u00b7 , i(k\u22121)(t), Lt(k)} \u2208 I.\nWith a bijection Lt, we could decouple the regret of playing one action S(t) to each pair of mapped arms between S(t)\nand S\u2217. For example, the regret of time t is \u2211K k=1 \u00b5Lt(k) \u2212 \u00b5i(k)(t).\nWe use Ni,j(t) to denote the number of rounds that i(k)(t) = i and Lt(k) = j for i /\u2208 S\u2217, j \u2208 S\u2217 within in time slots 1, 2, \u00b7 \u00b7 \u00b7 , T , then\nReg(T ) \u2264 \u2211 i/\u2208S\u2217 \u2211 j:j\u2208S\u2217,\u00b5j>\u00b5i E[Ni,j(t)](\u00b5j \u2212 \u00b5i).\nWe can see that if {j : j \u2208 S\u2217, \u00b5j > \u00b5i} = \u2205, then\u2211 i/\u2208S\u2217 \u2211 j:j\u2208S\u2217,\u00b5j>\u00b5i E[Ni,j(t)](\u00b5j \u2212 \u00b5i) = 0, thus we do not need to consider the regret from base arm i, so we set \u2206i =\u221e to make 1\u2206i = 0.\nNow we just need to bound the value Ni,j(t), similarly, we can defined the following three events:\n\u2022 Ai,j(t) = {\u2203k, i(k)(t) = i \u2227 Lt(k) = j}\n\u2022 Bi(t) = {\u00b5\u0302i(t) > \u00b5i + \u03b5}\n\u2022 Ci,j(t) = {\u03b8i(t) > \u00b5j \u2212 \u03b5}\nThus\nE[Ni,j(t)] = E [ T\u2211 t=1 I[Ai,j(t)] ]\n\u2264 E [ T\u2211 t=1 I[Ai,j(t) \u2227 Bi(t)] ]\n+E [ T\u2211 t=1 I[Ai,j(t) \u2227 \u00acBi(t) \u2227 Ci,j(t)] ]\n+E [ T\u2211 t=1 I[Ai,j(t) \u2227 \u00acCi,j(t)] ]\nWe can use Chernoff Bound to get an upper bound of the first term as (m \u2212 K)(1 + 1\u03b52 ). As for the second term, basic properties of Beta distribution give an upper bound: (m\u2212K)K + \u2211 i/\u2208S\u2217\nlog T 2\u22062i .\nThe largest difference appears in the third term, instead of Lemma 1, here we can have some further steps in matroid bandit. Lemma 2. Suppose the vector \u03b8(t) satisfy that Ai,j(t) \u2227 \u00acCi,j(t) happens. Then if we change \u03b8j(t) to \u03b8\u2032j(t) > \u00b5j\u2212\u03b5 and set other values in \u03b8(t) unchanged to get \u03b8\u2032(t), then arm j must be chosen in \u03b8\u2032(t).\nWe use the notation \u03b8\u2212i to be the vector \u03b8 without \u03b8i.\nFor any j \u2208 S\u2217, let Wj be the set of all possible values of \u03b8 satisfies that Ai,j(t) \u2227 \u00acCi,j(t) happens for some i, and W\u2212j = {\u03b8\u2212j : \u03b8 \u2208Wj}.\nFrom Lemma 2, we know \u03b8(t) \u2208Wj only if \u03b8\u2212j(t) \u2208W\u2212j and \u03b8j(t) \u2264 \u00b5j \u2212 \u03b5. Then similar with the analysis of Theorem 1, we can bound the value \u2211T t=1 E[\u03b8(t) \u2208Wj ] \u2264 O( 1\u03b54 )."}, {"heading": "5. Experiments", "text": "We conduct some preliminary experiments to empirically evaluate the performance of CTS versus CUCB and C-KLUCB. The reason that we choose C-KL-UCB is that: a) in classical MAB model, KL-UCB behaves better than UCB; b) similar with TS, it is also a policy based on Bayesian Rule. We also make simulations on CUCB and C-KL-UCB with chosen parameters, represented by CUCB-m and CKL-UCB-m. In CUCB, we choose the confidence radius to be radi(t) = \u221a 3 log t 2Ni(t) , while in CUCB-m, it is \u221a log t 2Ni(t)\n. In C-KL-UCB we choose f(t) = log t+ 2 log log t, while in C-KL-UCB-m it is log t. Those chosen parameters in CUCB-m and C-KL-UCB-m make them behave better, but lack performance analysis."}, {"heading": "5.1. Matroid Bandit", "text": "It is well known that spanning trees form a matroid. Thus, we test the maximum spanning tree problem as an example of matroid bandits, where edges are arms, and super arms are forests.\nWe first generate a random graph with M nodes, and each pair of nodes has an edge with probability p. If the resulting graph has no spanning tree, we regenerate the graph again. The mean of the distribution is randomly and uniformly chosen from [0, 1]. The expected reward for any spanning tree is the sum of the means of all edges in it. It is easy to see that this setting is an instance of the matroid bandit.\nThe results are shown in Figure 1 with the probability p = 0.6 and M = 30. In Figure 1(a), we set all the arms to have independent distributions. In Figure 1(b), each time slot we generate a global random variable rand uniformly in [0, 1], all edges with mean larger than rand will have outcome 1, while others have outcome 0. In other words, the distributions of base arms are correlated. We can see that CTS has smaller regret than CUCB, CUCB-m and CKL-UCB in both two experiments. As for C-KL-UCB-m algorithm, it behaves better with small T , but loses when T is very large. We emphasize that C-KL-UCB-m policy uses parameters without theoretical guarantee, thus CTS algorithm is a better choice."}, {"heading": "5.2. General CMAB", "text": "In the general CMAB case, we consider the shortest path problem. We build two graphs for this experiment, the results of them are shown in Figure 2(a) and Figure 2(b).\nThe cost of a path is the sum of all edges\u2019 mean in that path, while the outcome of each edge e follows a independent Bernoulli distribution with mean \u00b5e. The objective is to find the path with minimum cost. To make the problem more challenging, in both graphs we construct a lot of paths from the source node s to the sink node t that only have a little larger cost than the optimal one, and some of them are totally disjoint with the optimal path.\nSimilar to the case of matroid bandit, the regret of CTS is also much smaller than that of CUCB, CUCB-m and C-KLUCB, especially when T is large. As for the C-KL-UCB-m algorithm, although it behaves best in the four UCB-based policies, it still has a large difference between CTS."}, {"heading": "6. Future Work", "text": "In this paper, we apply combinatorial Thompson sampling to combinatorial multi-armed bandit and matroid bandit problems, and obtain theoretical regret upper bounds for those two settings.\nThere are still a number of interesting questions that may worth further investigation. For example, pulling each base arm for a number of time slots at the beginning of the game can decease the constant term to non-exponential, but the point is that the player does not know how many time slots are enough. Thus how can we use an adaptive policy or some further assumptions to do so is a good question. In this paper, we suppose that all the distributions for base arms are independent. Another question is how to find analysis for using CTS under correlated arm distributions."}], "year": 2018, "references": [{"title": "Analysis of thompson sampling for the multi-armed bandit problem", "authors": ["S. Agrawal", "N. Goyal"], "venue": "In COLT, pp", "year": 2012}, {"title": "Further optimal regret bounds for thompson sampling", "authors": ["S. Agrawal", "N. Goyal"], "venue": "In AISTATS, pp", "year": 2013}, {"title": "Finite-time analysis of the multiarmed bandit problem", "authors": ["P. Auer", "N. Cesa-Bianchi", "P. Fischer"], "venue": "Machine learning,", "year": 2002}, {"title": "The non-stochastic multi-armed bandit problem", "authors": ["P. Auer", "N. Cesa-Bianchi", "Y. Freund", "R.E. Schapire"], "venue": "Siam Journal on Computing,", "year": 2002}, {"title": "Bandit problems: sequential allocation of experiments (Monographs on statistics and applied probability)", "authors": ["D.A. Berry", "B. Fristedt"], "year": 1985}, {"title": "Combinatorial multi-armed bandit with general reward functions", "authors": ["W. Chen", "W. Hu", "F. Li", "J. Li", "Y. Liu", "P. Lu"], "venue": "In NIPS,", "year": 2016}, {"title": "Combinatorial multi-armed bandit and its extension to probabilistically triggered arms", "authors": ["W. Chen", "Y. Wang", "Y. Yuan", "Q. Wang"], "venue": "Journal of Machine Learning Research,", "year": 2016}, {"title": "Combinatorial bandits revisited", "authors": ["R. Combes", "M.S. Talebi", "A. Proutiere", "M. Lelarge"], "venue": "In NIPS,", "year": 2015}, {"title": "Combinatorial network optimization with unknown variables: Multi-armed bandits with linear rewards and individual observations", "authors": ["Y. Gai", "B. Krishnamachari", "R. Jain"], "venue": "IEEE/ACM Transactions on Networking,", "year": 2012}, {"title": "The kl-ucb algorithm for bounded stochastic bandits and beyond", "authors": ["A. Garivier", "O. Capp\u00e9"], "year": 2011}, {"title": "Multi-armed bandit allocation indices. wileyinterscience series in systems and optimization", "authors": ["J. Gittins"], "year": 1989}, {"title": "Thompson sampling for complex online problems", "authors": ["A. Gopalan", "S. Mannor", "Y. Mansour"], "venue": "In Proceedings of the 31st International Conference on Machine Learning (ICML),", "year": 2014}, {"title": "Thompson sampling for complex online problems", "authors": ["A. Gopalan", "S. Mannor", "Y. Mansour"], "venue": "In ICML,", "year": 2014}, {"title": "Thompson sampling: an asymptotically optimal finite-time analysis", "authors": ["E. Kaufmann", "N. Korda", "R. Munos"], "venue": "In Proceedings of the 23rd international conference on Algorithmic Learning Theory, pp", "year": 2012}, {"title": "Optimal regret analysis of thompson sampling in stochastic multi-armed bandit problem with multiple plays", "authors": ["J. Komiyama", "J. Honda", "H. Nakagawa"], "venue": "In Proceedings of The 32nd International Conference on Machine Learning,", "year": 2015}, {"title": "Matroid bandits: Fast combinatorial optimization with learning", "authors": ["B. Kveton", "Z. Wen", "A. Ashkan", "H. Eydgahi", "B. Eriksson"], "venue": "In Proceedings of the 30th Conference on Uncertainty in Artificial Intelligence (UAI),", "year": 2014}, {"title": "Tight regret bounds for stochastic combinatorial semi-bandits", "authors": ["B. Kveton", "Z. Wen", "A. Ashkan", "C. Szepesv\u00e1ri"], "venue": "In Proceedings of the 18th International Conference on Artificial Intelligence and Statistics,", "year": 2015}, {"title": "Combinatorial cascading bandits", "authors": ["B. Kveton", "Z. Wen", "A. Ashkan", "C. Szepesvari"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2015}, {"title": "Asymptotically efficient adaptive allocation rules", "authors": ["T.L. Lai", "H. Robbins"], "venue": "Advances in applied mathematics,", "year": 1985}, {"title": "An information-theoretic analysis of thompson sampling", "authors": ["D. Russo", "B. Van Roy"], "venue": "Journal of Machine Learning Research,", "year": 2016}, {"title": "Reinforcement learning: An introduction, volume 1", "authors": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT press Cambridge,", "year": 1998}, {"title": "On the likelihood that one unknown probability exceeds another in view of the evidence of two samples", "authors": ["W.R. Thompson"], "year": 1933}, {"title": "Improving regret bounds for combinatorial semi-bandits with probabilistically triggered arms and its applications", "authors": ["Q. Wang", "W. Chen"], "venue": "In Advances in Neural Information Processing Systems,", "year": 2017}, {"title": "Efficient learning in large-scale combinatorial semi-bandits", "authors": ["Z. Wen", "B. Kveton", "A. Ashkan"], "venue": "In ICML, pp", "year": 2015}], "id": "SP:99a8bde831215fbcedebf76955ee788e88fcbfa1", "authors": [{"name": "Siwei Wang", "affiliations": []}, {"name": "Wei Chen", "affiliations": []}], "abstractText": "We study the application of the Thompson sampling (TS) methodology to the stochastic combinatorial multi-armed bandit (CMAB) framework. We analyze the standard TS algorithm for the general CMAB, and obtain the first distributiondependent regret bound of O(m log T/\u2206min) for TS under general CMAB, where m is the number of arms, T is the time horizon, and \u2206min is the minimum gap between the expected reward of the optimal solution and any non-optimal solution. We also show that one cannot use an approximate oracle in TS algorithm for even MAB problems. Then we expand the analysis to matroid bandit, a special case of CMAB and for which we could remove the independence assumption across arms and achieve a better regret bound. Finally, we use some experiments to show the comparison of regrets of CUCB and CTS algorithms.", "title": "Thompson Sampling for Combinatorial Semi-Bandits"}