0,1,label2,summary_sentences
"Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1948–1958 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics
1948",text,[0],[0]
"With the recent surge of interest in deep learning, one question that is being asked across a number of fronts is: can deep learning techniques be harnessed for creative purposes?",1 Introduction,[0],[0]
"Creative applications where such research exists include the composition of music (Humphrey et al., 2013; Sturm et al., 2016; Choi et al., 2016), the design of sculptures (Lehman et al., 2016), and automatic choreography (Crnkovic-Friis and Crnkovic-Friis, 2016).",1 Introduction,[1.0],"['Creative applications where such research exists include the composition of music (Humphrey et al., 2013; Sturm et al., 2016; Choi et al., 2016), the design of sculptures (Lehman et al., 2016), and automatic choreography (Crnkovic-Friis and Crnkovic-Friis, 2016).']"
"In this paper, we focus on a creative textual task: automatic poetry composition.
",1 Introduction,[0],[0]
"A distinguishing feature of poetry is its aesthetic forms, e.g. rhyme and rhythm/",1 Introduction,[0],[0]
"meter.1 In this work, we treat the task of poem generation as a constrained language modelling task, such that lines of a given poem rhyme, and each line follows a canonical meter and has a fixed number
1Noting that there are many notable divergences from this in the work of particular poets (e.g. Walt Whitman) and poetry types (such as free verse or haiku).
",1 Introduction,[0],[0]
Shall I compare thee to a summer’s day?,1 Introduction,[0],[0]
"Thou art more lovely and more temperate: Rough winds do shake the darling buds of May, And summer’s lease hath all too short a date:
",1 Introduction,[0],[0]
"Figure 1: 1st quatrain of Shakespeare’s Sonnet 18.
of stresses.",1 Introduction,[0],[0]
"Specifically, we focus on sonnets and generate quatrains in iambic pentameter (e.g. see Figure 1), based on an unsupervised model of language, rhyme and meter trained on a novel corpus of sonnets.
",1 Introduction,[1.0000000187287004],"['Specifically, we focus on sonnets and generate quatrains in iambic pentameter (e.g. see Figure 1), based on an unsupervised model of language, rhyme and meter trained on a novel corpus of sonnets.']"
"Our findings are as follows:
• our proposed stress and rhyme models work very well, generating sonnet quatrains with stress and rhyme patterns that are indistinguishable from human-written poems and rated highly by an expert; • a vanilla language model trained over our son-
net corpus, surprisingly, captures meter implicitly at human-level performance; • while crowd workers rate the poems generated
by our best model as nearly indistinguishable from published poems by humans, an expert annotator found the machine-generated poems to lack readability and emotion, and our best model to be only comparable to a vanilla language model on these dimensions; • most work on poetry generation focuses on me-
ter (Greene et al., 2010; Ghazvininejad et al., 2016; Hopkins and Kiela, 2017); our results suggest that future research should look beyond meter and focus on improving readability.
",1 Introduction,[0],[0]
"In this, we develop a new annotation framework for the evaluation of machine-generated poems, and release both a novel data of sonnets and the full source code associated with this research.2
2https://github.com/jhlau/deepspeare",1 Introduction,[0],[0]
"Early poetry generation systems were generally rule-based, and based on rhyming/TTS dictionaries and syllable counting (Gervás, 2000; Wu et al., 2009; Netzer et al., 2009; Colton et al., 2012; Toivanen et al., 2013).",2 Related Work,[0],[0]
"The earliest attempt at using statistical modelling for poetry generation was Greene et al. (2010), based on a language model paired with a stress model.
",2 Related Work,[0],[0]
Neural networks have dominated recent research.,2 Related Work,[0],[0]
"Zhang and Lapata (2014) use a combination of convolutional and recurrent networks for modelling Chinese poetry, which Wang et al. (2016) later simplified by incorporating an attention mechanism and training at the character level.",2 Related Work,[0],[0]
"For English poetry, Ghazvininejad et al. (2016) introduced a finite-state acceptor to explicitly model rhythm in conjunction with a recurrent neural language model for generation.",2 Related Work,[0],[0]
"Hopkins and Kiela (2017) improve rhythm modelling with a cascade of weighted state transducers, and demonstrate the use of character-level language model for English poetry.",2 Related Work,[0],[0]
"A critical difference over our work is that we jointly model both poetry content and forms, and unlike previous work which use dictionaries (Ghazvininejad et al., 2016) or heuristics (Greene et al., 2010) for rhyme, we learn it automatically.",2 Related Work,[0],[0]
"The sonnet is a poem type popularised by Shakespeare, made up of 14 lines structured as 3 quatrains (4 lines) and a couplet (2 lines);3 an example quatrain is presented in Figure 1.",3 Sonnet Structure and Dataset,[0],[0]
"It follows a number of aesthetic forms, of which two are particularly salient: stress and rhyme.
",3 Sonnet Structure and Dataset,[0],[0]
"A sonnet line obeys an alternating stress pattern, called the iambic pentameter, e.g.:
S− S+ S− S+ S− S+ S− S+ S− S+
Shall I compare thee to a summer’s day?",3 Sonnet Structure and Dataset,[0.999999942795811],"['A sonnet line obeys an alternating stress pattern, called the iambic pentameter, e.g.: S− S+ S− S+ S− S+ S− S+ S− S+ Shall I compare thee to a summer’s day?']"
"where S− and S+ denote unstressed and stressed syllables, respectively.
",3 Sonnet Structure and Dataset,[0],[0]
"A sonnet also rhymes, with a typical rhyming scheme being ABAB CDCD EFEF GG.",3 Sonnet Structure and Dataset,[0],[0]
"There are a number of variants, however, mostly seen in the quatrains; e.g. AABB or ABBA are also common.
",3 Sonnet Structure and Dataset,[0],[0]
"We build our sonnet dataset from the latest image of Project Gutenberg.4 We first create a
3There are other forms of sonnets, but the Shakespearean sonnet is the dominant one.",3 Sonnet Structure and Dataset,[0],[0]
"Hereinafter “sonnet” is used to specifically mean Shakespearean sonnets.
",3 Sonnet Structure and Dataset,[0],[0]
"4https://www.gutenberg.org/.
(generic) poetry document collection using the GutenTag tool (Brooke et al., 2015), based on its inbuilt poetry classifier and rule-based structural tagging of individual poems.
",3 Sonnet Structure and Dataset,[0],[0]
"Given the poems, we use word and character statistics derived from Shakespeare’s 154 sonnets to filter out all non-sonnet poems (to form the “BACKGROUND” dataset), leaving the sonnet corpus (“SONNET”).5 Based on a small-scale manual analysis of SONNET, we find that the approach is sufficient for extracting sonnets with high precision.",3 Sonnet Structure and Dataset,[1.0],"['Given the poems, we use word and character statistics derived from Shakespeare’s 154 sonnets to filter out all non-sonnet poems (to form the “BACKGROUND” dataset), leaving the sonnet corpus (“SONNET”).5 Based on a small-scale manual analysis of SONNET, we find that the approach is sufficient for extracting sonnets with high precision.']"
"BACKGROUND serves as a large corpus (34M words) for pre-training word embeddings, and SONNET is further partitioned into training, development and testing sets.",3 Sonnet Structure and Dataset,[1.0],"['BACKGROUND serves as a large corpus (34M words) for pre-training word embeddings, and SONNET is further partitioned into training, development and testing sets.']"
Statistics of SONNET are given in Table 1.6,3 Sonnet Structure and Dataset,[0],[0]
"We propose modelling both content and forms jointly with a neural architecture, composed of 3 components: (1) a language model; (2) a pentameter model for capturing iambic pentameter; and (3) a rhyme model for learning rhyming words.
",4 Architecture,[0.9999999745660059],"['We propose modelling both content and forms jointly with a neural architecture, composed of 3 components: (1) a language model; (2) a pentameter model for capturing iambic pentameter; and (3) a rhyme model for learning rhyming words.']"
"Given a sonnet line, the language model uses standard categorical cross-entropy to predict the next word, and the pentameter model is similarly trained to learn the alternating iambic stress patterns.7 The rhyme model, on the other hand, uses a margin-based loss to separate rhyming word pairs from non-rhyming word pairs in a quatrain.",4 Architecture,[0],[0]
"For generation we use the language model to generate one word at a time, while applying the pentame-
5The following constraints were used to select sonnets: 8.0 6 mean words per line 6 11.5; 40 6 mean characters per line 6 51.0; min/max number of words per line of 6/15; min/max number of characters per line of 32/60; and min letter ratio per line > 0.59.
6The sonnets in our collection are largely in Modern English, with possibly a small number of poetry in Early Modern English.",4 Architecture,[0],[0]
"The potentially mixed-language dialect data might add noise to our system, and given more data it would be worthwhile to include time period as a factor in the model.
",4 Architecture,[0],[0]
"7There are a number of variations in addition to the standard pattern (Greene et al., 2010), but our model uses only the standard pattern as it is the dominant one.
",4 Architecture,[0],[0]
ter model to sample meter-conforming sentences and the rhyme model to enforce rhyme.,4 Architecture,[0],[0]
The architecture of the joint model is illustrated in Figure 2.,4 Architecture,[0],[0]
We train all the components together by treating each component as a sub-task in a multitask learning setting.8,4 Architecture,[0],[0]
"The language model is a variant of an LSTM encoder–decoder model with attention (Bahdanau et al., 2015), where the encoder encodes the preceding context (i.e. all sonnet lines before the current line) and the decoder decodes one word at a time for the current line, while attending to the preceding context.
",4.1 Language Model,[1.0000000028843654],"['The language model is a variant of an LSTM encoder–decoder model with attention (Bahdanau et al., 2015), where the encoder encodes the preceding context (i.e. all sonnet lines before the current line) and the decoder decodes one word at a time for the current line, while attending to the preceding context.']"
"In the encoder, we embed context words zi using embedding matrix Wwrd to yield wi, and feed them to a biLSTM9 to produce a sequence of encoder hidden states",4.1 Language Model,[0],[0]
hi =,4.1 Language Model,[0],[0]
[~hi; ~hi].,4.1 Language Model,[0],[0]
"Next we apply
8We stress that although the components appear to be disjointed, the shared parameters allow the components to mutually influence each other during joint training.",4.1 Language Model,[0],[0]
"To exemplify this, we found that the pentameter model performs very poorly when we train each component separately.
",4.1 Language Model,[0],[0]
"9We use a single layer for all LSTMs.
",4.1 Language Model,[0],[0]
"a selective mechanism (Zhou et al., 2017) to each hi.",4.1 Language Model,[0],[0]
"By defining the representation of the whole context h = [~hC ; ~h1] (where C is the number of words in the context), the selective mechanism filters the hidden states hi using h as follows:
h′i = hi σ(Wahi",4.1 Language Model,[0],[0]
"+Uah+ ba)
where denotes element-wise product.",4.1 Language Model,[0],[0]
"Hereinafter W, U and b are used to refer to model parameters.",4.1 Language Model,[0],[0]
"The intuition behind this procedure is to selectively filter less useful elements from the context words.
",4.1 Language Model,[0],[0]
"In the decoder, we embed words xt in the current line using the encoder-shared embedding matrix (Wwrd) to produce wt.",4.1 Language Model,[0],[0]
"In addition to the word embeddings, we also embed the characters of a word using embedding matrix Wchr to produce ct,i, and feed them to a bidirectional (character-level) LSTM:
~ut,i = LSTMf (ct,i, ~ut,i−1) ~ut,i = LSTMb(ct,i, ~ut,i+1)
(1)
We represent the character encoding of a word by concatenating the last forward and first back-
ward hidden states ut =",4.1 Language Model,[0],[0]
"[~ut,L; ~ut,1], where L is the length of the word.",4.1 Language Model,[0],[0]
"We incorporate character encodings because they provide orthographic information, improve representations of unknown words, and are shared with the pentameter model (Section 4.2).10 The rationale for sharing the parameters is that we see word stress and language model information as complementary.
",4.1 Language Model,[0],[0]
"Given the word embedding wt and character encoding ut, we concatenate them together and feed them to a unidirectional (word-level) LSTM to produce the decoding states:
st = LSTM([wt;ut], st−1) (2)
We attend st to encoder hidden states h′i and compute the weighted sum of h′i as follows:
eti = v ᵀ b tanh(Wbh ′",4.1 Language Model,[0],[0]
"i +Ubst + bb) at = softmax(et)
h∗t",4.1 Language Model,[0],[0]
= ∑ i atih ′,4.1 Language Model,[0],[0]
"i
To combine st and h∗t , we use a gating unit similar to a GRU (Cho et al., 2014; Chung et al., 2014): s′t = GRU(st,h ∗ t ).",4.1 Language Model,[0],[0]
"We then feed s ′ t to a linear layer with softmax activation to produce the vocabulary distribution (i.e. softmax(Wouts′t + bout), and optimise the model with standard categorical cross-entropy loss.",4.1 Language Model,[0],[0]
"We use dropout as regularisation (Srivastava et al., 2014), and apply it to the encoder/decoder LSTM outputs and word embedding lookup.",4.1 Language Model,[0],[0]
"The same regularisation method is used for the pentameter and rhyme models.
",4.1 Language Model,[0],[0]
"As our sonnet data is relatively small for training a neural language model (367K words; see Table 1), we pre-train word embeddings and reduce parameters further by introducing weight-sharing between output matrix Wout and embedding matrix Wwrd via a projection matrix",4.1 Language Model,[0],[0]
"Wprj (Inan et al., 2016; Paulus et al., 2017; Press and Wolf, 2017):
Wout = tanh(WwrdWprj)",4.1 Language Model,[0],[0]
This component is designed to capture the alternating iambic stress pattern.,4.2 Pentameter Model,[0],[0]
"Given a sonnet line,
10We initially shared the character encodings with the rhyme model as well, but found sub-par performance for the rhyme model.",4.2 Pentameter Model,[0],[0]
"This is perhaps unsurprising, as rhyme and stress are qualitatively very different aspects of forms.
",4.2 Pentameter Model,[0],[0]
"the pentameter model learns to attend to the appropriate characters to predict the 10 binary stress symbols sequentially.11 As punctuation is not pronounced, we preprocess each sonnet line to remove all punctuation, leaving only spaces and letters.",4.2 Pentameter Model,[0.9953983340953398],"['Given a sonnet line, the pentameter model learns to attend to the appropriate characters to predict the 10 binary stress symbols sequentially.11 As punctuation is not pronounced, we preprocess each sonnet line to remove all punctuation, leaving only spaces and letters.']"
"Like the language model, the pentameter model is fashioned as an encoder–decoder network.
",4.2 Pentameter Model,[0],[0]
"In the encoder, we embed the characters using the shared embedding matrix Wchr and feed them to the shared bidirectional character-level LSTM (Equation (1)) to produce the character encodings for the sentence: uj = [~uj ; ~uj ].
",4.2 Pentameter Model,[0.9999999760856795],"['In the encoder, we embed the characters using the shared embedding matrix Wchr and feed them to the shared bidirectional character-level LSTM (Equation (1)) to produce the character encodings for the sentence: uj = [~uj ; ~uj ].']"
"In the decoder, it attends to the characters to predict the stresses sequentially with an LSTM:
gt = LSTM(u∗t−1,gt−1)
where u∗t−1 is the weighted sum of character encodings from the previous time step, produced by an attention network which we describe next,12 and gt is fed to a linear layer with softmax activation to compute the stress distribution.
",4.2 Pentameter Model,[0.999999961055661],"['In the decoder, it attends to the characters to predict the stresses sequentially with an LSTM: gt = LSTM(u∗t−1,gt−1) where u∗t−1 is the weighted sum of character encodings from the previous time step, produced by an attention network which we describe next,12 and gt is fed to a linear layer with softmax activation to compute the stress distribution.']"
"The attention network is designed to focus on stress-producing characters, whose positions are monotonically increasing (as stress is predicted sequentially).",4.2 Pentameter Model,[1.0],"['The attention network is designed to focus on stress-producing characters, whose positions are monotonically increasing (as stress is predicted sequentially).']"
"We first compute µt, the mean position of focus:
µ′t = σ(v ᵀ c tanh(Wcgt +Ucµt−1 + bc)) µt =M ×min(µ′t + µt−1, 1.0)
where M is the number of characters in the sonnet line.",4.2 Pentameter Model,[0],[0]
"Given µt, we can compute the (unnormalised) probability for each character position:
ptj = exp",4.2 Pentameter Model,[0],[0]
"( −(j − µt)2
2T 2 ) where standard deviation T is a hyper-parameter.",4.2 Pentameter Model,[0],[0]
"We incorporate this position information when computing u∗t : 13
u′j = p t juj",4.2 Pentameter Model,[0],[0]
dtj = v ᵀ d tanh(Wdu ′,4.2 Pentameter Model,[0],[0]
j,4.2 Pentameter Model,[0],[0]
"+Udgt + bd)
f t = softmax(dt + logpt) u∗t = ∑ j btjuj
11That is, given the input line Shall I compare thee to a summer’s day?",4.2 Pentameter Model,[0],[0]
the model is required to output S− S+ S− S+ S− S+ S− S+,4.2 Pentameter Model,[0],[0]
"S− S+, based on the syllable boundaries from Section 3.
",4.2 Pentameter Model,[0],[0]
"12Initial input (u∗0) and state (g0) is a trainable vector and zero vector respectively.
",4.2 Pentameter Model,[0],[0]
"13Spaces are masked out, so they always yield zero attention weights.
",4.2 Pentameter Model,[0],[0]
"Intuitively, the attention network incorporates the position information at two points, when computing: (1) dtj by weighting the character encodings; and (2) f t by adding the position log probabilities.",4.2 Pentameter Model,[0],[0]
"This may appear excessive, but preliminary experiments found that this formulation produces the best performance.
",4.2 Pentameter Model,[0],[0]
"In a typical encoder–decoder model, the attended encoder vector u∗t would be combined with the decoder state gt to compute the output probability distribution.",4.2 Pentameter Model,[0],[0]
"Doing so, however, would result in a zero-loss model as it will quickly learn that it can simply ignore u∗t to predict the alternating stresses based on gt.",4.2 Pentameter Model,[0],[0]
"For this reason we use only u∗t to compute the stress probability:
P (S−) = σ(Weu ∗ t + be)
which gives the loss Lent = ∑
t− logP (S?t ) for the whole sequence, where S?t is the target stress at time step t.
We find the decoder still has the tendency to attend to the same characters, despite the incorporation of position information.",4.2 Pentameter Model,[0],[0]
"To regularise the model further, we introduce two loss penalties: repeat and coverage loss.
",4.2 Pentameter Model,[0],[0]
"The repeat loss penalises the model when it attends to previously attended characters (See et al., 2017), and is computed as follows:
Lrep = ∑ t ∑ j min(f tj , t−1∑ t=1 f tj )
By keeping a sum of attention weights over all previous time steps, we penalise the model when it focuses on characters that have non-zero history weights.
",4.2 Pentameter Model,[0],[0]
"The repeat loss discourages the model from focussing on the same characters, but does not assure that the appropriate characters receive attention.",4.2 Pentameter Model,[0],[0]
"Observing that stresses are aligned with the vowels of a syllable, we therefore penalise the model when vowels are ignored:
Lcov = ∑ j∈V ReLU(C − 10∑ t=1 f tj )
where V is a set of positions containing vowel characters, and C is a hyper-parameter that defines the minimum attention threshold that avoids penalty.
",4.2 Pentameter Model,[0],[0]
"To summarise, the pentameter model is optimised with the following loss:
Lpm = Lent + αLrep + βLcov (3)
where α and β are hyper-parameters for weighting the additional loss terms.",4.2 Pentameter Model,[0],[0]
"Two reasons motivate us to learn rhyme in an unsupervised manner: (1) we intend to extend the current model to poetry in other languages (which may not have pronunciation dictionaries); and (2) the language in our SONNET data is not Modern English, and so contemporary dictionaries may not accurately reflect the rhyme of the data.
",4.3 Rhyme Model,[0.9999999957153969],"['Two reasons motivate us to learn rhyme in an unsupervised manner: (1) we intend to extend the current model to poetry in other languages (which may not have pronunciation dictionaries); and (2) the language in our SONNET data is not Modern English, and so contemporary dictionaries may not accurately reflect the rhyme of the data.']"
"Exploiting the fact that rhyme exists in a quatrain, we feed sentence-ending word pairs of a quatrain as input to the rhyme model and train it to learn how to separate rhyming word pairs from non-rhyming ones.",4.3 Rhyme Model,[1.0],"['Exploiting the fact that rhyme exists in a quatrain, we feed sentence-ending word pairs of a quatrain as input to the rhyme model and train it to learn how to separate rhyming word pairs from non-rhyming ones.']"
"Note that the model does not assume any particular rhyming scheme — it works as long as quatrains have rhyme.
",4.3 Rhyme Model,[0],[0]
"A training example consists of a number of word pairs, generated by pairing one target word with 3 other reference words in the quatrain, i.e. {(xt, xr), (xt, xr+1), (xt, xr+2)}, where xt is the target word and xr+i are the reference words.14",4.3 Rhyme Model,[0],[0]
We assume that in these 3 pairs there should be one rhyming and 2 non-rhyming pairs.,4.3 Rhyme Model,[0],[0]
From preliminary experiments we found that we can improve the model by introducing additional non-rhyming or negative reference words.,4.3 Rhyme Model,[0],[0]
"Negative reference words are sampled uniform randomly from the vocabulary, and the number of additional negative words is a hyper-parameter.
",4.3 Rhyme Model,[0],[0]
For each word x in the word pairs we embed the characters using the shared embedding matrix Wchr and feed them to an LSTM to produce the character states uj,4.3 Rhyme Model,[0],[0]
.15,4.3 Rhyme Model,[0],[0]
"Unlike the language and pentameter models, we use a unidirectional forward LSTM here (as rhyme is largely determined by the final characters), and the LSTM parameters are not shared.",4.3 Rhyme Model,[0],[0]
"We represent the encoding of the whole word by taking the last state u = uL, where L is the character length of the word.
",4.3 Rhyme Model,[1.0000000447788773],"['We represent the encoding of the whole word by taking the last state u = uL, where L is the character length of the word.']"
"Given the character encodings, we use a
14E.g.",4.3 Rhyme Model,[0],[0]
"for the quatrain in Figure 1, a training example is {(day, temperate), (day, may), (day, date)}.
",4.3 Rhyme Model,[0],[0]
"15The character embeddings are the only shared parameters in this model.
margin-based loss to optimise the model:
Q = {cos(ut,ur), cos(ut,ur+1), ...}",4.3 Rhyme Model,[0],[0]
"Lrm = max(0, δ − top(Q, 1) + top(Q, 2))
where top(Q, k) returns the k-th largest element in Q, and δ is a margin hyper-parameter.
",4.3 Rhyme Model,[0],[0]
"Intuitively, the model is trained to learn a sufficient margin (defined by δ) that separates the best pair with all others, with the second-best being used to quantify all others.",4.3 Rhyme Model,[1.0],"['Intuitively, the model is trained to learn a sufficient margin (defined by δ) that separates the best pair with all others, with the second-best being used to quantify all others.']"
"This is the justification used in the multi-class SVM literature for a similar objective (Wang and Xue, 2014).
",4.3 Rhyme Model,[0],[0]
"With this network we can estimate whether two words rhyme by computing the cosine similarity score during generation, and resample words as necessary to enforce rhyme.",4.3 Rhyme Model,[1.0],"['With this network we can estimate whether two words rhyme by computing the cosine similarity score during generation, and resample words as necessary to enforce rhyme.']"
"We focus on quatrain generation in this work, and so the aim is to generate 4 lines of poetry.",4.4 Generation Procedure,[0],[0]
During generation we feed the hidden state from the previous time step to the language model’s decoder to compute the vocabulary distribution for the current time step.,4.4 Generation Procedure,[0],[0]
"Words are sampled using a temperature between 0.6 and 0.8, and they are resampled if the following set of words is generated: (1) UNK token; (2) non-stopwords that were generated before;16 (3) any generated words with a frequency > 2; (4) the preceding 3 words; and (5) a number of symbols including parentheses, single and double quotes.17",4.4 Generation Procedure,[0],[0]
"The first sonnet line is generated without using any preceding context.
",4.4 Generation Procedure,[0],[0]
We next describe how to incorporate the pentameter model for generation.,4.4 Generation Procedure,[0],[0]
"Given a sonnet line, the pentameter model computes a loss Lpm (Equation (3))",4.4 Generation Procedure,[0],[0]
that indicates how well the line conforms to the iambic pentameter.,4.4 Generation Procedure,[0],[0]
"We first generate 10 candidate lines (all initialised with the same hidden state), and then sample one line from the candidate lines based on the pentameter loss values (Lpm).",4.4 Generation Procedure,[0],[0]
"We convert the losses into probabilities by taking the softmax, and a sentence is sampled with temperature = 0.1.
",4.4 Generation Procedure,[0],[0]
"To enforce rhyme, we randomly select one of the rhyming schemes (AABB, ABAB or ABBA) and resample sentence-ending words as necessary.",4.4 Generation Procedure,[0],[0]
"Given a pair of words, the rhyme model produces a cosine similarity score that estimates how well the
16We use the NLTK stopword list (Bird et al., 2009).",4.4 Generation Procedure,[0],[0]
"17We add these constraints to prevent the model from being
too repetitive, in generating the same words.
",4.4 Generation Procedure,[0],[0]
two words rhyme.,4.4 Generation Procedure,[0],[0]
We resample the second word of a rhyming pair (e.g. when generating the second A in AABB) until it produces a cosine similarity > 0.9.,4.4 Generation Procedure,[0],[0]
"We also resample the second word of a nonrhyming pair (e.g. when generating the first B in AABB) by requiring a cosine similarity 6 0.7.18
When generating in the forward direction we can never be sure that any particular word is the last word of a line, which creates a problem for resampling to produce good rhymes.",4.4 Generation Procedure,[0],[0]
"This problem is resolved in our model by reversing the direction of the language model, i.e. generating the last word of each line first.",4.4 Generation Procedure,[0],[0]
We apply this inversion trick at the word level (character order of a word is not modified) and only to the language model; the pentameter model receives the original word order as input.,4.4 Generation Procedure,[1.0],['We apply this inversion trick at the word level (character order of a word is not modified) and only to the language model; the pentameter model receives the original word order as input.']
"We assess our sonnet model in two ways: (1) component evaluation of the language, pentameter and rhyme models; and (2) poetry generation evaluation, by crowd workers and an English literature expert.",5 Experiments,[1.0],"['We assess our sonnet model in two ways: (1) component evaluation of the language, pentameter and rhyme models; and (2) poetry generation evaluation, by crowd workers and an English literature expert.']"
"A sample of machine-generated sonnets are included in the supplementary material.
",5 Experiments,[0],[0]
We tune the hyper-parameters of the model over the development data (optimal configuration in the supplementary material).,5 Experiments,[0],[0]
"Word embeddings are initialised with pre-trained skip-gram embeddings (Mikolov et al., 2013a,b) on the BACKGROUND dataset, and are updated during training.",5 Experiments,[0],[0]
"For optimisers, we use Adagrad (Duchi et al., 2011) for the language model, and Adam (Kingma and Ba, 2014) for the pentameter and rhyme models.",5 Experiments,[0],[0]
"We truncate backpropagation through time after 2 sonnet lines, and train using 30 epochs, resetting the network weights to the weights from the previous epoch whenever development loss worsens.",5 Experiments,[0],[0]
We use standard perplexity for evaluating the language model.,5.1.1 Language Model,[0],[0]
"In terms of model variants, we have:19 • LM: Vanilla LSTM language model; • LM∗: LSTM language model that incorporates
character encodings (Equation (2)); 18Maximum number of resampling steps is capped at 1000.",5.1.1 Language Model,[0],[0]
"If the threshold is exceeded the model is reset to generate from scratch again.
",5.1.1 Language Model,[0],[0]
"19All models use the same (applicable) hyper-parameter configurations.
",5.1.1 Language Model,[0],[0]
• LM∗∗: LSTM language model that incorporates both character encodings and preceding context; • LM∗∗-C:,5.1.1 Language Model,[0],[0]
"Similar to LM∗∗, but preceding con-
text is encoded using convolutional networks, inspired by the poetry model of Zhang and Lapata (2014);20 • LM∗∗+PM+RM: the full model, with joint training of the language, pentameter and rhyme models.",5.1.1 Language Model,[0],[0]
Perplexity on the test partition is detailed in Table 2.,5.1.1 Language Model,[0],[0]
"Encouragingly, we see that the incorporation of character encodings and preceding context improves performance substantially, reducing perplexity by almost 10 points from LM to LM∗∗.",5.1.1 Language Model,[0],[0]
The inferior performance of LM∗∗-C compared to LM∗∗ demonstrates that our approach of processing context with recurrent networks with selective encoding is more effective than convolutional networks.,5.1.1 Language Model,[0],[0]
"The full model LM∗∗+PM+RM, which learns stress
20In Zhang and Lapata (2014), the authors use a series of convolutional networks with a width of 2 words to convert 5/7 poetry lines into a fixed size vector; here we use a standard convolutional network with max-pooling operation (Kim, 2014) to process the context.
and rhyme patterns simultaneously, also appears to improve the language model slightly.",5.1.1 Language Model,[0],[0]
"To assess the pentameter model, we use the attention weights to predict stress patterns for words in the test data, and compare them against stress patterns in the CMU pronunciation dictionary.21 Words that have no coverage or have nonalternating patterns given by the dictionary are discarded.",5.1.2 Pentameter Model,[0],[0]
"We use accuracy as the metric, and a predicted stress pattern is judged to be correct if it matches any of the dictionary stress patterns.
",5.1.2 Pentameter Model,[0],[0]
"To extract a stress pattern for a word from the model, we iterate through the pentameter (10 time steps), and append the appropriate stress (e.g. 1st time step = S−) to the word if any of its characters receives an attention > 0.20.
",5.1.2 Pentameter Model,[0],[0]
For the baseline (Stress-BL) we use the pretrained weighted finite state transducer (WFST) provided by Hopkins and Kiela (2017).22 The WFST maps a sequence word to a sequence of stresses by assuming each word has 1–5 stresses and the full word sequence produces iambic pentameter.,5.1.2 Pentameter Model,[0],[0]
"It is trained using the EM algorithm on a sonnet corpus developed by the authors.
",5.1.2 Pentameter Model,[0],[0]
We present stress accuracy in Table 2.,5.1.2 Pentameter Model,[0],[0]
"LM∗∗+PM+RM performs competitively, and informal inspection reveals that a number of mistakes are due to dictionary errors.",5.1.2 Pentameter Model,[0],[0]
"To understand the predicted stresses qualitatively, we display attention heatmaps for the the first quatrain of Shakespeare’s Sonnet 18 in Figure 3.",5.1.2 Pentameter Model,[0],[0]
"The y-axis represents the ten stresses of the iambic pentameter, and
21http://www.speech.cs.cmu.edu/cgi-bin/ cmudict.",5.1.2 Pentameter Model,[0],[0]
"Note that the dictionary provides 3 levels of stresses: 0, 1 and 2; we collapse 1 and 2 to S+.
22https://github.com/JackHopkins/ ACLPoetry
x-axis the characters of the sonnet line (punctuation removed).",5.1.2 Pentameter Model,[0],[0]
"The attention network appears to perform very well, without any noticeable errors.",5.1.2 Pentameter Model,[0],[0]
"The only minor exception is lovely in the second line, where it predicts 2 stresses but the second stress focuses incorrectly on the character e rather than y. Additional heatmaps for the full sonnet are provided in the supplementary material.",5.1.2 Pentameter Model,[0],[0]
"We follow a similar approach to evaluate the rhyme model against the CMU dictionary, but score based on F1 score.",5.1.3 Rhyme Model,[0],[0]
Word pairs that are not included in the dictionary are discarded.,5.1.3 Rhyme Model,[0],[0]
"Rhyme is determined by extracting the final stressed phoneme for the paired words, and testing if their phoneme patterns match.
",5.1.3 Rhyme Model,[0],[0]
"We predict rhyme for a word pair by feeding them to the rhyme model and computing cosine similarity; if a word pair is assigned a score > 0.8,23 it is considered to rhyme.",5.1.3 Rhyme Model,[0],[0]
"As a baseline (Rhyme-BL), we first extract for each word the last vowel and all following consonants, and predict a word pair as rhyming if their extracted sequences match.",5.1.3 Rhyme Model,[0],[0]
"The extracted sequence can be interpreted as a proxy for the last syllable of a word.
",5.1.3 Rhyme Model,[0],[0]
Reddy and Knight (2011) propose an unsupervised model for learning rhyme schemes in poems via EM.,5.1.3 Rhyme Model,[0],[0]
"There are two latent variables: φ specifies the distribution of rhyme schemes, and θ defines
230.8 is empirically found to be the best threshold based on development data.
",5.1.3 Rhyme Model,[0],[0]
the pairwise rhyme strength between two words.,5.1.3 Rhyme Model,[0],[0]
The model’s objective is to maximise poem likelihood over all possible rhyme scheme assignments under the latent variables φ and θ.,5.1.3 Rhyme Model,[0],[0]
"We train this model (Rhyme-EM) on our data24 and use the learnt θ to decide whether two words rhyme.25
Table 2 details the rhyming results.",5.1.3 Rhyme Model,[0],[0]
"The rhyme model performs very strongly at F1 > 0.90, well above both baselines.",5.1.3 Rhyme Model,[0],[0]
"Rhyme-EM performs poorly because it operates at the word level (i.e. it ignores character/orthographic information) and hence does not generalise well to unseen words and word pairs.26
To better understand the errors qualitatively, we present a list of word pairs with their predicted cosine similarity in Table 3.",5.1.3 Rhyme Model,[0],[0]
Examples on the left side are rhyming word pairs as determined by the CMU dictionary; right are non-rhyming pairs.,5.1.3 Rhyme Model,[0],[0]
"Looking at the rhyming word pairs (left), it appears that these words tend not to share any wordending characters.",5.1.3 Rhyme Model,[0],[0]
"For the non-rhyming pairs, we spot several CMU errors: (sire, ire) and (queen, been) clearly rhyme.",5.1.3 Rhyme Model,[0],[0]
"Following Hopkins and Kiela (2017), we present a pair of quatrains (one machine-generated and one human-written, in random order) to crowd workers on CrowdFlower, and ask them to guess which is the human-written poem.",5.2.1 Crowdworker Evaluation,[0],[0]
"Generation quality is estimated by computing the accuracy of workers at correctly identifying the human-written poem (with lower values indicate better results for the model).
",5.2.1 Crowdworker Evaluation,[0],[0]
"We generate 50 quatrains each for LM, LM∗∗ and LM∗∗+PM+RM (150 in total), and as a control, generate 30 quatrains with LM trained for one epoch.",5.2.1 Crowdworker Evaluation,[0],[0]
An equal number of human-written quatrains was sampled from the training partition.,5.2.1 Crowdworker Evaluation,[0],[0]
"A HIT contained 5 pairs of poems (of which one is a control), and workers were paid $0.05 for each HIT.",5.2.1 Crowdworker Evaluation,[0],[0]
"Workers who failed to identify the human-written poem in the control pair reliably (minimum accuracy = 70%) were removed by CrowdFlower automati-
24We use the original authors’ implementation: https: //github.com/jvamvas/rhymediscovery.
",5.2.1 Crowdworker Evaluation,[0],[0]
"25A word pair is judged to rhyme if θw1,w2 > 0.02; the threshold (0.02) is selected based on development performance.
",5.2.1 Crowdworker Evaluation,[0],[0]
"26Word pairs that did not co-occur in a poem in the training data have rhyme strength of zero.
cally, and they were restricted to do a maximum of 3 HITs.",5.2.1 Crowdworker Evaluation,[0],[0]
"To dissuade workers from using search engines to identify real poems, we presented the quatrains as images.
",5.2.1 Crowdworker Evaluation,[0],[0]
Accuracy is presented in Table 4.,5.2.1 Crowdworker Evaluation,[0],[0]
"We see a steady decrease in accuracy (= improvement in model quality) from LM to LM∗∗ to LM∗∗+PM+RM, indicating that each model generates quatrains that are less distinguishable from human-written ones.",5.2.1 Crowdworker Evaluation,[0],[0]
"Based on the suspicion that workers were using rhyme to judge the poems, we tested a second model, LM∗∗+RM, which is the full model without the pentameter component.",5.2.1 Crowdworker Evaluation,[1.0],"['Based on the suspicion that workers were using rhyme to judge the poems, we tested a second model, LM∗∗+RM, which is the full model without the pentameter component.']"
"We found identical accuracy (0.532), confirming our suspicion that crowd workers depend on only rhyme in their judgements.",5.2.1 Crowdworker Evaluation,[0],[0]
These observations demonstrate that meter is largely ignored by lay persons in poetry evaluation.,5.2.1 Crowdworker Evaluation,[0],[0]
"To better understand the qualitative aspects of our generated quatrains, we asked an English literature expert (a Professor of English literature at a major English-speaking university; the last author of this paper) to directly rate 4 aspects: meter, rhyme, readability and emotion (i.e. amount of emotion the poem evokes).",5.2.2 Expert Judgement,[1.0],"['To better understand the qualitative aspects of our generated quatrains, we asked an English literature expert (a Professor of English literature at a major English-speaking university; the last author of this paper) to directly rate 4 aspects: meter, rhyme, readability and emotion (i.e. amount of emotion the poem evokes).']"
All are rated on an ordinal scale between 1 to 5 (1 = worst; 5 = best).,5.2.2 Expert Judgement,[0],[0]
"In total, 120 quatrains were annotated, 30 each for LM, LM∗∗, LM∗∗+PM+RM, and human-written poems (Human).",5.2.2 Expert Judgement,[0],[0]
The expert was blind to the source of each poem.,5.2.2 Expert Judgement,[0],[0]
"The mean and standard deviation of the ratings are presented in Table 5.
",5.2.2 Expert Judgement,[0],[0]
"We found that our full model has the highest ratings for both rhyme and meter, even higher than
human poets.",5.2.2 Expert Judgement,[0.9999999980182158],"['We found that our full model has the highest ratings for both rhyme and meter, even higher than human poets.']"
"This might seem surprising, but in fact it is well established that real poets regularly break rules of form to create other effects (Adams, 1997).",5.2.2 Expert Judgement,[0],[0]
"Despite excellent form, the output of our model can easily be distinguished from humanwritten poetry due to its lower emotional impact and readability.",5.2.2 Expert Judgement,[0],[0]
"In particular, there is evidence here that our focus on form actually hurts the readability of the resulting poems, relative even to the simpler language models.",5.2.2 Expert Judgement,[1.0],"['In particular, there is evidence here that our focus on form actually hurts the readability of the resulting poems, relative even to the simpler language models.']"
"Another surprise is how well simple language models do in terms of their grasp of meter: in this expert evaluation, we see only marginal benefit as we increase the sophistication of the model.",5.2.2 Expert Judgement,[1.0],"['Another surprise is how well simple language models do in terms of their grasp of meter: in this expert evaluation, we see only marginal benefit as we increase the sophistication of the model.']"
"Taken as a whole, this evaluation suggests that future research should look beyond forms, towards the substance of good poetry.",5.2.2 Expert Judgement,[1.0],"['Taken as a whole, this evaluation suggests that future research should look beyond forms, towards the substance of good poetry.']"
"We propose a joint model of language, meter and rhyme that captures language and form for modelling sonnets.",6 Conclusion,[1.0],"['We propose a joint model of language, meter and rhyme that captures language and form for modelling sonnets.']"
"We provide quantitative analyses for each component, and assess the quality of generated poems using judgements from crowdworkers and a literature expert.",6 Conclusion,[1.0],"['We provide quantitative analyses for each component, and assess the quality of generated poems using judgements from crowdworkers and a literature expert.']"
"Our research reveals that vanilla LSTM language model captures meter implicitly, and our proposed rhyme model performs exceptionally well.",6 Conclusion,[1.0],"['Our research reveals that vanilla LSTM language model captures meter implicitly, and our proposed rhyme model performs exceptionally well.']"
"Machine-generated generated poems, however, still underperform in terms of readability and emotion.",6 Conclusion,[1.0],"['Machine-generated generated poems, however, still underperform in terms of readability and emotion.']"
"In this paper, we propose a joint architecture that captures language, rhyme and meter for sonnet modelling.",abstractText,[0],[0]
We assess the quality of generated poems using crowd and expert judgements.,abstractText,[0],[0]
"The stress and rhyme models perform very well, as generated poems are largely indistinguishable from human-written poems.",abstractText,[0],[0]
"Expert evaluation, however, reveals that a vanilla language model captures meter implicitly, and that machine-generated poems still underperform in terms of readability and emotion.",abstractText,[0],[0]
"Our research shows the importance expert evaluation for poetry generation, and that future research should look beyond rhyme/meter and focus on poetic language.",abstractText,[0],[0]
"Deep-speare: A joint neural model of poetic language, meter and rhyme",title,[0],[0]
