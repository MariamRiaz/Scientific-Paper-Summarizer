0	35	Many areas of natural language processing have benefited from the existence of tools and frameworks that can be customized to develop specific applications.
1	118	In the area of dialogue systems, there are few such tools and frameworks and they mostly remain focused on simple tasks that can be encoded in a state-based dialogue model (see, e.g., Williams et al., 2016 and the Dialogue State Tracking Challenge 1 ).
3	43	1 https://www.microsoft.com/en-us/research/event/dialogstate-tracking-challenge/ Unfortunately, there is a dearth of tools for developing mixed-initiative dialogue systems that involve complex back-end reasoning systems.
11	169	Flexibility refers to the ability to cover the full range of natural dialogues users may want to engage in, and portability refers to how easy it is to customize or modify a system to work in new domains (Blaylock, 2007).
12	25	In this paper we describe a new, domainindependent dialogue manager based on the CPS model, and its implementation in an open-source dialog system shell (Cogent 2 ).
13	37	To demonstrate its flexibility, we also describe briefly a few dialogue systems for different domains.
14	44	2 https://github.com/wdebeaum/cogent
15	59	When agents are engaged in solving problems together, they need to communicate to agree on what goals to pursue and what steps to take to achieve those goals, negotiate roles, resources, etc.
16	88	To underscore its collaborative aspect, this type of joint activity has been called Collaborative Problem Solving (CPS).
17	47	Modeling the type of dialogue agents engage in during CPS must, therefore, take into account the nature of the joint activity itself.
18	24	In the early 2000s, Allen and colleagues described a preliminary plan-based CPS model of dialogue based on an analysis of an agent’s collaborative behavior at various levels:  An individual problem-solving level, where each agent manages its own problem- solving state, plans and executes individual actions, etc.
21	85	One of the main benefits of this model is that linguistic interpretation and high-level intention recognition could be performed independently of the individual problem-solving level, whose contribution to interpretation would be to specialize the higher-level intentions into concrete problemsolving actions and verify that such actions make sense.
22	44	The corollary is that in this model the back- end problem solvers would be insulated from the need to worry about linguistic issues.
27	51	Thus, even though each such prototype implemented (a version of) the CPS model and used the same platform for NLU, the ultimate goal of creating a domain-independent dialogue shell that others could customize to develop independently dialogue systems has so far remained elusive.
28	39	Similarly, the CPS-based dialogue manager in SAMMIE (Becker et al., 2006) also aimed for domain independence but never quite realized it (Blaylock, 2007).
31	20	Then, we will describe our dialogue manager, with a focus on its interface with the domain-specific problem solving agent.
33	18	A collaborative conversational agent must understand a user’s utterances, that is, obtain a representation of the meaning of the utterance, recognize its intention, and then reason with this intention to decide what to do and/or say next.
34	15	Finally, the system must convert its own intentions into language and communicate them to the user.
36	33	This follows the common separation of a conversational agent’s functionality into interpretation, behavior and generation, but where the separation lines are is critical for realizing the idea of isolating domainindependent from domain-specific processing.
39	58	These communicative intentions need to be further evaluated with respect to the actual problem-solving state, so they are not fully interpreted until they reach the problem solving agent.
41	53	An autonomous BA should be able to plan and act on its own, but neither the BA nor the user can singlehandedly decide on the status of collaborative goals without a commitment from the other party.
42	73	The BA expresses its attitude towards shared goals by sending to the CPS agent its own communicative intentions, which the CPS agent will use to update the collaborative state and generate communicative acts for NL generation (such as accepting or rejecting a goal, or proposing a new one).
43	42	Customization: Figure 1 includes, on the left side, a number of resources needed by our ideal dialogue system: (1) a broad lexicon for NL understanding; (2) a general-purpose (upper-level) ontology; and, optionally, (3) a domain ontology.
44	150	Even a state-of-the-art broad coverage parser, with an extensive domain-independent high-level ontology and lexicon, will not contain all the word senses and concepts needed for every application domain.
45	27	Additionally, the general ontology concepts need to be mapped onto the domain ontology used by the back-end problem solvers.
46	56	Lastly, NL generation from semantic representations of communicative acts is a difficult problem, with no general solutions.
47	16	Many taskoriented dialogue systems employ template-based techniques, which can lead to satisfactory, if somewhat repetitive text realizations.
48	28	Such templates are tailored for the application domain.
50	13	Nevertheless, we believe these customization tasks are easier to accomplish and require less linguistic expertise than building a dialogue manager for every application, let alone building domain-specific natural language understanding components.
52	55	Unlike prior work on CPSbased dialogue management, we focus on the interface between the CPS agent (CPSA) and the BA.
