{"sections": [{"heading": "1 Introduction", "text": "Neural machine translation (NMT) (Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014; Bahdanau et al., 2015) is a deep learningbased method for translation that has recently shown promising results as an alternative to statistical ap-\nproaches. NMT systems directly model the probability of the next word in the target sentence simply by conditioning a recurrent neural network on the source sentence and previously generated target words.\nWhile both simple and surprisingly accurate, NMT systems typically need to have very high capacity in order to perform well: Sutskever et al. (2014) used a 4-layer LSTM with 1000 hidden units per layer (herein 4\u00d71000) and Zhou et al. (2016) obtained state-of-the-art results on English \u2192 French with a 16-layer LSTM with 512 units per layer. The sheer size of the models requires cutting-edge hardware for training and makes using the models on standard setups very challenging.\nThis issue of excessively large networks has been observed in several other domains, with much focus on fully-connected and convolutional networks for multi-class classification. Researchers have particularly noted that large networks seem to be necessary for training, but learn redundant representations in the process (Denil et al., 2013). Therefore compressing deep models into smaller networks has been an active area of research. As deep learning systems obtain better results on NLP tasks, compression also becomes an important practical issue with applications such as running deep learning models for speech and translation locally on cell phones.\nExisting compression methods generally fall into two categories: (1) pruning and (2) knowledge distillation. Pruning methods (LeCun et al., 1990; He et al., 2014; Han et al., 2016), zero-out weights or entire neurons based on an importance criterion: LeCun et al. (1990) use (a diagonal approximation to)\nar X\niv :1\n60 6.\n07 94\n7v 4\n[ cs\n.C L\n] 2\n2 Se\np 20\nthe Hessian to identify weights whose removal minimally impacts the objective function, while Han et al. (2016) remove weights based on thresholding their absolute values. Knowledge distillation approaches (Bucila et al., 2006; Ba and Caruana, 2014; Hinton et al., 2015) learn a smaller student network to mimic the original teacher network by minimizing the loss (typically L2 or cross-entropy) between the student and teacher output.\nIn this work, we investigate knowledge distillation in the context of neural machine translation. We note that NMT differs from previous work which has mainly explored non-recurrent models in the multiclass prediction setting. For NMT, while the model is trained on multi-class prediction at the word-level, it is tasked with predicting complete sequence outputs conditioned on previous decisions. With this difference in mind, we experiment with standard knowledge distillation for NMT and also propose two new versions of the approach that attempt to approximately match the sequence-level (as opposed to word-level) distribution of the teacher network. This sequence-level approximation leads to a simple training procedure wherein the student network is trained on a newly generated dataset that is the result of running beam search with the teacher network.\nWe run experiments to compress a large state-ofthe-art 4 \u00d7 1000 LSTM model, and find that with sequence-level knowledge distillation we are able to learn a 2\u00d7 500 LSTM that roughly matches the performance of the full system. We see similar results compressing a 2 \u00d7 500 model down to 2 \u00d7 100 on a smaller data set. Furthermore, we observe that our proposed approach has other benefits, such as not requiring any beam search at test-time. As a result we are able to perform greedy decoding on the 2 \u00d7 500 model 10 times faster than beam search on the 4 \u00d7 1000 model with comparable performance. Our student models can even be run efficiently on a standard smartphone.1 Finally, we apply weight pruning on top of the student network to obtain a model that has 13\u00d7 fewer parameters than the original teacher model. We have released all the code for the models described in this paper.2\n1https://github.com/harvardnlp/nmt-android 2https://github.com/harvardnlp/seq2seq-attn"}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Sequence-to-Sequence with Attention", "text": "Let s = [s1, . . . , sI ] and t = [t1, . . . , tJ ] be (random variable sequences representing) the source/target sentence, with I and J respectively being the source/target lengths. Machine translation involves finding the most probable target sentence given the source:\nargmax t\u2208T\np(t | s)\nwhere T is the set of all possible sequences. NMT models parameterize p(t | s) with an encoder neural network which reads the source sentence and a decoder neural network which produces a distribution over the target sentence (one word at a time) given the source. We employ the attentional architecture from Luong et al. (2015), which achieved state-ofthe-art results on English\u2192 German translation.3"}, {"heading": "2.2 Knowledge Distillation", "text": "Knowledge distillation describes a class of methods for training a smaller student network to perform better by learning from a larger teacher network (in addition to learning from the training data set). We generally assume that the teacher has previously been trained, and that we are estimating parameters for the student. Knowledge distillation suggests training by matching the student\u2019s predictions to the teacher\u2019s predictions. For classification this usually means matching the probabilities either via L2 on the log scale (Ba and Caruana, 2014) or by crossentropy (Li et al., 2014; Hinton et al., 2015).\nConcretely, assume we are learning a multi-class classifier over a data set of examples of the form (x, y) with possible classes V . The usual training criteria is to minimize NLL for each example from the training data,\nLNLL(\u03b8) = \u2212 |V|\u2211 k=1 1{y = k} log p(y = k |x; \u03b8)\nwhere 1{\u00b7} is the indicator function and p the distribution from our model (parameterized by \u03b8).\n3Specifically, we use the global-general attention model with the input-feeding approach. We refer the reader to the original paper for further details.\nThis objective can be seen as minimizing the crossentropy between the degenerate data distribution (which has all of its probability mass on one class) and the model distribution p(y |x; \u03b8).\nIn knowledge distillation, we assume access to a learned teacher distribution q(y |x; \u03b8T ), possibly trained over the same data set. Instead of minimizing cross-entropy with the observed data, we instead minimize the cross-entropy with the teacher\u2019s probability distribution,\nLKD(\u03b8; \u03b8T ) =\u2212 |V|\u2211 k=1 q(y = k |x; \u03b8T )\u00d7\nlog p(y = k |x; \u03b8)\nwhere \u03b8T parameterizes the teacher distribution and remains fixed. Note the cross-entropy setup is identical, but the target distribution is no longer a sparse distribution.4 Training on q(y |x; \u03b8T ) is attractive since it gives more information about other classes for a given data point (e.g. similarity between classes) and has less variance in gradients (Hinton et al., 2015).\n4 In some cases the entropy of the teacher/student distribution is increased by annealing it with a temperature term \u03c4 > 1\np\u0303(y |x) \u221d p(y |x) 1 \u03c4\nAfter testing \u03c4 \u2208 {1, 1.5, 2} we found that \u03c4 = 1 worked best.\nSince this new objective has no direct term for the training data, it is common practice to interpolate between the two losses,\nL(\u03b8; \u03b8T ) = (1\u2212 \u03b1)LNLL(\u03b8) + \u03b1LKD(\u03b8; \u03b8T )\nwhere \u03b1 is mixture parameter combining the one-hot distribution and the teacher distribution."}, {"heading": "3 Knowledge Distillation for NMT", "text": "The large sizes of neural machine translation systems make them an ideal candidate for knowledge distillation approaches. In this section we explore three different ways this technique can be applied to NMT."}, {"heading": "3.1 Word-Level Knowledge Distillation", "text": "NMT systems are trained directly to minimize word NLL, LWORD-NLL, at each position. Therefore if we have a teacher model, standard knowledge distillation for multi-class cross-entropy can be applied. We define this distillation for a sentence as,\nLWORD-KD = \u2212 J\u2211\nj=1 |V|\u2211 k=1 q(tj = k | s, t<j)\u00d7\nlog p(tj = k | s, t<j)\nwhere V is the target vocabulary set. The student can further be trained to optimize the mixture of\nLWORD-KD and LWORD-NLL. In the context of NMT, we refer to this approach as word-level knowledge distillation and illustrate this in Figure 1 (left)."}, {"heading": "3.2 Sequence-Level Knowledge Distillation", "text": "Word-level knowledge distillation allows transfer of these local word distributions. Ideally however, we would like the student model to mimic the teacher\u2019s actions at the sequence-level. The sequence distribution is particularly important for NMT, because wrong predictions can propagate forward at testtime.\nFirst, consider the sequence-level distribution specified by the model over all possible sequences t \u2208 T ,\np(t | s) = J\u220f\nj=1\np(tj | s, t<j)\nfor any length J . The sequence-level negative loglikelihood for NMT then involves matching the onehot distribution over all complete sequences,\nLSEQ-NLL = \u2212 \u2211 t\u2208T 1{t = y} log p(t | s)\n= \u2212 J\u2211\nj=1 |V|\u2211 k=1 1{yj = k} log p(tj = k | s, t<j)\n= LWORD-NLL\nwhere y = [y1, . . . , yJ ] is the observed sequence. Of course, this just shows that from a negative log likelihood perspective, minimizing word-level NLL and sequence-level NLL are equivalent in this model.\nBut now consider the case of sequence-level knowledge distillation. As before, we can simply replace the distribution from the data with a probability distribution derived from our teacher model. However, instead of using a single word prediction, we use q(t | s) to represent the teacher\u2019s sequence distribution over the sample space of all possible sequences,\nLSEQ-KD = \u2212 \u2211 t\u2208T q(t | s) log p(t | s)\nNote that LSEQ-KD is inherently different from LWORD-KD, as the sum is over an exponential number of terms. Despite its intractability, we posit\nthat this sequence-level objective is worthwhile. It gives the teacher the chance to assign probabilities to complete sequences and therefore transfer a broader range of knowledge. We thus consider an approximation of this objective.\nOur simplest approximation is to replace the teacher distribution q with its mode,\nq(t | s) \u223c 1{t = argmax t\u2208T q(t | s)}\nObserving that finding the mode is itself intractable, we use beam search to find an approximation. The loss is then\nLSEQ-KD \u2248 \u2212 \u2211 t\u2208T 1{t = y\u0302} log p(t | s)\n= \u2212 log p(t = y\u0302 | s)\nwhere y\u0302 is now the output from running beam search with the teacher model.\nUsing the mode seems like a poor approximation for the teacher distribution q(t | s), as we are approximating an exponentially-sized distribution with a single sample. However, previous results showing the effectiveness of beam search decoding for NMT lead us to belief that a large portion of q\u2019s mass lies in a single output sequence. In fact, in experiments we find that with beam of size 1, q(y\u0302 | s) (on average) accounts for 1.3% of the distribution for German\u2192 English, and 2.3% for Thai\u2192 English (Table 1: p(t = y\u0302)).5\nTo summarize, sequence-level knowledge distillation suggests to: (1) train a teacher model, (2) run beam search over the training set with this model, (3) train the student network with cross-entropy on this new dataset. Step (3) is identical to the word-level NLL process except now on the newly-generated data set. This is shown in Figure 1 (center).\n5Additionally there are simple ways to better approximate q(t | s). One way would be to consider a K-best list from beam search and renormalizing the probabilities,\nq(t | s) \u223c q(t | s)\u2211 t\u2208TK q(t | s)\nwhere TK is the K-best list from beam search. This would increase the training set by a factor of K. A beam of size 5 captures 2.8% of the distribution for German \u2192 English, and 3.8% for Thai \u2192 English. Another alternative is to use a Monte Carlo estimate and sample from the teacher model (since LSEQ-KD = Et\u223cq(t | s)[\u2212 log p(t | s) ]). However in practice we found the (approximate) mode to work well."}, {"heading": "3.3 Sequence-Level Interpolation", "text": "Next we consider integrating the training data back into the process, such that we train the student model as a mixture of our sequence-level teachergenerated data (LSEQ-KD) with the original training data (LSEQ-NLL),\nL = (1\u2212 \u03b1)LSEQ-NLL + \u03b1LSEQ-KD = \u2212(1\u2212 \u03b1) log p(y | s)\u2212 \u03b1 \u2211 t\u2208T q(t | s) log p(t | s)\nwhere y is the gold target sequence. Since the second term is intractable, we could again apply the mode approximation from the previous section,\nL = \u2212(1\u2212 \u03b1) log p(y | s)\u2212 \u03b1 log p(y\u0302 | s)\nand train on both observed (y) and teachergenerated (y\u0302) data. However, this process is nonideal for two reasons: (1) unlike for standard knowledge distribution, it doubles the size of the training data, and (2) it requires training on both the teachergenerated sequence and the true sequence, conditioned on the same source input. The latter concern is particularly problematic since we observe that y and y\u0302 are often quite different.\nAs an alternative, we propose a single-sequence approximation that is more attractive in this setting. This approach is inspired by local updating (Liang et al., 2006), a method for discriminative training in statistical machine translation (although to our knowledge not for knowledge distillation). Local updating suggests selecting a training sequence which is close to y and has high probability under the teacher model,\ny\u0303 = argmax t\u2208T\nsim(t,y)q(t | s)\nwhere sim is a function measuring closeness (e.g. Jaccard similarity or BLEU (Papineni et al., 2002)). Following local updating, we can approximate this sequence by running beam search and choosing\ny\u0303 \u2248 argmax t\u2208TK sim(t,y)\nwhere TK is the K-best list from beam search. We take sim to be smoothed sentence-level BLEU (Chen and Cherry, 2014).\nWe justify training on y\u0303 from a knowledge distillation perspective with the following generative process: suppose that there is a true target sequence (which we do not observe) that is first generated from the underlying data distributionD. And further suppose that the target sequence that we observe (y) is a noisy version of the unobserved true sequence: i.e. (i) t \u223c D, (ii) y \u223c (t), where (t) is, for example, a noise function that independently replaces each element in t with a random element in V with some small probability.6 In such a case, ideally the student\u2019s distribution should match the mixture distribution,\nDSEQ-Inter \u223c (1\u2212 \u03b1)D + \u03b1q(t | s)\nIn this setting, due to the noise assumption,D now has significant probability mass around a neighborhood of y (not just at y), and therefore the argmax of the mixture distribution is likely something other than y (the observed sequence) or y\u0302 (the output from beam search). We can see that y\u0303 is a natural approximation to the argmax of this mixture distribution between D and q(t | s) for some \u03b1. We illustrate this framework in Figure 1 (right) and visualize the distribution over a real example in Figure 2."}, {"heading": "4 Experimental Setup", "text": "To test out these approaches, we conduct two sets of NMT experiments: high resource (English \u2192 German) and low resource (Thai\u2192 English).\nThe English-German data comes from WMT 2014.7 The training set has 4m sentences and we take newstest2012/newstest2013 as the dev set and newstest2014 as the test set. We keep the top 50k most frequent words, and replace the rest with UNK. The teacher model is a 4 \u00d7 1000 LSTM (as in Luong et al. (2015)) and we train two student models: 2\u00d7 300 and 2\u00d7 500. The Thai-English data comes from IWSLT 2015.8 There are 90k sentences in the\n6While we employ a simple (unrealistic) noise function for illustrative purposes, the generative story is quite plausible if we consider a more elaborate noise function which includes additional sources of noise such as phrase reordering, replacement of words with synonyms, etc. One could view translation having two sources of variance that should be modeled separately: variance due to the source sentence (t \u223c D), and variance due to the individual translator (y \u223c (t)).\n7http://statmt.org/wmt14 8https://sites.google.com/site/iwsltevaluation2015/mt-track\ntraining set and we take 2010/2011/2012 data as the dev set and 2012/2013 as the test set, with a vocabulary size is 25k. Size of the teacher model is 2\u00d7500 (which performed better than 4\u00d71000, 2\u00d7750 models), and the student model is 2\u00d7100. Other training details mirror Luong et al. (2015).\nWe evaluate on tokenized BLEU with multi-bleu.perl, and experiment with the following variations:\nWord-Level Knowledge Distillation (Word-KD) Student is trained on the original data and additionally trained to minimize the cross-entropy of the teacher distribution at the word-level. We tested \u03b1 \u2208 {0.5, 0.9} and found \u03b1 = 0.5 to work better.\nSequence-Level Knowledge Distillation (Seq-KD) Student is trained on the teacher-generated data, which is the result of running beam search and taking the highest-scoring sequence with the teacher model. We use beam size K = 5 (we did not see improvements with a larger beam).\nSequence-Level Interpolation (Seq-Inter) Student is trained on the sequence on the teacher\u2019s beam that had the highest BLEU (beam size K = 35). We\nadopt a fine-tuning approach where we begin training from a pretrained model (either on original data or Seq-KD data) and train with a smaller learning rate (0.1). For English-German we generate SeqInter data on a smaller portion of the training set (\u223c 50%) for efficiency.\nThe above methods are complementary and can be combined with each other. For example, we can train on teacher-generated data but still include a word-level cross-entropy term between the teacher/student (Seq-KD + Word-KD in Table 1), or fine-tune towards Seq-Inter data starting from the baseline model trained on original data (Baseline + Seq-Inter in Table 1).9"}, {"heading": "5 Results and Discussion", "text": "Results of our experiments are shown in Table 1. We find that while word-level knowledge distillation (Word-KD) does improve upon the baseline, sequence-level knowledge distillation (SeqKD) does better on English \u2192 German and performs similarly on Thai \u2192 English. Combining them (Seq-KD + Word-KD) results in further gains for the 2 \u00d7 300 and 2 \u00d7 100 models (although not for the 2 \u00d7 500 model), indicating that these methods provide orthogonal means of transferring knowledge from the teacher to the student: Word-KD is transferring knowledge at the the local (i.e. word) level while Seq-KD is transferring knowledge at the global (i.e. sequence) level.\nSequence-level interpolation (Seq-Inter), in addition to improving models trained via Word-KD and Seq-KD, also improves upon the original teacher model that was trained on the actual data but finetuned towards Seq-Inter data (Baseline + Seq-Inter). In fact, greedy decoding with this fine-tuned model has similar performance (19.6) as beam search with the original model (19.5), allowing for faster decoding even with an identically-sized model.\nWe hypothesize that sequence-level knowledge distillation is effective because it allows the student network to only model relevant parts of the teacher distribution (i.e. around the teacher\u2019s mode) instead of \u2018wasting\u2019 parameters on trying to model the entire\n9For instance, \u2018Seq-KD + Seq-Inter + Word-KD\u2019 in Table 1 means that the model was trained on Seq-KD data and finetuned towards Seq-Inter data with the mixture cross-entropy loss at the word-level.\nspace of translations. Our results suggest that this is indeed the case: the probability mass that SeqKD models assign to the approximate mode is much higher than is the case for baseline models trained on original data (Table 1: p(t = y\u0302)). For example, on English \u2192 German the (approximate) argmax for the 2 \u00d7 500 Seq-KD model (on average) accounts for 16.9% of the total probability mass, while the corresponding number is 0.9% for the baseline. This also explains the success of greedy decoding for Seq-KD models\u2014since we are only modeling around the teacher\u2019s mode, the student\u2019s distribution is more peaked and therefore the argmax is much easier to find. Seq-Inter offers a compromise between the two, with the greedily-decoded sequence accounting for 7.6% of the distribution.\nFinally, although past work has shown that models with lower perplexity generally tend to have\nhigher BLEU, our results indicate that this is not necessarily the case. The perplexity of the baseline 2 \u00d7 500 English\u2192 German model is 8.2 while the perplexity of the corresponding Seq-KD model is 22.7, despite the fact that Seq-KD model does significantly better for both greedy (+4.2 BLEU) and beam search (+1.4 BLEU) decoding."}, {"heading": "5.1 Decoding Speed", "text": "Run-time complexity for beam search grows linearly with beam size. Therefore, the fact that sequencelevel knowledge distillation allows for greedy decoding is significant, with practical implications for running NMT systems across various devices. To test the speed gains, we run the teacher/student models on GPU, CPU, and smartphone, and check the average number of source words translated per second (Table 2). We use a GeForce GTX Titan X for GPU and a Samsung Galaxy 6 smartphone. We find that we can run the student model 10 times faster with greedy decoding than the teacher model with beam search on GPU (1051.3 vs 101.9 words/sec), with similar performance."}, {"heading": "5.2 Weight Pruning", "text": "Although knowledge distillation enables training faster models, the number of parameters for the student models is still somewhat large (Table 1: Params), due to the word embeddings which dominate most of the parameters.10 For example, on the\n10Word embeddings scale linearly while RNN parameters scale quadratically with the dimension size.\n2 \u00d7 500 English \u2192 German model the word embeddings account for approximately 63% (50m out of 84m) of the parameters. The size of word embeddings have little impact on run-time as the word embedding layer is a simple lookup table that only affects the first layer of the model.\nWe therefore focus next on reducing the memory footprint of the student models further through weight pruning. Weight pruning for NMT was recently investigated by See et al. (2016), who found that up to 80 \u2212 90% of the parameters in a large NMT model can be pruned with little loss in performance. We take our best English\u2192 German student model (2\u00d7 500 Seq-KD + Seq-Inter) and prune x% of the parameters by removing the weights with the lowest absolute values. We then retrain the pruned model on Seq-KD data with a learning rate of 0.2 and fine-tune towards Seq-Inter data with a learning rate of 0.1. As observed by See et al. (2016), retraining proved to be crucial. The results are shown in Table 3.\nOur findings suggest that compression benefits achieved through weight pruning and knowledge distillation are orthogonal.11 Pruning 80% of the weight in the 2 \u00d7 500 student model results in a model with 13\u00d7 fewer parameters than the original teacher model with only a decrease of 0.4 BLEU. While pruning 90% of the weights results in a more appreciable decrease of 1.0 BLEU, the model is\n11To our knowledge combining pruning and knowledge distillation has not been investigated before.\ndrastically smaller with 8m parameters, which is 26\u00d7 fewer than the original teacher model."}, {"heading": "5.3 Further Observations", "text": "\u2022 For models trained with word-level knowledge\ndistillation, we also tried regressing the student network\u2019s top-most hidden layer at each time step to the teacher network\u2019s top-most hidden layer as a pretraining step, noting that Romero et al. (2015) obtained improvements with a similar technique on feed-forward models. We found this to give comparable results to standard knowledge distillation and hence did not pursue this further.\n\u2022 There have been promising recent results on eliminating word embeddings completely and obtaining word representations directly from characters with character composition models, which have many fewer parameters than word embedding lookup tables (Ling et al., 2015a; Kim et al., 2016; Ling et al., 2015b; Jozefowicz et al., 2016; Costa-Jussa and Fonollosa, 2016). Combining such methods with knowledge distillation/pruning to further reduce the memory footprint of NMT systems remains an avenue for future work."}, {"heading": "6 Related Work", "text": "Compressing deep learning models is an active area of current research. Pruning methods involve pruning weights or entire neurons/nodes based on some criterion. LeCun et al. (1990) prune weights based on an approximation of the Hessian, while Han et al. (2016) show that a simple magnitude-based pruning works well. Prior work on removing neurons/nodes include Srinivas and Babu (2015) and Mariet and Sra (2016). See et al. (2016) were the first to apply pruning to Neural Machine Translation, observing that that different parts of the architecture (input word embeddings, LSTM matrices, etc.) admit different levels of pruning. Knowledge distillation approaches train a smaller student model to mimic a larger teacher model, by minimizing the loss between the teacher/student predictions (Bucila et al., 2006; Ba and Caruana, 2014; Li et al., 2014; Hinton et al., 2015). Romero et al. (2015) additionally regress on the intermediate hidden layers of the\nstudent/teacher network as a pretraining step, while Mou et al. (2015) obtain smaller word embeddings from a teacher model via regression. There has also been work on transferring knowledge across different network architectures: Chan et al. (2015b) show that a deep non-recurrent neural network can learn from an RNN; Geras et al. (2016) train a CNN to mimic an LSTM for speech recognition. Kuncoro et al. (2016) recently investigated knowledge distillation for structured prediction by having a single parser learn from an ensemble of parsers.\nOther approaches for compression involve low rank factorizations of weight matrices (Denton et al., 2014; Jaderberg et al., 2014; Lu et al., 2016; Prabhavalkar et al., 2016), sparsity-inducing regularizers (Murray and Chiang, 2015), binarization of weights (Courbariaux et al., 2016; Lin et al., 2016), and weight sharing (Chen et al., 2015; Han et al., 2016). Finally, although we have motivated sequence-level knowledge distillation in the context of training a smaller model, there are other techniques that train on a mixture of the model\u2019s predictions and the data, such as local updating (Liang et al., 2006), hope/fear training (Chiang, 2012), SEARN (Daume\u0301 III et al., 2009), DAgger (Ross et al., 2011), and minimum risk training (Och, 2003; Shen et al., 2016)."}, {"heading": "7 Conclusion", "text": "In this work we have investigated existing knowledge distillation methods for NMT (which work at the word-level) and introduced two sequence-level variants of knowledge distillation, which provide improvements over standard word-level knowledge distillation.\nWe have chosen to focus on translation as this domain has generally required the largest capacity deep learning models, but the sequence-to-sequence framework has been successfully applied to a wide range of tasks including parsing (Vinyals et al., 2015a), summarization (Rush et al., 2015), dialogue (Vinyals and Le, 2015; Serban et al., 2016; Li et al., 2016), NER/POS-tagging (Gillick et al., 2016), image captioning (Vinyals et al., 2015b; Xu et al., 2015), video generation (Srivastava et al., 2015), and speech recognition (Chan et al., 2015a). We anticipate that methods described in this paper can be used to similarly train smaller models in other domains."}], "year": 2016, "references": [{"title": "Do Deep Nets Really Need to be Deep", "authors": ["Ba", "Caruana2014] Lei Jimmy Ba", "Rich Caruana"], "venue": "In Proceedings of NIPS", "year": 2014}, {"title": "Neural Machine Translation by Jointly Learning to Align and Translate", "authors": ["Kyunghyun Cho", "Yoshua Bengio"], "venue": "In Proceedings of ICLR", "year": 2015}, {"title": "Listen, Attend and Spell", "authors": ["Chan et al.2015a] William Chan", "Navdeep Jaitly", "Quoc Le", "Oriol Vinyals"], "year": 2015}, {"title": "Transfering Knowledge from a RNN to a DNN", "authors": ["Chan et al.2015b] William Chan", "Nan Rosemary Ke", "Ian Laner"], "year": 2015}, {"title": "A Systematic Comparison of Smoothing Techniques for Sentence-Level BLEU", "authors": ["Chen", "Cherry2014] Boxing Chen", "Colin Cherry"], "year": 2014}, {"title": "Compressing Neural Networks with the Hashing Trick", "authors": ["Chen et al.2015] Wenlin Chen", "James T. Wilson", "Stephen Tyree", "Kilian Q. Weinberger", "Yixin Chen"], "venue": "Proceedings of ICML", "year": 2015}, {"title": "Hope and Fear for Discriminative Training of Statistical Translation Models", "authors": ["David Chiang"], "venue": "In JMLR", "year": 2012}, {"title": "Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation", "authors": ["Cho et al.2014] Kyunghyun Cho", "Bart van Merrienboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio"], "year": 2014}, {"title": "Character-based Neural Machine Translation", "authors": ["Costa-Jussa", "Jose A.R. Fonollosa"], "year": 2016}, {"title": "Binarized Neural Networks: Training Neural Networks with Weights and Activations Constrained", "authors": ["Itay Hubara", "Daniel Soudry", "Ran El-Yaniv", "Yoshua Bengio"], "year": 2016}, {"title": "Search-based Structured Prediction", "authors": ["John Langford", "Daniel Marcu"], "venue": "Machine Learning", "year": 2009}, {"title": "Predicting Parameters in Deep Learning", "authors": ["Denil et al.2013] Misha Denil", "Babak Shakibi", "Laurent Dinh", "Marc\u2019Aurelio Ranzato", "Nando de Freitas"], "venue": "In Proceedings of NIPS", "year": 2013}, {"title": "Blending LSTMs into CNNs", "authors": ["Abdel rahman Mohamed", "Rich Caruana", "Gregor Urban", "Shengjie Wang", "Ozlem Aslan", "Matthai Philipose", "Matthew Richardson", "Charles Sutton"], "venue": "Proceedings of ICLR Workshop", "year": 2016}, {"title": "Multilingual Language Processing from Bytes", "authors": ["Gillick et al.2016] Dan Gillick", "Cliff Brunk", "Oriol Vinyals", "Amarnag Subramanya"], "venue": "In Proceedings of NAACL", "year": 2016}, {"title": "Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding", "authors": ["Han et al.2016] Song Han", "Huizi Mao", "William J. Dally"], "venue": "Proceedings of ICLR", "year": 2016}, {"title": "Reshaping Deep Neural Network for Fast Decoding by Node-Pruning", "authors": ["He et al.2014] Tianxing He", "Yuchen Fan", "Yanmin Qian", "Tian Tan", "Kai Yu"], "venue": "Proceedings of ICASSP", "year": 2014}, {"title": "Distilling the Knowledge in a Neural Network", "authors": ["Oriol Vinyals", "Jeff Dean"], "year": 2015}, {"title": "Speeding up Convolutional Neural Networks with Low Rank Expansions", "authors": ["Andrea Vedaldi", "Andrew Zisserman"], "venue": "BMCV", "year": 2014}, {"title": "Exploring the Limits of Language Modeling", "authors": ["Oriol Vinyals", "Mike Schuster", "Noam Shazeer", "Yonghui Wu"], "year": 2016}, {"title": "Recurrent Continuous Translation Models", "authors": ["Kalchbrenner", "Blunsom2013] Nal Kalchbrenner", "Phil Blunsom"], "venue": "In Proceedings of EMNLP", "year": 2013}, {"title": "Character-Aware Neural Language Models", "authors": ["Kim et al.2016] Yoon Kim", "Yacine Jernite", "David Sontag", "Alexander M. Rush"], "venue": "In Proceedings of AAAI", "year": 2016}, {"title": "Distilling an Ensemble of Greedy Dependency Parsers into One MST Parser", "authors": ["Miguel Ballesteros", "Lingpeng Kong", "Chris Dyer", "Noah A. Smith"], "venue": "Proceedings of EMNLP", "year": 2016}, {"title": "Optimal Brain Damage", "authors": ["LeCun et al.1990] Yann LeCun", "John S. Denker", "Sara A. Solla"], "venue": "In Proceedings of NIPS", "year": 1990}, {"title": "Learning Small-Size DNN with Output-Distribution-Based Criteria", "authors": ["Li et al.2014] Jinyu Li", "Rui Zhao", "Jui-Ting Huang", "Yifan Gong"], "venue": "In Proceedings of INTERSPEECH", "year": 2014}, {"title": "A DiversityPromoting Objective Function for Neural Conversational Models", "authors": ["Li et al.2016] Jiwei Li", "Michael Galley", "Chris Brockett", "Jianfeg Gao", "Bill Dolan"], "venue": "In Proceedings of NAACL 2016", "year": 2016}, {"title": "An End-toEnd Discriminative Approach to Machine Translation", "authors": ["Liang et al.2006] Percy Liang", "Alexandre BouchardCote", "Dan Klein", "Ben Taskar"], "venue": "In Proceedings of COLING-ACL", "year": 2006}, {"title": "Neural Networks with Few Multiplications", "authors": ["Lin et al.2016] Zhouhan Lin", "Matthieu Coubariaux", "Roland Memisevic", "Yoshua Bengio"], "venue": "In Proceedings of ICLR", "year": 2016}, {"title": "Finding Function in Form: Composition Character Models for Open Vocabulary Word Representation", "authors": ["Ling et al.2015a] Wang Ling", "Tiago Lui", "Luis Marujo", "Ramon Fernandez Astudillo", "Silvio Amir", "Chris Dyer", "Alan W Black", "Isabel Trancoso"], "year": 2015}, {"title": "Learning Compact Recurrent Neural Networks", "authors": ["Lu et al.2016] Zhiyun Lu", "Vikas Sindhwani", "Tara N. Sainath"], "venue": "In Proceedings of ICASSP", "year": 2016}, {"title": "Effective Approaches to Attention-based Neural Machine Translation", "authors": ["Hieu Pham", "Christopher D. Manning"], "venue": "In Proceedings of EMNLP", "year": 2015}, {"title": "Distilling Word Embeddings: An Encoding Approach. arXiv:1506.04488", "authors": ["Mou et al.2015] Lili Mou", "Ge Li", "Yan Xu", "Lu Zhang", "Zhi Jin"], "year": 2015}, {"title": "Auto-sizing Neural Networks: With Applications to N-Gram Language Models", "authors": ["Murray", "Chiang2015] Kenton Murray", "David Chiang"], "venue": "In Proceedings of EMNLP", "year": 2015}, {"title": "Minimum Error Rate Training in Statistical Machine Translation", "authors": ["Franz J. Och"], "venue": "In Proceedings of ACL", "year": 2003}, {"title": "BLEU: A Method for Automatic Evaluation of Machine Translation", "authors": ["Slim Roukos", "Todd Ward", "Wei-Jing Zhu"], "venue": "In Proceedings of ICML", "year": 2002}, {"title": "On the Compression of Recurrent Neural Networks with an Application to LVCSR Acoustic Modeling for Embedded Speech Recognition", "authors": ["Ouais Alsharif", "Antoine Bruguier", "Ian McGraw"], "year": 2016}, {"title": "FitNets: Hints for Thin Deep Nets", "authors": ["Nicolas Ballas", "Samira Ebrahimi Kahou", "Antoine Chassang", "Carlo Gatta", "Yoshua Bengio"], "venue": "Proceedings of ICLR", "year": 2015}, {"title": "A Reduction of Imitation Learning and Structured Prediction to No-Regret Online Learning", "authors": ["Ross et al.2011] Stephane Ross", "Geoffrey J. Gordon", "Drew Bagnell"], "venue": "Proceedings of AISTATS", "year": 2011}, {"title": "A Neural Attention Model for Abstractive Sentence Summarization", "authors": ["Sumit Chopra", "Jason Weston"], "venue": "In Proceedings of EMNLP", "year": 2015}, {"title": "Compression of Neural Machine Translation via Pruning", "authors": ["See et al.2016] Abigail See", "Minh-Thang Luong", "Christopher D. Manning"], "venue": "In Proceedings of CoNLL", "year": 2016}, {"title": "Building End-to-End Dialogue Systems Using Generative Hierarchical Neural Network Models", "authors": ["Allesandro Sordoni", "Yoshua Bengio", "Aaron Courville", "Joelle Pineau"], "venue": "Proceedings of AAAI", "year": 2016}, {"title": "Minimum Risk Training for Neural Machine Translation", "authors": ["Shen et al.2016] Shiqi Shen", "Yong Cheng", "Zhongjun He", "Wei He", "Hua Wu", "Masong Sun", "Yang Liu"], "venue": "Proceedings of ACL", "year": 2016}, {"title": "Data-free Parameter Pruning for Deep Neural Networks", "authors": ["Srinivas", "Babu2015] Suraj Srinivas", "R. Venkatesh Babu"], "year": 2015}, {"title": "Unsupervised Learning of Video Representations using LSTMs", "authors": ["Elman Mansimov", "Ruslan Salakhutdinov"], "venue": "Proceedings of ICML", "year": 2015}, {"title": "Sequence to Sequence Learning with Neural Networks", "authors": ["Oriol Vinyals", "Quoc Le"], "venue": "In Proceedings of NIPS", "year": 2014}, {"title": "2015a. Grammar as a Foreign Language", "authors": ["Lukasz Kaiser", "Terry Koo", "Slave Petrov", "Ilya Sutskever", "Geoffrey Hinton"], "venue": "In Proceedings of NIPS", "year": 2015}, {"title": "2015b. Show and Tell: A Neural Image Caption Generator", "authors": ["Alexander Toshev", "Samy Bengio", "Dumitru Erhan"], "venue": "In Proceedings of CVPR", "year": 2015}, {"title": "Show, Attend and Tell: Neural Image Caption Generation with Visual Attention", "authors": ["Xu et al.2015] Kelvin Xu", "Jimma Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhutdinov", "Richard Zemel", "Yoshua Bengio"], "venue": "Proceedings of ICML", "year": 2015}, {"title": "Deep Recurrent Models with Fast-Forward Connections for Neural Machine Translation", "authors": ["Zhou et al.2016] Jie Zhou", "Ying Cao", "Xuguang Wang", "Peng Li", "Wei Xu"], "venue": "Proceedings of TACL", "year": 2016}], "id": "SP:f10e5d0854e3262d2b4f31cb4b419cdb08d76bd0", "authors": [{"name": "Yoon Kim", "affiliations": []}, {"name": "Alexander M. Rush", "affiliations": []}], "abstractText": "Neural machine translation (NMT) offers a novel alternative formulation of translation that is potentially simpler than statistical approaches. However to reach competitive performance, NMT models need to be exceedingly large. In this paper we consider applying knowledge distillation approaches (Bucila et al., 2006; Hinton et al., 2015) that have proven successful for reducing the size of neural models in other domains to the problem of NMT. We demonstrate that standard knowledge distillation applied to word-level prediction can be effective for NMT, and also introduce two novel sequence-level versions of knowledge distillation that further improve performance, and somewhat surprisingly, seem to eliminate the need for beam search (even when applied on the original teacher model). Our best student model runs 10 times faster than its state-of-the-art teacher with little loss in performance. It is also significantly better than a baseline model trained without knowledge distillation: by 4.2/1.7 BLEU with greedy decoding/beam search. Applying weight pruning on top of knowledge distillation results in a student model that has 13\u00d7 fewer parameters than the original teacher model, with a decrease of 0.4 BLEU.", "title": "Sequence-Level Knowledge Distillation"}