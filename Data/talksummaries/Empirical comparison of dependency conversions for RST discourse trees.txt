0	34	Recent years have seen an increase in the use of dependency representations throughout various NLP applications.
1	27	For the discourse analysis of texts, dependency graph representations have also been studied by many researchers (Prasad et al., 2008; Muller et al., 2012; Hirao et al., 2013; Li et al., 2014).
2	30	In particular, Hirao et al. (2013) proposed a current state-of-the-art text summarization method based on trimming discourse dependency trees (DDTs).
10	6	By investigating the complexity of their structures from the dependency graph theoretic point of view (Kuhlmann and Nivre, 2006), we prove that the Hirao13 method, which keeps the semantic equivalence of multinuclear discourse units in the dependency structures, introduces much more complex DDTs than Li14, while a simple post-editing method greatly reduces the complexity of DDTs.
11	5	This paper also compares the methods with both intrinsic and extrinsic evaluations: (1) Which dependency structures are analyzed more accurately by automatic parsers?
13	10	We show from experimental results that even though the Hirao13 DDT format reduces performance, as measured by intrinsic evaluations, it is more useful for text summarization.
14	35	While researchers developing discourse syntactic parsing (Soricut and Marcu, 2003; Hernault et al., 2010; Feng and Hirst, 2012; Joty et al., 2013; Li et al., 2014) have focused excessively on improving accuracies, our experimental results emphasize the importance of extrinsic evaluations since the more accurate parser does not always lead to better performance of textbased applications.
31	22	RST represents a discourse as a tree structure.
32	5	The leaves of an RST discourse tree (RST-DT) correspond to Elementary Discourse Units (EDUs).
39	4	where each subscript at the end of square brackets [] corresponds to a leaf unit (EDU) in the tree.
40	20	EDUs grouped by {} consist of a sentence that is labeled with its index in the text.
41	13	Each discourse unit in the tree that forms a rhetorical relation is characterized by a rhetorical status: Nucleus (N), which represents the most essential piece of information in the relation, or Satellite (S), which indicates the supporting information.
43	25	Mononuclear relations hold between two units with Nucleus and Satellite, whereas multinuclear relations hold among two or more units with Nucleus.
45	24	Rhetorical relations can be grouped into classes that share such rhetorical meaning as “Elaboration” and “Condition”.
46	13	In Figure 1, the Satellite unit (covering e-3) and its sibling Nucleus unit (covering e-4) are linked by a mononuclear relation with rhetorical label “Condition”, and two Nucleus units (covering e-5, e-6 and e-7, e-8, e-9) are linked by a multinuclear relation with rhetorical label “Temporal”.
47	60	Next, this paper discusses text-level dependency syntax, which represents grammatical structure by head-dependent binary relations between EDUs.
48	57	This section introduces two existing automatic conversion methods from RST-DTs to DDTs: the methods of Li et al. (2014) and Hirao et al. (2013).
49	5	Additionally, this paper presents a simple postediting method to reduce the complexity of DDTs.
50	61	The heart of these conversions closely resembles that of constituent-to-dependency conversions for English sentences (Yamada andMatsumoto, 2003; Johansson and Nugues, 2007; De Marneffe and Manning, 2008), since RST-DTs can be regarded Algorithm 1 convert-rst-into-dep Require: RST discourse tree: rst-dt Ensure: discourse dependency tree: ddt 1: ddt ← /0 2: for all EDU e- j in rst-dt do 3: P ← { find-My-Top-Node(e- j) // Li14 find-Nearest-S-Ancestor(e- j) // Hirao13 4: if isRoot(P) = TRUE then 5: ℓ← Root 6: i ← 0 7: else 8: ℓ← Label(P) 9: P′ ← Parent(P) 10: i ← find-Head-EDU(P′) 11: end if 12: j ← Index(e- j) 13: ddt ← ddt ∪ (i, ℓ, j) 14: end for 15: Return ddt Algorithm 2 find-My-Top-Node(e) Require: EDU: e Ensure: C 1: C ← e 2: P ← Parent(e) 3: while LeftmostNucleusChild(P) = C and isRoot(P) = FALSE do 4: C ← P 5: P ← Parent(P) 6: end while 7: if isRoot(P) = TRUE then 8: C ← P 9: end if 10: Return C as Penn Treebank-style constituent trees because EDUs and discourse units respectively correspond to terminal and non-terminal nodes, and a rhetorical relation, like a CFG-rule, forms an edge in the tree.
57	6	In Algorithm 1, the main routine iteratively processes every EDU in given RST-DT t to directly find its single head rather than transforming head-annotated trees into DDTs.
59	10	Algorithm 1 calls Algorithm 2 at line 3, which finds the highest non-terminal node in t to which current processed EDU e- j must be assigned as the head in Sagae’s lexicalization manner.
63	9	Then Algorithm 1 at line 10 calls Algorithm 3, which iteratively seeks the leftmost child node with the Nucleus in a top-down manner, starting from P′, until it reaches terminal node e-i.
70	16	The DDT in Figure 2 is produced by this method for the RST-DT in Figure 1.
72	6	Li’s dependency format is always projective, i.e., when all the edges are drawn in the half-plane above the text, no two edges cross (Kübler et al., 2009).
76	11	Assuming that e- j is the e-7 in Figure 1, Algorithm 4 returns the ‘S:Elaboration’ node (covering e-5, e-6, e-7, e-8, e-9, e-10, .
80	33	Figure 3 represents the DDT produced by Hirao’s method for the RST-DT in Figure 1.
81	47	Note that unlike Li’s method, Hirao’s dependency format is not always projective.
82	70	The dependency edges made from the mononuclear relations are the same as those in Figure 2, but the difference comes from the treatment of the multinuclear relations.
84	141	The Li14 DDT format links them with a “parentchild” relation, while in the Hirao13 DDT format, they have a “sibling” relation.
85	29	Unlike Li’s method, the dependency structures produced by Hirao’s method often lose the singlerooted tree structure of a sentence since Algorithm 4 has no constraints that restrict the EDUs covered by multinuclear relations to find its head outside the sentence.
