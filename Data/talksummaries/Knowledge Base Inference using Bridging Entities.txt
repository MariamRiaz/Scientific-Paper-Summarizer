0	53	Large-scale knowledge bases (KB) like Freebase (Bollacker et al., 2008), Yago (Suchanek et al., 2007), NELL (Mitchell et al., 2015) can be useful in a variety of applications like natural language question answering, semantic search engines, etc.
1	23	These knowledge bases consist of millions of real world entities and relationships between them which are stored in the form of a directed graph where links represent relations and nodes represent the entities.
2	28	Although such KBs contain millions of entities, they are still very sparse, i.e., they are missing a large number of relations between existing entities (West et al., 2014).
3	14	Performing inference over the knowledge graph for predicting relations between two entities is one way of densifying the KB graph.
5	8	The Path Ranking Algorithm (PRA) (Lao and Cohen, 2010), (Lao et al., 2011) performs such an inference by learning inference rules over the knowledge graph.
6	5	If the knowledge graph is sparse, i.e., if there are a very few or no paths between source and target entities, then PRA is unable to predict the existence of a relation.
51	5	This is done for all n ≤ dmax− 1, where dmax is the maximum depth of DFS.
59	12	The DFS is said to discover a path if the terminating entity of the path matches any alias of the target entity.
69	9	To avoid overfitting we add negative data to the training set.
72	153	Low quality bridging entities connect source target pairs from both positive and negative training sets, and hence are eliminated by the sparse logistic regression classifier.
73	13	The negative dataset is generated using the closed world assumption by performing a random walk.
74	41	After augmenting the KB, we run the training phase of the PRA algorithm to obtain the feature (path) weights computed by the logistic regression classifier.
75	61	Query Time: The set of target entities corresponding to a source entity and the relation being predicted is not available during query (test) time.
77	9	For example, if the relation is riverFlowsThroughCity, the candidate target set would include entities in the KB that are cities.
79	14	Any path (along with bridging entities) found during this search are added to the KB, and the PRA algorithm is now run over this augmented graph.
80	19	We used the implementation of PRA provided by the authors of (Gardner et al., 2014).
82	24	The augmentation resulted in the addition of 1086 paths during training and 1430 paths during test time.
83	4	We split the NELL data into 60% training data, 15 % development data and 25% test data.
87	37	This is because the parameters were reported to be robust, and seemed to work well even when the knowledge base was augmented.
88	12	We compare the results (PRA-ODA) with the PRA algorithm executed on the NELL KB, NELL KB augmented with surface relations (PRA-SVO) (Gardner et al., 2013) and vector space random walk PRA (PRA-VS) (Gardner et al., 2014).
89	32	The run times, i.e, the time taken to perform an entire experiment for PRA-SVO and PRA-VS includes the time taken to augment NELL KB with SVO edges.
90	78	The PRA-VS runtime also includes the time taken for generating embeddings to perform the vector space random walk.
93	14	We note that the batch augmentation in case of PRA-SVO and PRA-VS, and embedding computation in case of PRA-VS are all specific to the relations in the evaluation set, and hence can’t be ignored as a one-time offline cost.
94	10	In other words, these costs are likely to increase as more relations (and their instances) are included during training and testing.
95	72	Runtime gains with PRA-ODA are likely to be even more pronounced in such settings.
96	7	An additional advantage of the proposed algorithm is that it can also be run on the top of any PRA based algorithm such as the PRA-SVO and PRA-VS.
97	60	In this paper, we investigated the usefulness of adding paths to a Knowledge Base for improving its connectivity by mining bridging entities from an external corpus.
98	31	While previous KB augmentation methods focused only on augmentation using mined surface verbs while keeping the node set fixed, we extended these approaches by also adding bridging entities in an online fashion.
99	65	We used a large corpus of 500 million web text corpus to mine these additional edges and bridging entities.
100	78	Through experiments on real-world datasets, we demonstrate that the proposed approach is not only comparable or better than other state-of-theart baselines, but more importantly provides faster overall runtime compared with the alternatives.
