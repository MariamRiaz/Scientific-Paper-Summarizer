0	28	Greibach normal form (GNF; Greibach, 1965) is an important construction in formal language theory which allows every context-free grammar (CFG) to be rewritten so that the first character of each rule is a terminal symbol.
1	55	A grammar in GNF is said to be prefix lexicalized, because the prefix of every production is a lexical item.
2	28	GNF has a variety of theoretical and practical applications, including for example the proofs of the famous theorems due to Shamir and Chomsky-Schützenberger (Shamir, 1967; Chomsky and Schützenberger, 1963; Autebert et al., 1997).
4	84	By using prefix lexicalized synchronous context-free grammars (SCFGs), Watanabe et al. (2006) and Siahbani et al. (2013) obtain asymptotic and empirical speed improvements on a machine translation task.
7	34	This work investigates the formal properties of prefix lexicalized synchronous grammars as employed by Watanabe et al. (2006) and Siahbani et al. (2013), which have received little theoretical attention compared to non-synchronous prefix lexicalized grammars.
9	72	Our main result is that there is a method for prefix lexicalizing an SCFG by converting it to an equivalent grammar in a different formalism, namely synchronous tree-adjoining grammar (STAG) in regular form.
19	35	A completed derivation represents a string pair generated by the grammar.
28	37	Following Siahbani et al. (2013), we refer to the left half of a synchronous production as the source side, and the right half as the target side; this terminology captures the intuition that synchronous grammars model translational equivalence between a source phrase and its translation into a target language.
30	14	We call a grammar ε-free if it contains no productions whose source or target side produces only the empty string ε.
33	31	Formally, this means that every synchronous rule in a prefix lexicalized SCFG (PL-SCFG) is of the form (5) 〈A1 → α1, A2 → aα2〉 whereA1, A2 ∈ N , α1, α2 ∈ (N∪Σ)∗ and a ∈ Σ.
51	70	We provide a constructive method for prefix lexicalizing the target side of G. We begin by constructing an intermediate grammar GXA for each pair of nonterminals X,A ∈ N \ {S}.
52	15	For each pair X,A ∈ N \ {S}, GXA will be constructed to generate the language of sentential forms derivable from 〈X 1 , A 1 〉 via a target-side terminal leftmost derivation (TTLD).
60	29	As a special case, if Y = Z we collapse the root node and adjunction site to produce a tree pair of the following form: (9) 〈 ZXA 1 α1ZXA ∗ β1 , CXA α2BXA ↓ 1 〉 • For each rule in G of the form 〈X → α1Y 1 β1, A→ C 1 α2〉, Y,C ∈ N , αi, βi ∈ (N ∪ Σ)∗, we add a tree pair of the form in Figure 3(d).
84	28	For each rule 〈A1 → α1, A2 → α2〉, where Ai ∈ N , αi ∈ (N ∪ Σ)∗, create a tree pair of the form (14) 〈 A1 α1 , A2 α2 〉 where each pair of linked nonterminals in the original rule become a pair of linked substitution sites in the tree pair.
85	17	The terminal and nonterminal alphabets and start symbol are unchanged.
86	76	For all X,A ∈ N \ {S}, add all of the tree pairs from the intermediate grammar GXA to the new grammar H .
100	15	Observe that, by construction, for all X,A ∈ N every target tree rooted in SXA is prefix lexicalized.
101	23	Thus the trees created in step 4 are all prefix lexicalized variants of non-lexicalized tree pairs; steps 5–6 then remove the non-lexicalized trees from the grammar.
114	40	We also show the percentage of productions which are already prefix lexicalized in G. ated by linked nonterminals in the original grammar will still be generated by linked nonterminals in the final grammar, so no reordering information is lost or added.6 This result holds despite the fact that our transformation is only applicable to chainfree grammars: chain rules cannot introduce any reorderings, since by definition they involve only a single pair of linked nonterminals.
115	36	Grammar Rank If the input SCFG G has rank k, then the STAG H produced by our transformation has rank at most 2k.
116	20	To see this, observe that the construction of the intermediate grammars increases the rank by at most 1 (see Figure 3(b)).
117	57	When a prefix lexicalized tree is substituted at the left edge of a non-lexicalized tree, the link on the substitution site will be consumed, but up to k+ 1 new links will be introduced by the substituting tree, so that the final tree will have rank at most 2k.
123	57	Parse Complexity Because the grammar produced is in regular form, each side can be parsed in time O(n3) (Rogers, 1994), for an overall parse complexity of O(n3k), where n is sentence length and k is the grammar rank.
125	47	Table 1 shows the actual size increase on a variety of grammars: here |G| is the size of the initial grammar, |H| is the size after applying our transformation, and the increase is expressed as a power of the original grammar size.
131	54	We find that the worst case size increase occurs when 50% of the original grammar is already prefix lexicalized.
132	20	This is because the size increase depends on both the number of prefix lexicalized trees in the intermediate grammars (which grows with the proportion of lexicalized rules) and the number of productions which need to be lexicalized (which shrinks as the proportion of prefix lexicalized rules increases).
144	18	This highlights the need for future work to examine the generative power of rank-k PL-RSTAG relative to rankk SCFG in the interest of reducing the rank of the transformed grammar.
159	32	We have demonstrated a method for prefix lexicalizing an SCFG by converting it to an equivalent STAG.
160	79	Like the original GNF transformation for CFGs our construction at most cubes the grammar size, though when applied to the kinds of synchronous grammars used in machine translation the size is merely squared.
161	25	Our transformation preserves all of the alignments generated by SCFG, and retains properties such as O(n3k) parsing complexity for grammars of rank k. We plan to verify whether rank-k PL-RSTAG is more powerful than rank-k SCFG in future work, and to reduce the rank of the transformed grammar if possible.
