{"sections": [{"heading": "1 Introduction", "text": "Greedy transition-based dependency parsers (Nivre, 2008) incrementally process an input sentence from left to right. These parsers are very fast and provide competitive parsing accuracies (Nivre et al., 2007). However, greedy transition-based parsers still fall behind search-based parsers (Zhang and Clark, 2008; Huang and Sagae, 2010) with respect to accuracy.\nThe training of transition-based parsers relies on a component called the parsing oracle, which maps parser configurations to optimal transitions with respect to a gold tree. A discriminative model is then trained to simulate the oracle\u2019s behavior. A parsing oracle is deterministic if it returns a single canonical transition. Furthermore, an oracle is partial if it is defined only for configurations that can reach the gold tree, that is, configurations representing parsing histories with no mistake. Oracles that are both deterministic and partial are called static. Traditionally, only static oracles have been exploited in training of transition-based parsers.\nRecently, Goldberg and Nivre (2012; 2013) showed that the accuracy of greedy parsers can be substantially improved without affecting their parsing speed. This improvement relies on the introduction of novel oracles that are nondeterministic\nand complete. An oracle is nondeterministic if it returns the set of all transitions that are optimal with respect to the gold tree, and it is complete if it is well-defined and correct for every configuration that is reachable by the parser. Oracles that are both nondeterministic and complete are called dynamic.\nGoldberg and Nivre (2013) develop dynamic oracles for several transition-based parsers. The construction of these oracles is based on a property of transition-based parsers that they call arc decomposition. They also prove that the popular arc-standard system (Nivre, 2004) is not arc-decomposable, and they leave as an open research question the construction of a dynamic oracle for the arc-standard system. In this article, we develop one such oracle (\u00a74) and prove its correctness (\u00a75).\nAn extension to the arc-standard parser was presented by Sartorio et al. (2013), which relaxes the bottom-up construction order and allows mixing of bottom-up and top-down strategies. This parser, called here the LR-spine parser, achieves state-ofthe-art results for greedy parsing. Like the arc-standard system, the LR-spine parser is not arc-decomposable, and a dynamic oracle for this system was not known. We extend our oracle for the arc-standard system to work for the LR-spine system as well (\u00a76).\nThe dynamic oracles developed by Goldberg and Nivre (2013) for arc-decomposable systems are based on local properties of computations. In contrast, our novel dynamic oracle algorithms rely on arguably more complex structural properties of computations, which are computed through dynamic programming. This leaves open the question of whether a machine-learning model can learn to effectively simulate such complex processes: will the\n119\nTransactions of the Association for Computational Linguistics, 2 (2014) 119\u2013130. Action Editor: Ryan McDonald. Submitted 11/2013; Revised 2/2014; Published 4/2014. c\u00a92014 Association for Computational Linguistics.\nbenefit of training with the dynamic oracle carry over to the arc-standard and LR-spine systems? We show experimentally that this is indeed the case (\u00a78), and that using the training-with-exploration method of (Goldberg and Nivre, 2013) with our dynamic programming based oracles yields superior parsing accuracies on many languages."}, {"heading": "2 Arc-Standard Parser", "text": "In this section we introduce the arc-standard parser of Nivre (2004), which is the model that we use in this article. To keep the notation at a simple level, we only discuss the unlabeled version of the parser; however, a labeled extension is used in \u00a78 for our experiments."}, {"heading": "2.1 Preliminaries and Notation", "text": "The set of non-negative integers is denoted as N0. For i, j \u2208 N0 with i \u2264 j, we write [i, j] to denote the set {i, i + 1, . . . , j}. When i > j, [i, j] denotes the empty set.\nWe represent an input sentence as a string w = w0 \u00b7 \u00b7 \u00b7wn, n \u2208 N0, where token w0 is a special root symbol, and each wi with i \u2208 [1, n] is a lexical token. For i, j \u2208 [0, n] with i \u2264 j, we write w[i, j] to denote the substring wiwi+1 \u00b7 \u00b7 \u00b7wj of w.\nWe write i \u2192 j to denote a grammatical dependency of some unspecified type between lexical tokens wi and wj , where wi is the head and wj is the dependent. A dependency tree for w is a directed, ordered tree t = (Vw, A), such that Vw = [0, n] is the set of nodes, A \u2286 Vw\u00d7Vw is the set of arcs, and node 0 is the root. Arc (i, j) encodes a dependency i \u2192 j, and we will often use the latter notation to denote arcs."}, {"heading": "2.2 Transition-Based Dependency Parsing", "text": "We assume the reader is familiar with the formal framework of transition-based dependency parsing originally introduced by Nivre (2003); see Nivre (2008) for an introduction. We only summarize here our notation.\nTransition-based dependency parsers use a stack data structure, where each stack element is associated with a tree spanning (generating) some substring of the input w. The parser processes the input string incrementally, from left to right, applying at each step a transition that updates the stack and/or\nconsumes one token from the input. Transitions may also construct new dependencies, which are added to the current configuration of the parser.\nWe represent the stack data structure as an ordered sequence \u03c3 = [\u03c3d, . . . , \u03c31], d \u2208 N0, of nodes \u03c3i \u2208 Vw, with the topmost element placed at the right. When d = 0, we have the empty stack \u03c3 = []. Sometimes we use the vertical bar to denote the append operator for \u03c3, and write \u03c3 = \u03c3\u2032|\u03c31 to indicate that \u03c31 is the topmost element of \u03c3.\nThe parser also uses a buffer to store the portion of the input string still to be processed. We represent the buffer as an ordered sequence \u03b2 = [i, . . . , n] of nodes from Vw, with i the first element of the buffer. In this way \u03b2 always encodes a (non-necessarily proper) suffix of w. We denote the empty buffer as \u03b2 = []. Sometimes we use the vertical bar to denote the append operator for \u03b2, and write \u03b2 = i|\u03b2\u2032 to indicate that i is the first token of \u03b2; consequently, we have \u03b2\u2032 = [i+ 1, . . . , n].\nWhen processing w, the parser reaches several states, technically called configurations. A configuration of the parser relative to w is a triple c = (\u03c3, \u03b2,A), where \u03c3 and \u03b2 are a stack and a buffer, respectively, and A \u2286 Vw \u00d7 Vw is a set of arcs. The initial configuration for w is ([], [0, . . . , n], \u2205). For the purpose of this article, a configuration is final if it has the form ([0], [], A), and in a final configuration arc set A always defines a dependency tree for w.\nThe core of a transition-based parser is the set of its transitions, which are specific to each family of parsers. A transition is a binary relation defined over the set of configurations of the parser. We use symbol ` to denote the union of all transition relations of a parser.\nA computation of the parser on w is a sequence c0, . . . , cm, m \u2208 N0, of configurations (defined relative to w) such that ci\u22121 ` ci for each i \u2208 [1,m]. We also use the reflexive and transitive closure relation `\u2217 to represent computations. A computation is called complete whenever c0 is initial and cm is final. In this way, a complete computation is uniquely associated with a dependency tree for w."}, {"heading": "2.3 Arc-Standard Parser", "text": "The arc-standard model uses the three types of transitions formally specified in Figure 1\n(\u03c3, i|\u03b2,A) `sh (\u03c3|i, \u03b2, A) (\u03c3|i|j, \u03b2,A) `la (\u03c3|j, \u03b2,A \u222a {j \u2192 i}) (\u03c3|i|j, \u03b2,A) `ra (\u03c3|i, \u03b2, A \u222a {i\u2192 j})\nNotation We sometimes use the functional notation for a transition \u03c4 \u2208 {sh, la, ra}, and write \u03c4(c) = c\u2032 in place of c `\u03c4 c\u2032. Naturally, sh applies only when the buffer is not empty, and la,ra require two elements on the stack. We denote by valid(c) the set of valid transitions in a given configuration."}, {"heading": "2.4 Arc Decomposition", "text": "Goldberg and Nivre (2013) show how to derive dynamic oracles for any transition-based parser which has the arc decomposition property, defined below. They also show that the arc-standard parser is not arc-decomposable.\nFor a configuration c, we write Ac to denote the associated set of arcs. A transition-based parser is arc-decomposable if, for every configuration c and for every set of arcs A that can be extended to a projective tree, we have\n\u2200(i\u2192 j) \u2208 A,\u2203c\u2032[c `\u2217 c\u2032 \u2227 (i\u2192 j) \u2208 Ac\u2032 ] \u21d2 \u2203c\u2032\u2032[c `\u2217 c\u2032\u2032 \u2227A \u2286 Ac\u2032\u2032 ] .\nIn words, if each arc in A is individually derivable from c, then the set A in its entirety can be derived from c as well. The arc decomposition property is useful for deriving dynamic oracles because it is relatively easy to investigate derivability for single arcs and then, using this property, draw conclusions about the number of gold-arcs that are simultaneously derivable from the given configuration.\nUnfortunately, the arc-standard parser is not arcdecomposable. To see why, consider a configuration with stack \u03c3 = [i, j, k]. Consider also arc set A = {(i, j), (i, k)}. The arc (i, j) can be derived through the transition sequence ra, ra, and the arc (i, k) can be derived through the alternative transition sequence la, ra. Yet, it is easy to see that a configuration containing both arcs cannot be reached.\nAs we cannot rely on the arc decomposition property, in order to derive a dynamic oracle for the arcstandard model we need to develop more sophisticated techniques which take into account the interaction among the applied transitions."}, {"heading": "3 Configuration Loss and Dynamic Oracles", "text": "We aim to derive a dynamic oracle for the arc-standard (and related) system. This is a function that takes a configuration c and a gold tree tG and returns a set of transitions that are \u201coptimal\u201d for c with respect to tG. As already mentioned in the introduction, a dynamic oracle can be used to improve training of greedy transition-based parsers. In this section we provide a formal definition for a dynamic oracle.\nLet t1 and t2 be two dependency trees over the same stringw, with arc setsA1 andA2, respectively. We define the loss of t1 with respect to t2 as\nL(t1, t2) = |A1 \\A2| . (1)\nNote that L(t1, t2) = L(t2, t1), since |A1| = |A2|. Furthermore L(t1, t2) = 0 if and only if t1 and t2 are the same tree.\nLet c be a configuration of our parser relative to input string w. We write D(c) to denote the set of all dependency trees that can be obtained in a computation of the form c `\u2217 cf , where cf is some final configuration. We extend the loss function in (1) to configurations by letting\nL(c, t2) = min t1\u2208D(c) L(t1, t2) . (2)\nAssume some reference (desired) dependency tree tG for w, which we call the gold tree. Quantity L(c, tG) can be used to compute a dynamic oracle relating a parser configuration c to a set of optimal actions by setting\noracle(c, tG) =\n{\u03c4 | L(\u03c4(c), tG)\u2212 L(c, tG) = 0} . (3)\nWe therefore need to develop an algorithm for computing (2). We will do this first for the arc-standard parser, and then for an extension of this model.\nNotation We also apply the loss function L(t, tG) in (1) when t is a dependency tree for a substring of w. In this case the nodes of t are a subset of the nodes of tG, and L(t, tG) provides a count of the nodes of t that are assigned a wrong head node, when tG is considered as the reference tree."}, {"heading": "4 Main Algorithm", "text": "Throughout this section we assume an arc-standard parser. Our algorithm takes as input a projective gold tree tG and a configuration c = (\u03c3L, \u03b2, A). We call \u03c3L the left stack, in contrast with a right stack whose construction is specified below."}, {"heading": "4.1 Basic Idea", "text": "The algorithm consists of two steps. Informally, in the first step we compute the largest subtrees, called here tree fragments, of the gold tree tG that have their span entirely included in the buffer \u03b2. The root nodes of these tree fragments are then arranged into a stack data structure, according to the order in which they appear in \u03b2 and with the leftmost root in \u03b2 being the topmost element of the stack. We call this structure the right stack \u03c3R. Intuitively, \u03c3R can be viewed as the result of pre-computing \u03b2 by applying all sequences of transitions that match tG and that can be performed independently of the stack in the input configuration c, that is, \u03c3L.\nIn the second step of the algorithm we use dynamic programming techniques to simulate all computations of the arc-standard parser starting in a configuration with stack \u03c3L and with a buffer consisting of \u03c3R, with the topmost token of \u03c3R being the first token of the buffer. As we will see later, the search space defined by these computations includes the dependency trees for w that are reachable from the input configuration c and that have minimum loss. We then perform a Viterbi search to pick up such value.\nThe second step is very similar to standard implementations of the CKY parser for context-free grammars (Hopcroft and Ullman, 1979), running on an input string obtained as the concatenation of \u03c3L and \u03c3R. The main difference is that we restrict ourselves to parse only those constituents in \u03c3L\u03c3R that dominate the topmost element of \u03c3L (the rightmost ele-\nment, if \u03c3L is viewed as a string). In this way, we account for the additional constraint that we visit only those configurations of the arc-standard parser that can be reached from the input configuration c. For instance, this excludes the reduction of two nodes in \u03c3L that are not at the two topmost positions. This would also exclude the reduction of two nodes in \u03c3R: this is correct, since the associated tree fragments have been chosen as the largest such fragments in \u03b2.\nThe above intuitive explanation will be made mathematically precise in \u00a75, where the notion of linear dependency tree is introduced."}, {"heading": "4.2 Construction of the Right Stack", "text": "In the first step we process \u03b2 and construct a stack \u03c3R, which we call the right stack associated with c and tG. Each node of \u03c3R is the root of a tree t which satisfies the following properties\n\u2022 t is a tree fragment of the gold tree tG having span entirely included in the buffer \u03b2;\n\u2022 t is bottom-up complete for tG, meaning that for each node i of t different from t\u2019s root, the dependents of i in tG cannot be in \u03c3L;\n\u2022 t is maximal for tG, meaning that every supertree of t in tG violates the above conditions.\nThe stack \u03c3R is incrementally constructed by processig \u03b2 from left to right. Each node i is copied into \u03c3R if it satisfies any of the following conditions\n\u2022 the parent node of i in tG is not in \u03b2;\n\u2022 some dependent of i in tG is in \u03c3L or has already been inserted in \u03c3R.\nIt is not difficult to see that the nodes in \u03c3R are the roots of tree fragments of tG that satisfy the condition of bottom-up completeness and the condition of maximality defined above."}, {"heading": "4.3 Computation of Configuration Loss", "text": "We start with some notation. Let `L = |\u03c3L| and `R = |\u03c3R|. We write \u03c3L[i] to denote the i-th element of \u03c3L and t(\u03c3L[i]) to denote the corresponding tree fragment; \u03c3R[i] and t(\u03c3R[i]) have a similar meaning. In order to simplify the specification of the algorithm, we assume below that \u03c3L[1] = \u03c3R[1].\nAlgorithm 1 Computation of the loss function for the arc-standard parser 1: T [1, 1](\u03c3L[1])\u2190 L(t(\u03c3L[1]), tG) 2: for d\u2190 1 to `L + `R \u2212 1 do . d is the index of a sub-anti-diagonal 3: for j \u2190 max{1, d\u2212 `L + 1} to min{d, `R} do . j is the column index 4: i\u2190 d\u2212 j + 1 . i is the row index 5: if i < `L then . expand to the left 6: for each h \u2208 \u2206i,j do 7: T [i+ 1, j](h)\u2190 min{T [i+ 1, j](h), T [i, j](h) + \u03b4G(h\u2192 \u03c3L[i+ 1])} 8: T [i+ 1, j](\u03c3L[i+ 1])\u2190 min{T [i+ 1, j](\u03c3L[i+ 1]), T [i, j](h) + \u03b4G(\u03c3L[i+ 1]\u2192 h)} 9: if j < `R then . expand to the right 10: for each h \u2208 \u2206i,j do 11: T [i, j + 1](h)\u2190 min{T [i, j + 1](h), T [i, j](h) + \u03b4G(h\u2192 \u03c3R[j + 1])} 12: T [i, j+1](\u03c3R[j + 1])\u2190 min{T [i, j+1](\u03c3R[j + 1]), T [i, j](h)+\u03b4G(\u03c3R[j + 1]\u2192 h)} 13: return T [`L, `R](0) + \u2211 i\u2208[1,`L] L(t(\u03c3L[i]), tG)\nTherefore the elements of \u03c3R which have been constructed in \u00a74.2 are \u03c3R[i], i \u2208 [2, `R].\nAlgorithm 1 uses a two-dimensional array T of size `L \u00d7 `R, where each entry T [i, j] is an association list from integers to integers. An entry T [i, j](h) stores the minimum loss among dependency trees rooted at h that can be obtained by running the parser on the first i elements of stack \u03c3L and the first j elements of buffer \u03c3R. More precisely, let\n\u2206i,j = {\u03c3L[k] | k \u2208 [1, i]} \u222a {\u03c3R[k] | k \u2208 [1, j]} . (4)\nFor each h \u2208 \u2206i,j , the entry T [i, j](h) is the minimum loss among all dependency trees defined as above and with root h. We also assume that T [i, j](h) is initialized to +\u221e (not reported in the algorithm).\nAlgorithm 1 starts at the top-left corner of T , visiting each individual sub-anti-diagonal of T in ascending order, and eventually reaching the bottomright corner of the array. For each entry T [i, j], the left expansion is considered (lines 5 to 8) by combining with tree fragment \u03c3L[i+ 1], through a left or a right arc reduction. This results in the update of T [i + 1, j](h), for each h \u2208 \u2206i+1,j , whenever a smaller value of the loss is achieved for a tree with root h. The Kronecker-like function used at line 8 provides the contribution of each single arc to the loss of the current tree. Denoting with AG the set of\narcs of tG, such a function is defined as\n\u03b4G(i\u2192 j) = {\n0, if (i\u2192 j) \u2208 AG; 1, otherwise. (5)\nA symmetrical process is implemented for the right expansion of T [i, j] through tree fragment \u03c3R[j + 1] (lines 9 to 12).\nAs we will see in the next section, quantity T [`L, `R](0) is the minimal loss of a tree composed only by arcs that connect nodes in \u03c3L and \u03c3R. By summing the loss of all tree fragments t(\u03c3L[i]) to the loss in T [`L, `R](0), at line 13, we obtain the desired result, since the loss of each tree fragment t(\u03c3R[j]) is zero."}, {"heading": "5 Formal Properties", "text": "Throughout this section we let w, tG, \u03c3L, \u03c3R and c = (\u03c3L, \u03b2, A) be defined as in \u00a74, but we no longer assume that \u03c3L[1] = \u03c3R[1]. To simplify the presentation, we sometimes identify the tokens in w with the associated nodes in a dependency tree for w."}, {"heading": "5.1 Linear Trees", "text": "Algorithm 1 explores all dependency trees that can be reached by an arc-standard parser from configuration c, under the condition that (i) the nodes in the buffer \u03b2 are pre-computed into tree fragments and collapsed into their root nodes in the right stack \u03c3R, and (ii) nodes in \u03c3R cannot be combined together prior to their combination with other nodes in the left stack \u03c3L. This set of dependency trees is char-\nacterized here using the notion of linear tree, to be used later in the correctness proof.\nConsider two nodes \u03c3L[i] and \u03c3L[j] with j > i > 1. An arc-standard parser can construct an arc between \u03c3L[i] and \u03c3L[j], in any direction, only after reaching a configuration in which \u03c3L[i] is at the top of the stack and \u03c3L[j] is at the second topmost position. In such configuration we have that \u03c3L[i] dominates \u03c3L[1]. Furthermore, consider nodes \u03c3R[i] and \u03c3R[j] with j > i \u2265 1. Since we are assuming that tree fragments t(\u03c3R[i]) and t(\u03c3R[j]) are bottom-up complete and maximal, as defined in \u00a74.2, we allow the construction of an arc between \u03c3R[i] and \u03c3R[j], in any direction, only after reaching a configuration in which \u03c3R[i] dominates node \u03c3L[1].\nThe dependency trees satisfying the restrictions above are captured by the following definition. A linear tree over (\u03c3L, \u03c3R) is a projective dependency tree t for string \u03c3L\u03c3R satisfying both of the additional conditions reported below. The path from t\u2019s root to node \u03c3L[1] is called the spine of t.\n\u2022 Every node of t not in the spine is a dependent of some node in the spine.\n\u2022 For each arc i \u2192 j in t with j in the spine, no dependent of i can be placed in between i and j within string \u03c3L\u03c3R.\nAn example of a linear tree is depicted in Figure 2. Observe that the second condition above forbids the reduction of two nodes i and j, in case none of these dominates node \u03c3L[1]. For instance, the ra reduction of nodes i3 and i2 would result in arc i3 \u2192 i2 replacing arc i1 \u2192 i2 in Figure 2. The new dependency tree is not linear, because of a violation of the\nsecond condition above. Similarly, the la reduction of nodes j3 and j4 would result in arc j4 \u2192 j3 replacing arc i3 \u2192 j3 in Figure 2, again a violation of the second condition above.\nLemma 1 Any tree t \u2208 D(c) can be decomposed into trees t(\u03c3L[i]), i \u2208 [1, `L], trees tj , j \u2208 [1, q] and q \u2265 1, and a linear tree tl over (\u03c3L, \u03c3R,t), where \u03c3R,t = r1 \u00b7 \u00b7 \u00b7 rq and each rj is the root node of tj . 2 PROOF (SKETCH) Trees t(\u03c3L[i]) are common to every tree in D(c), since the arc-standard model can not undo the arcs already built in the current configuration c. Similar to the construction in \u00a74.2 of the right stack \u03c3R from tG, we let tj , j \u2208 [1, q], be tree fragments of t that cover only nodes associated with the tokens in the buffer \u03b2 and that are bottomup complete and maximal for t. These trees are indexed according to their left to right order in \u03b2. Finally, tl is implicitly defined by all arcs of t that are not in trees t(\u03c3L[i]) and tj . It is not difficult to see that tl has a spine ending with node \u03c3L[1] and is a linear tree over (\u03c3L, \u03c3R,t)."}, {"heading": "5.2 Correctness", "text": "Our proof of correctness for Algorithm 1 is based on a specific dependency tree t\u2217 for w, which we define below. Let SL = {\u03c3L[i] | i \u2208 [1, `L]} and letDL be the set of nodes that are descendants of some node in SL. Similarly, let SR = {\u03c3R[i] | i \u2208 [1, `R]} and let DR be the set of descendants of nodes in SR. Note that sets SL, SR, DL and DR provide a partition of Vw.\nWe choose any linear tree t\u2217l over (\u03c3L, \u03c3R) having root 0, such that L(t\u2217l , tG) = mint L(t, tG), where t ranges over all possible linear trees over (\u03c3L, \u03c3R) with root 0. Tree t\u2217 consists of the set of nodes Vw and the set of arcs obtained as the union of the set of arcs of t\u2217l and the set of arcs of all trees t(\u03c3L[i]), i \u2208 [1, `L], and t(\u03c3R[j]), j \u2208 [1, `R]. Lemma 2 t\u2217 \u2208 D(c). 2 PROOF (SKETCH) All tree fragments t(\u03c3L[i]) have already been parsed and are available in the stack associated with c. Each tree fragment t(\u03c3R[j]) can later be constructed in the computation, when a configuration c\u2032 is reached with the relevant segment of w at the start of the buffer. Note also that parsing of t(\u03c3R[j]) can be done in a way that does not depend on the content of the stack in c\u2032.\nFinally, the parsing of the tree fragments t(\u03c3R[j]) is interleaved with the construction of the arcs from the linear tree t\u2217l , which are all of the form (i \u2192 j) with i, j \u2208 (SL \u222a SR). More precisely, if (i \u2192 j) is an arc from t\u2217l , at some point in the computation nodes i and j will become available at the two topmost positions in the stack. This follows from the second condition in the definition of linear tree.\nWe now show that tree t\u2217 is \u201coptimal\u201d within the set D(c) and with respect to tG. Lemma 3 L(t\u2217, tG) = L(c, tG). 2 PROOF Consider an arbitrary tree t \u2208 D(c). Assume the decomposition of t defined in the proof of Lemma 1, through trees t(\u03c3L[i]), i \u2208 [1, `L], trees tj , j \u2208 [1, q], and linear tree tl over (\u03c3L, \u03c3R,t).\nRecall that an arc i \u2192 j denotes an ordered pair (i, j). Let us consider the following partition for the set of arcs of any dependency tree for w\nA1 = (SL \u222aDL)\u00d7DL , A2 = (SR \u222aDR)\u00d7DR , A3 = (Vw \u00d7 Vw) \\ (A1 \u222aA2) .\nIn what follows, we compare the losses L(t, tG) and L(t\u2217, tG) by separately looking into the contribution to such quantities due to the arcs in A1, A2 and A3.\nNote that the arcs of trees t(\u03c3L[i]) are all in A1, the arcs of trees t(\u03c3R[j]) are all in A2, and the arcs of tree t\u2217l are all in A3. Since t and t\n\u2217 share trees t(\u03c3L[i]), when restricted to arcs in A1 quantities L(t, tG) and L(t\u2217, tG) are the same. When restricted to arcs in A2, quantity L(t\u2217, tG) is zero, by construction of the trees t(\u03c3R[j]). Thus L(t, tG) can not be smaller thanL(t\u2217, tG) for these arcs. The difficult part is the comparison of the contribution to L(t, tG) and L(t\u2217, tG) due to the arcs in A3. We deal with this below.\nLetAS,G be the set of all arcs from tG that are also in set (SL \u00d7 SR) \u222a (SR \u00d7 SL). In words, AS,G represents gold arcs connecting nodes in SL and nodes in SR, in any direction. Within tree t, these arcs can only be found in the tl component, since nodes in SL are all placed within the spine of tl, or else at the left of that spine.\nLet us consider an arc (j \u2192 i) \u2208 AS,G with j \u2208 SL and i \u2208 SR, and let us assume that (j \u2192 i) is in t\u2217l . If token ai does not occur in \u03c3R,t, node i is not\nin tl and (j \u2192 i) can not be an arc of t. We then have that (j \u2192 i) contributes one unit to L(t, tG) but does not contribute to L(t\u2217, tG). Similarly, let (i \u2192 j) \u2208 AS,G be such that i \u2208 SR and j \u2208 SL, and assume that (i\u2192 j) is in t\u2217l . If token ai does not occur in \u03c3R,t, arc (i \u2192 j) can not be in t. We then have that (i \u2192 j) contributes one unit to L(t, tG) but does not contribute to L(t\u2217, tG).\nIntuitively, the above observations mean that the winning strategy for trees in D(c) is to move nodes from SR as much as possible into the linear tree component tl, in order to make it possible for these nodes to connect to nodes in SL, in any direction. In this case, arcs fromA3 will also move into the linear tree component of a tree inD(c), as it happens in the case of t\u2217. We thus conclude that, when restricted to the set of arcs in A3, quantity L(t, tG) is not smaller than L(t\u2217, tG), because stack \u03c3R has at least as many tokens corresponding to nodes in SR as stack \u03c3R,t, and because t\u2217l has the minimum loss among all the linear trees over (\u03c3L, \u03c3R).\nPutting all of the above observations together, we conclude that L(t, tG) can not be smaller than L(t\u2217, tG). This concludes the proof, since t has been arbitrarily chosen in D(c). Theorem 1 Algorithm 1 computes L(c, tG). 2 PROOF (SKETCH) Algorithm 1 implements a Viterbi search for trees with smallest loss among all linear trees over (\u03c3L, \u03c3R). Thus T [`L, `R](0) = L(t\u2217l , tG). The loss of the tree fragments t(\u03c3R[j]) is 0 and the loss of the tree fragments t(\u03c3L[i]) is added at line 13 in the algorithm. Thus the algorithm returns L(t\u2217, tG), and the statement follows from Lemma 2 and Lemma 3."}, {"heading": "5.3 Computational Analysis", "text": "Following \u00a74.2, the right stack \u03c3R can be easily constructed in time O(n), n the length of the input string. We now analyze Algorithm 1. For each entry T [i, j] and for each h \u2208 \u2206i,j , we update T [i, j](h) a number of times bounded by a constant which does not depend on the input. Each updating can be computed in constant time as well. We thus conclude that Algorithm 1 runs in time O(`L \u00b7 `R \u00b7 (`L + `R)). Quantity `L+`R is bounded by n, but in practice the former is significantly smaller. When measured over the sentences in the Penn\nTreebank, the average value of `L+`Rn is 0.29. In terms of runtime, training is 2.3 times slower when using our oracle instead of a static oracle."}, {"heading": "6 Extension to the LR-Spine Parser", "text": "In this section we consider the transition-based parser proposed by Sartorio et al. (2013), called here the LR-spine parser. This parser is not arcdecomposable: the same example reported in \u00a72.4 can be used to show this fact. We therefore extend to the LR-spine parser the algorithm developed in \u00a74."}, {"heading": "6.1 The LR-Spine Parser", "text": "Let t be a dependency tree. The left spine of t is an ordered sequence \u3008i1, . . . , ip\u3009, p \u2265 1, consisting of all nodes in a descending path from the root of t taking the leftmost child node at each step. The right spine of t is defined symmetrically. We use \u2295 to denote sequence concatenation.\nIn the LR-spine parser each stack element \u03c3[i] denotes a partially built subtree t(\u03c3[i]) and is represented by a pair (lsi, rsi), with lsi and rsi the left and the right spine, respectively, of t(\u03c3[i]). We write lsi[k] (rsi[k]) to represent the k-th element of lsi (rsi, respectively). We also write r(\u03c3[i]) to denote the root of t(\u03c3[i]), so that r(\u03c3[i]) = lsi[1] = rsi[1].\nInformally, the LR-spine parser uses the same transition typologies as the arc-standard parser. However, an arc (h \u2192 d) can now be created with the head node h chosen from any node in the spine of the involved tree. The transition types of the LRspine parser are defined as follows.\n\u2022 Shift (sh) removes the first node from the buffer and pushes into the stack a new element, consisting of the left and right spines of the associated tree\n(\u03c3, i|\u03b2,A) `sh (\u03c3|(\u3008i\u3009, \u3008i\u3009), \u03b2, A) .\n\u2022 Left-Arc k (lak) creates a new arc h \u2192 d from the k-th node in the left spine of the topmost tree in the stack to the head of the second element in the stack. Furthermore, the two topmost stack elements are replaced by a new element associated with the resulting tree\n(\u03c3\u2032|\u03c3[2]|\u03c3[1], \u03b2, A) `lak (\u03c3\u2032|\u03c3lak , \u03b2, A \u222a {h\u2192 d}) where we have set h = ls1[k], d = r(\u03c3[2]) and \u03c3lak = (\u3008ls1[1], . . . , ls1[k]\u3009 \u2295 ls2, rs1).\n\u2022 Right-Arc k (rak for short) is defined symmetrically with respect to lak\n(\u03c3\u2032|\u03c3[2]|\u03c3[1], \u03b2, A) `rak (\u03c3\u2032|\u03c3rak , \u03b2, A \u222a {h\u2192 d})\nwhere we have set h = rs2[k], d = r(\u03c3[1]) and \u03c3rak = (ls2, \u3008rs2[1], . . . , rs2[k]\u3009 \u2295 rs1).\nNote that, at each configuration in the LR-spine parser, there are |ls1| possible lak transitions, one for each choice of a node in the left spine of t(\u03c3[1]); similarly, there are |rs2| possible rak transitions, one for each choice of a node in the right spine of t(\u03c3[2])."}, {"heading": "6.2 Configuration Loss", "text": "We only provide an informal description of the extended algorithm here, since it is very similar to the algorithm in \u00a74.\nIn the first phase we use the procedure of \u00a74.2 for the construction of the right stack \u03c3R, considering only the roots of elements in \u03c3L and ignoring the rest of the spines. The only difference is that each element \u03c3R[j] is now a pair of spines (lsR,j , rsR,j). Since tree fragment t(\u03c3R[j]) is bottom-up complete (see \u00a74.1), we now restrict the search space in such a way that only the root node r(\u03c3R[j]) can take dependents. This is done by setting lsR,j = rsR,j = \u3008r(\u03c3R[j])\u3009 for each j \u2208 [1, `R]. In order to simplify the presentation we also assume \u03c3R[1] = \u03c3L[1], as done in \u00a74.3.\nIn the second phase we compute the loss of an input configuration using a two-dimensional array T , defined as in \u00a74.3. However, because of the way transitions are defined in the LR-spine parser, we now need to distinguish tree fragments not only on the basis of their roots, but also on the basis of their left and right spines. Accordingly, we define each entry T [i, j] as an association list with keys of the form (ls, rs). More specifically, T [i, j](ls, rs) is the minimum loss of a tree with left and right spines ls and rs, respectively, that can be obtained by running the parser on the first i elements of stack \u03c3L and the first j elements of buffer \u03c3R.\nWe follow the main idea of Algorithm 1 and expand each tree in T [i, j] at its left side, by combining with tree fragment t(\u03c3L[i+ 1]), and at its right side, by combining with tree fragment t(\u03c3R[j + 1]).\nTree combination deserves some more detailed discussion, reported below.\nWe consider the combination of a tree ta from T [i, j] and tree t(\u03c3L[i+ 1]) by means of a left-arc transition. All other cases are treated symmetrically. Let (lsa, rsa) be the spine pair of ta, so that the loss of ta is stored in T [i, j](lsa, rsa). Let also (lsb, rsb) be the spine pair of t(\u03c3L[i+ 1]). In case there exists a gold arc in tG connecting a node from lsa to r(\u03c3L[i+ 1]), we choose the transition lak, k \u2208 [1, |lsa|], that creates such arc. In case such gold arc does not exists, we choose the transition lak with the maximum possible value of k, that is, k = |lsa|. We therefore explore only one of the several possible ways of combining these two trees by means of a left-arc transition.\nWe remark that the above strategy is safe. In fact, in case the gold arc exists, no other gold arc can ever involve the nodes of lsa eliminated by lak (see the definition in \u00a76.1), because arcs can not cross each other. In case the gold arc does not exist, our choice of k = |lsa| guarantees that we do not eliminate any element from lsa.\nOnce a transition lak is chosen, as described above, the reduction is performed and the spine pair (ls, rs) for the resulting tree is computed from (lsa, rsa) and (lsb, rsb), as defined in \u00a76.1. At the same time, the loss of the resulting tree is computed, on the basis of the loss T [i, j](lsa, rsa), the loss of tree t(\u03c3L[i+ 1]), and a Kronecker-like function defined below. This loss is then used to update T [i+ 1, j](ls, rs).\nLet ta and tb be two trees that must be combined in such a way that tb becomes the dependent of some node in one of the two spines of ta. Let also pa = (lsa, rsa) and pb = (lsb, rsb) be spine pairs for ta and tb, respectively. Recall that AG is the set of arcs of tG. The new Kronecker-like function for the computation of the loss is defined as\n\u03b4G(pa, pb) =    0, if r(ta) < r(tb)\u2227 \u2203k[(rska \u2192 r(tb)) \u2208 AG]; 0, if r(ta) > r(tb)\u2227 \u2203k[(lska \u2192 r(tb)) \u2208 AG];\n1, otherwise."}, {"heading": "6.3 Efficiency Improvement", "text": "The algorithm in \u00a76.2 has an exponential behaviour. To see why, consider trees in T [i, j]. These trees are produced by the combination of trees in T [i \u2212 1, j] with tree t(\u03c3L[i]), or by the combination of trees in T [i, j \u2212 1] with tree t(\u03c3R[j]). Since each combination involves either a left-arc or a right-arc transition, we obtain a recursive relation that resolves into a number of trees in T [i, j] bounded by 4i+j\u22122.\nWe introduce now two restrictions to the search space of our extended algorithm that result in a huge computational saving. For a spine s, we write N (s) to denote the set of all nodes in s. We also let \u2206i,j be the set of all pairs (ls, rs) such that T [i, j](ls, rs) 6= +\u221e.\n\u2022 Every time a new pair (ls, rs) is created in \u2206[i, j], we remove from ls all nodes different from the root that do not have gold dependents in {r(\u03c3L[k]) | k < i}, and we remove from rs all nodes different from the root that do not have gold dependents in {r(\u03c3R[k]) | k > j}.\n\u2022 A pair pa = (lsa, rsa) is removed from \u2206[i, j] if there exists a pair pb = (lsb, rsb) in \u2206[i, j] with the same root node as pa and with (lsa, rsa) 6= (lsb, rsb), such that N (lsa) \u2286 N (lsb), N (rsa) \u2286 N (rsb), and T [i, j](pa) \u2265 T [i, j](pb).\nThe first restriction above reduces the size of a spine by eliminating a node if it is irrelevant for the computation of the loss of the associated tree. The second restriction eliminates a tree ta if there is a tree tb with smaller loss than ta, such that in the computations of the parser tb provides exactly the same context as ta. It is not difficult to see that the above restrictions do not affect the correctness of the algorithm, since they always leave in our search space some tree that has optimal loss.\nA mathematical analysis of the computational complexity of the extended algorithm is quite involved. In Figure 3, we plot the worst case size of T [i, j] for each value of j + i \u2212 1, computed over all configurations visited in the training phase (see \u00a77). We see that |T [i, j]| grows linearly with j + i\u2212 1, leading to the same space requirements of Algorithm 1. Empirically, training with the dynamic\nAlgorithm 2 Online training for greedy transitionbased parsers\n1: w\u2190 0 2: for k iterations do 3: shuffle(corpus) 4: for sentencew and gold tree tG in corpus do 5: c\u2190 INITIAL(w) 6: while not FINAL(c) do 7: \u03c4p \u2190 argmax\u03c4\u2208valid(c)w \u00b7 \u03c6(c, \u03c4) 8: \u03c4o \u2190 argmax\u03c4\u2208oracle(c,tG)w\u00b7\u03c6(c, \u03c4) 9: if \u03c4p 6\u2208 oracle(c, tG) then\n10: w\u2190 w + \u03c6(c, \u03c4o)\u2212 \u03c6(c, \u03c4p)\n11: \u03c4 \u2190 { \u03c4p if EXPLORE \u03c4o otherwise 12: c\u2190 \u03c4(c) return averaged(w)\noracle is only about 8 times slower than training with the oracle of Sartorio et al. (2013) without exploring incorrect configurations."}, {"heading": "7 Training", "text": "We follow the training procedure suggested by Goldberg and Nivre (2013), as described in Algorithm 2. The algorithm performs online learning using the averaged perceptron algorithm. A weight vector w (initialized to 0) is used to score the valid transitions in each configuration based on a feature representation \u03c6, and the highest scoring transition \u03c4p is predicted. If the predicted transition is not optimal according to the oracle, the weights w are updated away from the predicted transition and to-\nwards the highest scoring oracle transition \u03c4o. The parser then moves to the next configuration, by taking either the predicted or the oracle transition. In the \u201cerror exploration\u201d mode (EXPLORE is true), the parser follows the predicted transition, and otherwise the parser follows the oracle transition. Note that the error exploration mode requires the completeness property of a dynamic oracle.\nWe consider three training conditions: static, in which the oracle is deterministic (returning a single canonical transition for each configuration) and no error exploration is performed; nondet, in which we use a nondeterministic partial oracle (Sartorio et al., 2013), but do not perform error exploration; and explore in which we use the dynamic oracle and perform error exploration. The static setup mirrors the way greedy parsers are traditionally trained. The nondet setup allows the training procedure to choose which transition to take in case of spurious ambiguities. The explore setup increases the configuration space explored by the parser during training, by exposing the training procedure to non-optimal configurations that are likely to occur during parsing, together with the optimal transitions to take in these configurations. It was shown by Goldberg and Nivre (2012; 2013) that the nondet setup outperforms the static setup, and that the explore setup outperforms the nondet setup."}, {"heading": "8 Experimental Evaluation", "text": "Datasets Performance evaluation is carried out on CoNLL 2007 multilingual dataset, as well as on the Penn Treebank (PTB) (Marcus et al., 1993) converted to Stanford basic dependencies (De Marneffe et al., 2006). For the CoNLL datasets we use gold part-of-speech tags, while for the PTB we use automatically assigned tags. As usual, the PTB parser is trained on sections 2-21 and tested on section 23.\nSetup We train labeled versions of the arc-standard (std) and LR-spine (lrs) parsers under the static, nondet and explore setups, as defined in \u00a77. In the nondet setup we use a nondeterministic partial oracle and in the explore setup we use the nondeterministic complete oracles we present in this paper. In the static setup we resolve oracle ambiguities and choose a canonic transition sequence by attaching arcs as soon as possible. In the explore setup,\nfrom the first round of training onward, we always follow the predicted transition (EXPLORE is true). For all languages, we deal with non-projectivity by skipping the non-projective sentences during training but not during test. For each parsing system, we use the same feature templates across all languages.1 The arc-standard models are trained for 15 iterations and the LR-spine models for 30 iterations, after which all the models seem to have converged.\nResults In Table 1 we report the labeled (LAS) and unlabeled (UAS) attachment scores. As expected, the LR-spine parsers outperform the arc-standard parsers trained under the same setup. Training with the dynamic oracles is also beneficial: despite the arguable complexity of our proposed oracles, the trends are consistent with those reported by Goldberg and Nivre (2012; 2013). For the arc-standard model we observe that the move from a static to a nondeterministic oracle during training improves the accuracy for most of languages. Making use of the completeness of the dynamic oracle and moving to the error exploring setup further improve results. The only exceptions are Basque, that has a small dataset with more than 20% of non-projective sentences, and Chinese. For Chinese we observe a reduction of accuracy in the nondet setup, but an increase in the explore setup.\nFor the LR-spine parser we observe a practically constant increase of performance by moving from\n1Our complete code, together with the description of the feature templates, is available on the second author\u2019s homepage.\nthe static to the nondeterministic and then to the error exploring setups."}, {"heading": "9 Conclusions", "text": "We presented dynamic oracles, based on dynamic programming, for the arc-standard and the LRspine parsers. Empirical evaluation on 10 languages showed that, despite the apparent complexity of the oracle calculation procedure, the oracles are still learnable, in the sense that using these oracles in the error exploration training algorithm presented in (Goldberg and Nivre, 2012) considerably improves the accuracy of the trained parsers.\nOur algorithm computes a dynamic oracle using dynamic programming to explore a forest of dependency trees that can be reached from a given parser configuration. For the arc-standard parser, the computation takes cubic time in the size of the largest of the left and right input stacks. Dynamic programming for the simulation of arc-standard parsers have been proposed by Kuhlmann et al. (2011). That algorithm could be adapted to compute minimum loss for a given configuration, but the running time is O(n4), n the size of the input string: besides being asymptotically slower by one order of magnitude, in practice n is also larger than the stack size above.\nAcknowledgments We wish to thank the anonymous reviewers. In particular, we are indebted to one of them for two important technical remarks. The third author has been partially supported by MIUR under project PRIN No. 2010LYA9RH 006."}], "year": 2014, "references": [{"title": "Generating typed dependency parses from phrase structure parses", "authors": ["Marie-Catherine De Marneffe", "Bill MacCartney", "Christopher D. Manning."], "venue": "Proceedings of the 5th International Conference on Language Resources and Evaluation (LREC), volume 6,", "year": 2006}, {"title": "A dynamic oracle for arc-eager dependency parsing", "authors": ["Yoav Goldberg", "Joakim Nivre."], "venue": "Proc. of the 24 COLING, Mumbai, India.", "year": 2012}, {"title": "Training deterministic parsers with non-deterministic oracles", "authors": ["Yoav Goldberg", "Joakim Nivre."], "venue": "Transactions of the association for Computational Linguistics, 1.", "year": 2013}, {"title": "Introduction to Automata Theory, Languages and Computation", "authors": ["John E. Hopcroft", "Jeffrey D. Ullman."], "venue": "Addison-Wesley, Reading, MA.", "year": 1979}, {"title": "Dynamic programming for linear-time incremental parsing", "authors": ["Liang Huang", "Kenji Sagae."], "venue": "Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, July.", "year": 2010}, {"title": "Dynamic programming algorithms for transition-based dependency parsers", "authors": ["Marco Kuhlmann", "Carlos G\u00f3mez-Rodr\u0131\u0301guez", "Giorgio Satta"], "venue": "In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Techno-", "year": 2011}, {"title": "Building a large annotated corpus of english: The penn treebank", "authors": ["Mitchell P. Marcus", "Beatrice Santorini", "Mary Ann Marcinkiewicz."], "venue": "Computational Linguistics, 19(2):313\u2013330.", "year": 1993}, {"title": "The CoNLL 2007 shared task on dependency parsing", "authors": ["Joakim Nivre", "Johan Hall", "Sandra K\u00fcbler", "Ryan McDonald", "Jens Nilsson", "Sebastian Riedel", "Deniz Yuret."], "venue": "Proceedings of EMNLP-CoNLL.", "year": 2007}, {"title": "An efficient algorithm for projective dependency parsing", "authors": ["Joakim Nivre."], "venue": "Proceedings of the Eighth International Workshop on Parsing Technologies (IWPT), pages 149\u2013160, Nancy, France.", "year": 2003}, {"title": "Incrementality in deterministic dependency parsing", "authors": ["Joakim Nivre."], "venue": "Workshop on Incremental Parsing: Bringing Engineering and Cognition Together, pages 50\u201357, Barcelona, Spain.", "year": 2004}, {"title": "Algorithms for deterministic incremental dependency parsing", "authors": ["Joakim Nivre."], "venue": "Computational Linguistics, 34(4):513\u2013553.", "year": 2008}, {"title": "A transition-based dependency parser using a dynamic parsing strategy", "authors": ["Francesco Sartorio", "Giorgio Satta", "Joakim Nivre."], "venue": "Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 135\u2013144,", "year": 2013}, {"title": "A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing", "authors": ["Yue Zhang", "Stephen Clark."], "venue": "Proceedings of EMNLP. 130", "year": 2008}], "id": "SP:09d5446fd2cb488e9cf0663dcd9f41ca4869e292", "authors": [{"name": "Yoav Goldberg", "affiliations": []}, {"name": "Francesco Sartorio", "affiliations": []}, {"name": "Giorgio Satta", "affiliations": []}], "abstractText": "We develop parsing oracles for two transition-based dependency parsers, including the arc-standard parser, solving a problem that was left open in (Goldberg and Nivre, 2013). We experimentally show that using these oracles during training yields superior parsing accuracies on many languages.", "title": "A Tabular Method for Dynamic Oracles in Transition-Based Parsing"}