18	20	Pinyin typos have always been a serious problem for Chinese pinyin IMEs.
23	30	Typo checking and correction has an important impact on IME performance.
46	45	Each pinyin sylla- ble has a bunch of corresponding Chinese characters which share the same pronunciation represented by the syllable.
48	13	Chinese characters then form words.
52	15	Figure 1 demonstrates the relationship of pinyin andword, from pinyin letters “nihao” to the word “你好 (hello)”.
53	112	Typically, an IME takes the pinyin input, segments it into syllables, looks up corresponding words in a dictionary and generates a sentence with the candidate words.
54	263	Non-Chinese users may feel confused or even surprised if they know that when typing pinyin through an IME, Chinese IME users will never enter delimiters such as “Space” key to segment either pinyin syllables or pinyin words, but just input the entire un-segmented pinyin sequence.
55	43	For example, if one wants to input “你好世界 (Hello world)”, he will just type “nihaoshijie” instead of segmented pinyin sequence “ni hao shi jie”.
56	45	Nevertheless, pinyin syllable segmentation is a much easier problem compared to Chinese word segmentation.
57	53	Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly, it is convenient to perform pinyin sylla- ble segmentation by using rules.
58	24	But as the pinyin input is not segmented, it is nearly impossible to adopt previous spell checking methods for English to pinyin typo checking, although techniques for English spell checking have been well developed.
60	32	Inspired by (Yang et al., 2012b) and (Jia et al., 2013), we adopt the graph model for Chinese spell checking for pinyin segmentation and typo correction, which is based on the shortest path word segmentation algorithm (Casey and Lecolinet, 1996).
70	11	This is the single source shortest path (SSSP) problem on DAG which has an efficient algorithm by preprocessing the DAG with topology sort, then traversing vertices and edges in topological order.
71	68	For example, one intends to input “你好世界 (Hello world)” by typing “nihaoshijie”, but mistyped as “mihaoshijiw”.
88	17	Thus the conditional probability between characters does not make much sense.
91	55	To make typo correction better, we consider to integrate it with PTC conversion using a joint model.
92	13	PTC conversion has long been viewed as a decoding problem using HMM.
101	17	, oM}, hidden states S = {s1, s2, .
102	116	, sN}, a special start state s0, emission probabilities (Esi,ok) = P (ok|si), transition probabilities (Tsi,sj ) = P (sj |si), and start probabilities (Ssi) = P (si|s0).
107	14	, T , and ∀xt ∈ S. The vertex weight is the negative logarithm of emission probability: wvxt = − log Ext,yt .
109	12	, T , and ∀xt, xt−1 ∈ S. The shortest path P ∗ from v0 to vE is the one with the least sum of vertex and edge weights, i.e., P ∗ = argmin vxt∈V T∑ t=1 (wvxt +WE(vxt−1→vxt )) = argmin vx1 ,vxt∈V {− logSx1 − log Ex1,y1 + T∑ t=2 (− log Ext,yt − log Txt−1,xt)} = argmax vx1 ,vxt∈V Sx1Ex1,y1 T∏ t=2 Ext,ytTxt−1,xt .
110	17	(2) The optimization goal of P ∗ in Equation (2) is identical to that of X∗ in Equation (1).
111	67	Given HMM decoding problem is identical to SSSP problem on DAG, we propose a joint graph model for PTC conversion with typo correction.
112	18	The joint graph model aims to find the global optimal for both PTC conversion and typo correction on the entire input pinyin sequence.
113	67	The graph G = (V,E) is constructed based on graph Gc for typo correction in Section 3.2.
115	51	Corresponding Chinese words are fetched from a PTC dictionary Dc, which is a dictionary maps pinyin words to Chinese words, and added as vertices: {Vi,j |∀Vi,j ∈ Dc[S′i .
116	69	S′j ], i ≤ j}; The vertex weight consists of two parts: 1. the vertex weights of syllables in Gc, and 2. the emission probability: wVi,j =β j∑ k=i L(S′k, Sk) − γ logP (S′i .
117	17	S′j |Vi,j); If the corresponding pinyin syllables inGc have an edge between them, the vertices in G also have an edge: E = {E(Vi,j → Vj+1,k)|E(Si,j → Sj+1,k) ∈ Gc}.
118	60	The edge weights are the negative logarithm of the transition probabilities: WE(Vi,j→Vj+1,k) = − logP (Vj+1,k|Vi,j) Although the model is formulated on first order HMM, i.e., the LM used for transition probability is a bigram one, it is easy to extend the model to take advantage of higher order n-gram LM, by tracking longer history while traversing the graph.
119	55	Computing the shortest path from V0 to VE onG yields the best pinyin-to-Chinese conversion with typo correction result.
