{"sections": [{"heading": "1. Introduction", "text": "We aim to contribute to the body of research on the trade-off between releasing datasets from which publicly beneficial statistical inferences can be drawn, and between protecting the privacy of individuals who contribute to such datasets. Currently the most successful formalisation of protecting user privacy is provided by differential privacy (Dwork & Roth, 2014), which is a definition that any algorithm operating on a database may or may not satisfy. An algorithm that does satisfy the definition ensures that a particular individual does not lose too much privacy by deciding to contribute to the database on which the algorithm operates.\nWhile differentially private algorithms for releasing entire\n1MPI-IS, Tu\u0308bingen, Germany 2University of Cambridge, UK. Correspondence to: Matej Balog <first.surname@gmail.com>. Code: https://github.com/matejbalog/RKHS-private-database/.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\ndatabases have been studied previously (Blum et al., 2008; Wasserman & Zhou, 2010; Zhou et al., 2009), most algorithms focus on releasing a privacy-protected version of a particular summary statistic, or of a statistical model trained on the private dataset. In this work we revisit the more difficult non-interactive, or offline setting, where the database owner aims to release a privacy-protected version of the entire database without knowing what statistics third-parties may wish to compute in the future.\nIn our new framework we propose to use the kernel mean embedding (Smola et al., 2007) as an intermediate representation of a database. It is (1) sufficiently rich in the sense that it captures a wide class of statistical properties of the data, while at the same time (2) it lives in a Reproducing Kernel Hilbert Space (RKHS), where it can be handled mathematically in a principled way and privacy-protected in a unified manner, independently of the type of data appearing in the database. Although kernel mean embeddings are functions in an abstract Hilbert space, in practice they can be (at least approximately) represented using a possibly weighted set of data points in input space (i.e. a set of database rows). The privacy-protected kernel mean embedding is released to the public in this representation, however, using synthetic datapoints instead of the private ones. As a result, our framework can be seen as leading to synthetic database algorithms.\nWe validate our approach by instantiating two concrete algorithms and proving that they output consistent estimators of the true kernel mean embedding of the data generating process, while satisfying the definition of differential privacy. The consistency results ensure that third-parties can carry out a wide variety of statistically founded computation on the released data, such as constructing consistent estimators of population statistics, estimating the Maximum Mean Discrepancy (MMD) between distributions, and two-sample testing (Gretton et al., 2012), or using the data in the kernel probabilistic programming framework for random variable arithmetics (Scho\u0308lkopf et al., 2015; Simon-Gabriel et al., 2016, Section 3), repeatedly and unlimitedly without being able to, or having to worry about, violating user privacy.\nOne of our algorithms is especially suited to the interesting scenario where a (small) subset of a database has already been published. This situation can arise in a wide variety of settings, for example, due to weaker privacy protections in\nthe past, due to a leak, or due to the presence of an incentive, financial or otherwise, for users to publish their data. In such a situation our algorithm provides a principled approach for reweighting the public data in such a way that the accuracy of statistical inferences on this dataset benefits from the larger sample size (including the private data), while maintaining differential privacy for the undisclosed data.\nIn summary, the contributions of this paper are:\n1. A new framework for designing database release algorithms with the guarantee of differential privacy. The framework uses kernel mean embeddings as intermediate database representations, so that the RKHS metric can be used to control accuracy of the released synthetic database in a principled manner (Section 3).\n2. Two instantiations of our framework in the form of two synthetic database algorithms, with proofs of their consistency, convergence rates and differential privacy, as well as basic empirical illustrations of their performance on synthetic datasets (Sections 4 and 5)."}, {"heading": "2. Background", "text": ""}, {"heading": "2.1. Differential Privacy", "text": "Definition 1 (Dwork, 2006). For \u03b5 > 0, \u03b4 \u2265 0, algorithmA is said to be (\u03b5, \u03b4)-differentially private if for all neighbouring databases D \u223c D\u2032 (differing in at most one element) and all measurable subsets S of the co-domain of A,\nP (A(D) \u2208 S) \u2264 e\u03b5P (A(D\u2032) \u2208 S) + \u03b4. (1)\nThe parameter \u03b5 controls the amount of information the algorithm can leak about an individual, while a positive \u03b4 allows the algorithm to produce an unlikely output that leaks more information, but only with probability up to \u03b4. This notion is sometimes called approximate differential privacy; an algorithm that is (\u03b5, 0)-differentially private is simply said to be \u03b5-differentially private. Note that any non-trivial differentially private algorithm must be randomised; the definition asserts that the distribution of algorithm outputs is not too sensitive to changing one row in the database.\nWhen the algorithm\u2019s output is a finite vector A(D) \u2208 RJ , two standard random perturbation mechanisms for making this output differentially private are the Laplace and Gaussian mechanisms. As the perturbation needs to mask the contribution of each individual entry of the database D, the scale of the added noise is closely linked to the notion of sensitivity, measuring how much the algorithm\u2019s output can change due to changing a single data point:\n\u22061 := sup D\u223cD\u2032\n\u2016A(D)\u2212A(D\u2032)\u20161 , (2)\n\u22062 := sup D\u223cD\u2032\n\u2016A(D)\u2212A(D\u2032)\u20162 . (3)\nThe Laplace mechanism adds i.i.d. Lap(\u22061/\u03b5) noise to each of the J coordinates of the output vector and ensures pure \u03b5-differential privacy, while the Gaussian mechanism adds i.i.d. N (0, \u03c32) noise to each coordinate, where \u03c32 > 2\u220622 ln(1.25/\u03b4)/\u03b5\n2, and ensures (\u03b5, \u03b4)-differential privacy. Applying these mechanisms thus requires computing (an upper bound on) the relevant sensitivity.\nDifferential privacy is preserved under post-processing: if an algorithm A is (\u03b5, \u03b4)-differentially private, then so is its sequential composition B(A(\u00b7)) with any other algorithm B that does not have direct or indirect access to the private database D (Dwork & Roth, 2014)."}, {"heading": "2.2. Kernels, RKHS, and Kernel Mean Embeddings", "text": "A kernel on a non-empty set (data type) X is a binary positive-definite function k(\u00b7, \u00b7) : X \u00d7 X \u2192 R. Intuitively it can be thought of as expressing the similarity between any two elements in X . The literature on kernels is vast and their properties are well studied (Scho\u0308lkopf & Smola, 2002); many kernels are known for a large variety of data types such as vectors, strings, time series, graphs, etc, and kernels can be composed to yield valid kernels for composite data types (e.g. the type of a database row containing both numerical and string data).\nThe kernel mean embedding (KME) of an X -valued random variable X in the RKHS is the function \u00b5kX : X \u2192 R, y 7\u2192 EX [k(X, y)], defined whenever EX [ \u221a k(X,X)] < \u221e (Smola et al., 2007). Several popular kernels have been proved to be characteristic (Fukumizu et al., 2008), in which case the map pX 7\u2192 \u00b5kX , where pX is the distribution of X , is injective. This means that no information about the distribution of X is lost when passing to its KME \u00b5kX .\nIn practice, the KME of a random variable X is approximated using a sample x1, . . . , xN drawn from X , which can be used to construct an empirical KME \u00b5\u0302kX of X in the RKHS: a function given by y 7\u2192 1N \u2211N n=1 k(xn, y). When the xn\u2019s are i.i.d., under a boundedness condition \u00b5\u0302kX converges to the true KME \u00b5kX at rate Op(N\u22121/2), independently of the dimension of X (Lopez-Paz et al., 2015)1. Our approach relies on the metric of the RKHS in which these KMEs live. The RKHS Hk is a space of functions, endowed with an inner product \u3008\u00b7, \u00b7\u3009Hk that satisfies the reproducing property \u3008k(x, \u00b7), h\u3009 = h(x) for all x \u2208 X and h \u2208 Hk. The inner product induces a norm \u2016 \u00b7 \u2016Hk , which can be used to measure distances \u2016\u00b5kX \u2212 \u00b5kY \u2016Hk between distributions of X and Y . This can be exploited for various\n1The KME can be viewed as a smoothed version of the density, which is easier to estimate than the density itself; rates of nonparametric density estimation or statistical powers of two-sample or independence tests involving pX are known to necessarily degrade with growing dimension (Tolstikhin et al., 2017, Section 4.3).\npurposes such as two-sample tests (Gretton et al., 2012), independence testing (Gretton et al., 2005), or one can attempt to minimise this distance in order to match one distribution to another.\nAn example of such minimisation are reduced set methods (Burges, 1996; Scho\u0308lkopf & Smola, 2002, Chap. 18), which replace a set of points S = {x1, . . . , xN} \u2286 X with a weighted set R = {(z1, w1), . . . , (zM , wM )} \u2286 X \u00d7 R (of potentially smaller size), where the new points zm can, but need not equal any of the xns, such that the KME computed using the reduced setR is close to the KME computed using the original set S, as measured by the RKHS norm:\n\u2225\u2225\u00b5kS \u2212 \u00b5kR\u2225\u2225Hk = \u2225\u2225\u2225\u2225\u2225 1N N\u2211 n=1 k(xn, \u00b7)\u2212 M\u2211 m=1 wmk(zm, \u00b7) \u2225\u2225\u2225\u2225\u2225 Hk .\nReduced set methods are usually motivated by the computational savings arising when |R| < |S|; we will invoke them mainly to replace a collection S of private data points with a (possibly weighted) set R of synthetic data points."}, {"heading": "3. Framework", "text": ""}, {"heading": "3.1. Problem Formulation", "text": "Throughout this work, we assume the following setup. A database curator wishes to publicly release a database D = {x1, . . . xN} \u2208 XN containing private data about N individuals, with each data point (database row) xn taking values in a non-empty set X . The set X can be arbitrarily rich, for example, it could be a product of Euclidean spaces, integer spaces, sets of strings, etc.; we only require availability of a kernel function k : X \u00d7 X \u2192 R on X . We assume that the N rows x1, . . . , xN in the database D can be thought of as i.i.d. observations from some X -valued data-generating random variable X (but see Section 7 for a discussion about relaxing this assumption). The database curator, wishing to protect the privacy of individuals in the database, seeks a database release mechanism that satisfies the definition of (\u03b5, \u03b4)-differential privacy, with \u03b5 > 0 and \u03b4 \u2265 0 given. The main purpose of releasing the database is to allow third parties to construct estimators of population statistics (i.e. properties of the distribution of X), but it is not known at the time of release what statistics the third-parties will be interested in.\nTo lighten notation, henceforth we drop the superscript k from KMEs (such as \u00b5kX ) and the subscript k from the RKHS Hk, whenever k is the kernel on X chosen by the database curator."}, {"heading": "3.2. Algorithm Template", "text": "We propose the following general algorithm template for differentially private database release:\n1. Construct a consistent estimator \u00b5\u0302X of the KME \u00b5X of X using the private database.\n2. Obtain a perturbed version \u00b5\u0303X of the constructed estimate \u00b5\u0302X to ensure differential privacy.\n3. Release a (potentially approximate) representation of \u00b5\u0303X in terms of a (possibly weighted) dataset {(z1, w1), . . . , (zM , wM )} \u2286 X \u00d7 R.\nThe released representation should be such that\u2211M m=1 wmk(zm, \u00b7) is a consistent estimator of the true KME \u00b5X , i.e. such that the RKHS distance between the two converges to 0 in probability as the private database size N , and together with it the synthetic database size M , go to infinity.\nEach step of this template admits several possibilities. For the first step we have discussed the standard empirical KME 1 N \u2211N n=1 k(xn, \u00b7) with x1, . . . , xN i.i.d. observations of X , but the framework remains valid with improved estimators such as kernel-based quadrature (Chen et al., 2010) or the shrinkage kernel mean estimators of (Muandet et al., 2016).\nAs the KMEs \u00b5\u0302X and \u00b5X live in the RKHSH of the kernel k, a natural mechanism for privatising \u00b5\u0302X in the second step would be to follow (Hall et al., 2013) and pointwise add to \u00b5\u0302X a suitably scaled sample path g of a Gaussian process with covariance function k(\u00b7, \u00b7). This does ensure (\u03b5, \u03b4)-differential privacy of the resulting function \u00b5\u0303X = \u00b5\u0302X + g, but unfortunately \u00b5\u0303X 6\u2208 H, because the RKHS norm \u2016g\u2016H of a Gaussian process sample path with the same kernel k is infinite almost surely (Rasmussen & Williams, 2005). While our framework allows pursuing this direction by, for example, moving to a larger function space that does contain the Gaussian process sample path, in this work we will present algorithms that achieve differential privacy by mapping \u00b5\u0302X into a finite-dimensional Hilbert space and then employing the standard Laplace or Gaussian mechanisms to the finite coordinate vector.\nDifferential privacy is preserved under post-processing, but the third step does require some care to ensure that private data is not leaked. Specifically, when several possible (approximate) representations \u00b5\u0303X \u2248 \u2211M m=1 wmk(zm, \u00b7) in terms of a weighted dataset (w1, z1), . . . , (wM , zM ) are possible, committing to a particular one reveals more information than just the function \u00b5\u0303X (consider, for example, the extreme case where the representation would be in terms of the private points x1, . . . , xN ). One thus needs to either control the privacy leak due to choosing a representation in a way that depends on the private data, or, as we do in our concrete algorithms below, choose a representation independently of the private data (but still minimising its RKHS distance to the privacy-protected \u00b5\u0303X )."}, {"heading": "3.3. Versatility", "text": "Algorithms in our framework release a possibly weighted synthetic dataset {(z1, w1), . . . , (zM , wM )} \u2286 X \u00d7R such that \u2211M m=1 wmk(zm, \u00b7) is a consistent estimator of the true KME \u00b5X of the data generating random variable X . This allows third-parties to perform a wide spectrum of statistical computation, all without having to worry about violating differential privacy:\n1. Kernel probabilistic programming (Scho\u0308lkopf et al., 2015): The versatility of our approach is greatly expanded thanks to the result of (Simon-Gabriel et al., 2016), who showed that under technical conditions, applying a continuous function f to all points zm in the synthetic dataset yields a consistent estimator \u2211M m=1 wmkf (f(zm), \u00b7) of the KME \u00b5f(X) of the\ntransformed random variable f(X), even when the points z1, . . . , zM are not i.i.d. (as they may not be, depending on the particular synthetic database release algorithm).\n2. Consistent estimation of population statistics: For any RKHS function h \u2208 H, we have \u3008\u00b5X , h\u3009H = E[h(X)], so a consistent estimator of \u00b5X yields a consistent estimator of the expectation of h(X). It can be evaluated using the reproducing kernel property:\nE[h(X)] = \u3008\u00b5X , h\u3009H \u2248 \u2329 M\u2211 m=1 wmk(zm, \u00b7), h \u232a H\n= M\u2211 m=1 wmh(zm). (4)\nFor example, approximating the indicator function 1S of a set S \u2286 X with functions in the RKHS allows estimating probabilities: E[1S(X)] = P[X \u2208 S] (note that 1S itself may not be an element of the RKHS).\n3. MMD estimation and two-sample testing (Gretton et al., 2012): Given another random variable Y on X , one can consistently estimate the Maximum Mean Discrepancy (MMD) distance \u2016\u00b5X \u2212 \u00b5Y \u2016H between the distributions of X and Y , and in particular to construct a two-sample test based on this distance. Given a sample y1, . . . , yL \u223c Y :\n\u2016\u00b5X \u2212 \u00b5Y \u2016H \u2248 \u2225\u2225\u2225\u2225\u2225 M\u2211 m=1 wmk(zm, \u00b7)\u2212 1 L L\u2211 l=1 k(yl, \u00b7) \u2225\u2225\u2225\u2225\u2225 H ,\nwhich can again be evaluated using the reproducing property.\n4. Subsequent use of synthetic data: Since the output of the algorithm is a (possibly weighted) database, thirdparties are free to use this data for arbitrary purposes,\nsuch as training any machine learning model on this data. Models trained purely on this data can be released with differential privacy guaranteed; however, the accuracy of such models on real data remains an empirical question that is beyond the scope of this work.\nAn orthogonal spectrum of versatility arises from the fact that the third step in the algorithm template can constrain the released dataset (z1, w1), . . . , (zM , wM ) to be more convenient or more computationally efficient for further processing. For example, one could fix the weights to uniform wm = 1 M to obtain an unweighted dataset, or to replace an expensive data type with a cheaper subset, such as requesting floats instead of doubles in the zm\u2019s. All this can be performed while an RKHS distance is available to control accuracy between \u00b5\u0303X and its released representation."}, {"heading": "3.4. Concrete Algorithms", "text": "As a first illustrative example, we describe how a particular case of an existing, but inefficient synthetic database algorithm already fits into our framework. The exponential mechanism (McSherry & Talwar, 2007) is a general mechanism for ensuring \u03b5-differential privacy, and in our setting it operates as follows: given a similarity measure s : XN \u00d7 XM \u2192 R between (private) databases of size N and (synthetic) databases of size M , output a random (synthetic) database R with probability proportional to exp( \u03b52\u22061 s(D,R)), where D is the actual private database and \u22061 is the L1 sensitivity of s w.r.t. D. This ensures \u03b5-differential privacy (McSherry & Talwar, 2007).\nTo fit this into our framework, we can take s(D,R) = \u2212\u2016\u00b5D \u2212 \u00b5R\u2016H to be the negative RKHS distance between the KMEs computed using D and R, and achieve \u03b5-differential privacy by releasing R with probability proportional to exp(\u2212 \u03b52\u22061 \u2016\u00b5D \u2212 \u00b5R\u2016H). This solves steps 2 and 3 of our general algorithm template simultaneously, as it directly samples a concrete representation of a \u201cperturbed\u201d KME \u00b5R. The algorithm essentially corresponds to the SmallDB algorithm of Blum et al. (2008), except for choosing the RKHS distance as a well-studied similarity measure between two databases.\nThe principal issue with this algorithm is its computational infeasibility except in trivial cases, as it requires sampling from a probability distribution supported on all potential synthetic databases, and employing an approximate sampling scheme can break the differential privacy guarantee of the exponential mechanism. In Sections 4 and 5 respectively, we describe two concrete synthetic database release algorithms that may possess failure modes where they become inefficient, but employing approximations in those cases can only affect their statistical accuracy, not the promise of differential privacy.\nAlgorithm 1 Differentially private database release via a synthetic data subspace of the RKHS Input: database D = {x1, . . . , xN} \u2286 X , kernel k on X , privacy parameters \u03b5 > 0 and \u03b4 > 0 Output: (\u03b5, \u03b4)-differentially private, weighted synthetic database (representing an estimate of \u00b5X in the RKHSH of k)\n1: M \u2190M(N) \u2208 \u03c9(1) \u2229 o(N2), number of synthetic data points to use 2: z1, . . . , zM \u2190 initialised deterministically or randomly from some distribution q on X 3: HM \u2190 Span({k(z1, \u00b7), . . . , k(zM , \u00b7)}) \u2264 H 4: b1, . . . , bF \u2190 orthonormal basis ofHM (obtained using, e.g. Gram-Schmidt) 5: \u00b5\u0302X \u2190 1N \u2211N n=1 k(xn, \u00b7), empirical KME of X inH\n6: \u00b5X \u2190 \u2211F f=1\u3008bf , \u00b5\u0302X\u3009Hbf =: \u2211F f=1 \u03b1fbf , projection of \u00b5\u0302X ontoHM 7: \u03b2 \u2190 \u03b1+N (0, 8 ln(1.25/\u03b4)N2\u03b52 IF ), an (\u03b5, \u03b4)-differentially private version of the coordinate vector \u03b1 (Gaussian mechanism) 8: \u00b5\u0303X \u2190 \u2211F f=1 \u03b2fbf = \u2211M m=1 wmk(zm, \u00b7), re-expressed in terms of k(zm, \u00b7)\u2019s 9: return (z1, w1), . . . , (zM , wM )"}, {"heading": "4. Perturbation in Synthetic-Data Subspace", "text": "In this section we describe an instantiation of the framework proposed in Section 3 that achieves differential privacy of the KME by projecting it onto a finite-dimensional subspace of the RKHS spanned by feature maps k(zm, \u00b7) of synthetic data points z1, . . . , zM , and perturbing the resulting finite coordinate vector. To ensure differential privacy, the synthetic data points are chosen independently of the private database. As a result, statistical efficiency of this approach will depend on the choice of synthetic data points, with efficiency increasing if there are enough synthetic data points to capture the patterns in the private data. Therefore this algorithm is especially suited to the scenario discussed in Section 1, where a part of the database (or of a similar one) has already been published, as this can serve as a good starting set for the synthetic data points.\nThe setting where some observations from X have already been released highlights the fact that differential privacy only protects against additional privacy violation due to an individual deciding to contribute to the private database; if a particular user\u2019s data has already been published, differential privacy does not protect against privacy violations based on exploiting this previously published data.\nThe algorithm is formalised as Algorithm 1 above. Lines 1- 2 choose synthetic data points z1, . . . , zM independently of the private data (only using the database size N ). Lines 3-4 construct the linear subspaceHM ofH spanned by feature maps of the chosen synthetic data points, and compute a (finite) basis for it. Only then the private data is accessed: the empirical KME \u00b5\u0302X is computed (line 5), projected onto the subspace HM and expressed in terms of the precomputed basis (line 6). The basis coefficients of the projection are then perturbed to achieve differential privacy (line 7), and the perturbed element \u00b5\u0303X \u2208 HM is then re-expressed in terms of the spanning set containing feature maps of synthetic data points (line 8). This expansion is finally released to the public (line 9).\nLine 1 stipulates that the number of synthetic data points M \u2192 \u221e as N \u2192 \u221e, but asymptotically slower than N2. This is to ensure that the privatisation noise added in the subspace HM to each coordinate is small enough overall to preserve consistency, as stated in the following Theorem 2. This theorem assures us that Algorithm 1 produces a consistent estimator of the true KME \u00b5X , if the synthetic data points are sampled from a distribution with sufficiently large support. Due to space constraints, all proofs appear in Appendix A.\nTheorem 2. Let X be a compact metric space and k a continuous kernel on X . If the synthetic data points z1, z2, . . . are sampled i.i.d. from a distribution q on X such that the support of X is included in the support of q, then Algorithm 1 outputs a consistent estimator of the KME \u00b5X :\u2211M m=1 wmk(zm, \u00b7) P\u2192 \u00b5X as N \u2192\u221e.\nAs discussed by Simon-Gabriel et al. (2016), these assumptions are usually satisfied: X can be taken to be compact whenever the data comes from measurements with any bounded range, and many kernels are continuous, including all kernels on discrete spaces (w.r.t. to the discrete topology).\nIn order to use the output of Algorithm 1 in the very general kernel probabilistic programming framework and obtain a consistent estimator of the KME \u00b5f(X) of f(X) for any continuous function f , there is a technical condition that the L1 norm \u2211M m=1 |wm| of the released weights may need to remain bounded by a constant as N \u2192\u221e (Simon-Gabriel et al., 2016). This is not enforced by Algorithm 1, but Theorem 11 in Appendix A.1 shows how a simple regularisation in the final stage of the algorithm achieves this without breaking consistency (or privacy).\nThe next result about Algorithm 1 shows that it is differentially private whenever k(x, x) \u2264 1 for all x \u2208 X . This is a weak assumption that holds for all normalised kernels, and can be achieved by simple rescaling for any bounded kernel (such that supx\u2208X k(x, x) < \u221e). When X is a compact domain, all continuous kernels are bounded.\nProposition 3. If k(x, x) \u2264 1 for all x \u2208 X , then Algorithm 1 is (\u03b5, \u03b4)-differentially private.\nRemark 4. One usually requires that \u03b4 decreases faster than polynomially with the database size N (Dwork & Roth, 2014). The proof of Theorem 2 remains valid whenever M(N) \u2208 o(N2/ ln(1.25/\u03b4(N))), so for example we could have \u03b4(N) = e\u2212 \u221a N and M(N) \u2208 o(N3/2).\nFor a finite private database, actual performance will heavily depend on how the synthetic data points are chosen. We consider the following two extreme scenarios:\n1. No publishable subset: No rows of the private database are, or can be made public unmodified.\n2. Publishable subset: A small proportion of the private database is already public, or can be made public.\nProposition 5 (Algorithm 1, No publishable subset). Say X is a bounded subset of RD, the kernel k is Lipschitz, and the synthetic data points z1, z2, . . . are sampled i.i.d. from a distribution q with density bounded away from 0 on any bounded subset of RD. Then M = M(N) can be chosen so that the output of Algorithm 1 converges to the true KME \u00b5X in RKHS norm at a rate Op(N\u22121/(D+1+c)), where c is any fixed positive number c > 0.\nUnsurprisingly, the convergence rate deteriorates with input dimension D, since without prior information about the private data manifold it is increasingly difficult for randomly sampled synthetic points to capture patterns in the private data. One of the main strengths of KMEs is that the empirical estimator converges to the true embedding at a rate\nOp(N\u22121/2) independently of the input dimension D, so we see that in this unfavourable scenario Algorithm 1 incurs a substantial privacy cost in high dimensions. On the other hand, if a small, but fixed proportion of the private database is publishable, then Algorithm 1 incurs no privacy cost in terms of the convergence rate:\nProposition 6 (Algorithm 1, Publishable subset). Say that a fixed proportion \u03b7 of the private database can be published unmodified. Using this part of the database as the synthetic data points, Algorithm 1 outputs a consistent estimator of \u00b5X that converges in RKHS norm at a rate Op(N\u22121/2).\nNote that in this scenario the rate Op(N\u22121/2) can be also achieved by uniform weighting of the synthetic data points, since \u00b5\u0302baseline := 1M \u2211M m=1 k(zm, \u00b7) with zm = xm is already a consistent estimator of \u00b5X (although based on a much smaller sample size M = \u03b7N N ). The purpose of Algorithm 1 is to find (generally non-uniform) w1, . . . , wM that reweight the public data points using the information in the large private dataset, but respecting differential privacy. Proposition 6 confirmed theoretically that this does not hurt the convergence rate, while Figure 1 shows empirically on two synthetic datasets of dimensions D = 2 and D = 5 that Algorithm 1 can in fact yield more accurate estimates of the KME than \u00b5\u0302baseline, especially when the proportion of public data points is small. This is encouraging, since obtaining permission to publish a larger subset of the private data unchanged will usually come at an increased cost. The ability to instead reweight a smaller public dataset in a differentially private manner using Algorithm 1 is therefore useful.\nAlgorithm 2 Differentially private database release via a random features RKHS Input: database D = {x1, . . . , xN} \u2286 X , kernel k on X , privacy parameters \u03b5 > 0 and \u03b4 > 0 Output: (\u03b5, \u03b4)-differentially private, weighted synthetic database (representing an estimate of \u00b5X in the RKHSH of k)\n1: J \u2190 J(N) \u2208 \u03c9(1) \u2229 o(N2), number of random features to use 2: \u03c6\u2190 random feature map X 7\u2192 RJ for kernel k with J features 3: \u00b5\u0302\u03c6X \u2190 1 N \u2211N n=1 \u03c6(xn) \u2208 RJ , empirical KME of X in RKHSH\u03c6 of the random features kernel k\u03c6(\u00b7, \u00b7) := \u03c6(\u00b7)T\u03c6(\u00b7) 4: \u00b5\u0303\u03c6X \u2190 \u00b5\u0302 \u03c6 X +N (0, 8 ln(1.25/\u03b4) N2\u03b52 IJ), an (\u03b5, \u03b4)-differentially private version of the vector \u00b5\u0302 \u03c6 X (Gaussian mechanism) 5: M \u2190M(N) \u2265 N , number of synthetic expansion points to use for representing \u00b5\u0303\u03c6X 6: (z1, w1), . . . , (zM , wM )\u2190 approximate \u00b5\u0303\u03c6X in the RKHSH\u03c6 using a Reduced set method:\n(z1, w1), . . . , (zM , wM ) \u2248 argmin (z\u20321,w \u2032 1),...,(z \u2032 M ,w \u2032 M ) s.t. \u2211 m |w \u2032 m|\u22641 \u2225\u2225\u2225\u2225\u2225 M\u2211 m=1 w\u2032m\u03c6(z \u2032 m)\u2212 \u00b5\u0303 \u03c6 X \u2225\u2225\u2225\u2225\u2225 H\u03c6\n(5)\n7: return (z1, w1), . . . , (zM , wM )"}, {"heading": "5. Perturbation in Random-Features RKHS", "text": "Another approach to ensuring differential privacy is to map the potentially infinite dimensional RKHS H of k into a different, finite-dimensional RKHSH\u03c6 using random features (Rahimi & Recht, 2007), privacy-protect the finite coordinate vector in this space (Chaudhuri et al., 2011), and then employ a reduced set method to find an expansion of the resulting RKHS element in terms of synthetic data points. In contrast to Algorithm 1, both the weights and locations of synthetic data points can be optimised here.\nThe algorithm is formalised as Algorithm 2 above. Lines 1- 2 pick the number J = J(N) of random features to use, and construct a random feature map \u03c6 with that many features. Lines 3-4 compute the empirical KME of X in the RKHS H\u03c6 corresponding to the kernel induced by the random features, and then privacy-protect the resulting finite, realvalued vector. Lines 5-6 run a blindly initialised Reduced set method to find a weighted synthetic dataset whose KME inH\u03c6 is close to the privacy-protected KME of the private database. Line 7 releases this weighted dataset to the public.\nThe following theorem confirms that Algorithm 2 outputs a consistent estimator of the true KME \u00b5X , provided that the optimisation problem (5) is solved exactly, and the random features converge to the kernel k uniformly on X . On compact sets X this requirement is satisfied by general schemes such as random Fourier features and random binning for shift-invariant kernels (Rahimi & Recht, 2007), or by random features for dot product kernels (Kar & Karnick, 2012).\nTheorem 7. If \u03c6(\u00b7)T\u03c6(\u00b7)\u2192 k(\u00b7, \u00b7) converges uniformly in X \u00d7 X as J \u2192 \u221e, then the output of Algorithm 2 is a consistent estimator of the true KME \u00b5X as N \u2192\u221e.\nMoreover, a uniform convergence rate for the random features, such as the one for random Fourier features by Sriperumbudur & Szabo (2015), can be used to derive a convergence rate for the output of Algorithm 2:\nProposition 8. If \u03c6(\u00b7)T\u03c6(\u00b7)\u2192 k(\u00b7, \u00b7) converges uniformly in X \u00d7X at a rate Op(J\u22121/2) as J \u2192\u221e, then J = J(N) can be chosen so that the output of Algorithm 2 converges to the true KME \u00b5X at a rate Op(N\u22121/3).\nThe empirical KME of the private database \u00b5\u0302X converges at a rateOp(N\u22121/2), so we see that under perfect optimisation, the privacy cost incurred by Algorithm 2 is a factor of N1/6. In practice performance will also depend on the Reduced set method used, and the computational budget allocated to it. Figure 2 shows how the incurred error (in terms of RKHS distance) varies with the number of synthetic data points M . The additional ability of Algorithm 2 to optimise the locations of the synthetic data points (rather than just the weights, as in Algorithm 1) seems to be more helpful in the higher-dimensional case D = 5, where the randomly sampled synthetic data points are less likely to land close to private data points.\nProposition 9. If \u2016\u03c6(x)\u20162 \u2264 1 for all x \u2208 X , then Algorithm 2 is (\u03b5, \u03b4)-differentially private.\nThis L2-boundedness requirement on the random feature vectors \u03c6(x) is reasonable under the weak assumption k(x, x) \u2264 1 for all x \u2208 X discussed in Section 4, as in that case \u2016\u03c6(x)\u201622 = \u03c6(x)T\u03c6(x) \u2248 k(x, x) \u2264 1."}, {"heading": "6. Related Work", "text": "Synthetic database release algorithms with a differential privacy guarantee have been studied in the literature before. Machanavajjhala et al. (2008) analyzed such a procedure for count data, ensuring privacy by sampling a distribution and then synthetic counts from a Dirichlet-Multinomial posterior. Blum et al. (2008) studied the exponential mechanism applied to synthetic database generation, which leads to a very general, but unfortunately inefficient algorithm (see also Section 3.4). Wasserman & Zhou (2010) provided a theoretical comparison of this algorithm to sampling synthetic\ndatabases from deterministically smoothed, or randomly perturbed histograms. Unlike our approach, these algorithms achieve differential privacy by sampling synthetic data points from a specific distribution, where resorting to approximate sampling can break the privacy guarantee. In our framework we propose to arrive at the synthetic database using a reduced set method, where poor performance could affect statistical usefulness of the synthetic database, but cannot break its differential privacy.\nZhou et al. (2009) and Kenthapadi et al. (2012) proposed randomised database compression schemes that yield synthetic databases useful for particular types of algorithms, while guaranteeing differential privacy. The former compresses the number of data points using a random linear or affine transformation of the entire database, and the result can be used by procedures that rely on the empirical covariance of the original data. The latter compresses the number of data point dimensions while approximately preserving distances between original, private data points.\nDifferentially private learning in a RKHS has also been studied, with Chaudhuri et al. (2011) and Rubinstein et al. (2012) having independently presented release mechanisms for the result of an empirical risk minimisation procedure (such as a SVM). Similarly to our Algorithm 2, they map data points into a finite-dimensional space defined by random features and carry out the privacy-protecting perturbation there. However, they do not require the final stage of invoking a Reduced set method to construct a synthetic database, because the output (such as a trained SVM) is only used for evaluation on test points, for which it suffices to additionally release the used random feature map \u03c6.\nAs our framework stipulates privacy-protecting an empirical\nKME, which is a function X \u2192 R, the work on differential privacy for functional data is of relevance. Hall et al. (2013) showed how an RKHS element can be made differentially private via pointwise addition of a Gaussian process sample path, but as discussed in Section 3.2, the resulting function is no longer an element of the RKHS. Recently, Alda\u0300 & Rubinstein (2017) proposed a general Bernstein mechanism for \u03b5-differentially private function release. The released function can be evaluated pointwise arbitrarily many times, but again, the geometry of the RKHS to which the unperturbed function belonged cannot be easily exploited anymore."}, {"heading": "7. Discussion", "text": "We proposed a framework for constructing differentially private synthetic database release algorithms, based on the idea of using KMEs in RKHS as intermediate database representations. To justify our framework, we presented two concrete algorithms and proved theoretical results guaranteeing their consistency and differential privacy. We also studied their finite-sample convergence rates, and provided empirical illustrations of their performance on synthetic datasets. We believe that exploring other instantiations of this framework, and comparing them theoretically and empirically, can be a fruitful direction for future research.\nThe i.i.d. assumption on database rows can be relaxed. For example, if they are identically distributed (as a random variable X), but not necessarily independent, the framework remains valid as long as a consistent estimator of the KME \u00b5X can be constructed from the database rows. A common situation where this arises is, for example, duplication of database rows due to user error."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Bharath Sriperumbudur and the anonymous reviewers for helpful feedback."}], "year": 2018, "references": [{"title": "The Bernstein mechanism: Function release under differential privacy", "authors": ["F. Ald\u00e0", "B.I.P. Rubinstein"], "venue": "In AAAI,", "year": 2017}, {"title": "A learning theory approach to non-interactive database privacy", "authors": ["A. Blum", "K. Ligett", "A. Roth"], "venue": "In 40th ACM Symposium on Theory of Computing,", "year": 2008}, {"title": "Simplified support vector decision rules", "authors": ["C.J.C. Burges"], "venue": "In ICML,", "year": 1996}, {"title": "Differentially private empirical risk", "authors": ["K. Chaudhuri", "C. Monteleoni", "A.D. Sarwate"], "venue": "minimization. JMLR,", "year": 2011}, {"title": "Super-samples from kernel herding", "authors": ["Y. Chen", "M. Welling", "A. Smola"], "venue": "In UAI,", "year": 2010}, {"title": "Differential privacy", "authors": ["C. Dwork"], "venue": "In 33rd International Conference on Automata, Languages and Programming (ICALP),", "year": 2006}, {"title": "The Algorithmic Foundations of Differential Privacy", "authors": ["C. Dwork", "A. Roth"], "venue": "Foundations and Trends in Theoretical Computer Science,", "year": 2014}, {"title": "Kernel measures of conditional dependence", "authors": ["K. Fukumizu", "A. Gretton", "X. Sun", "B. Sch\u00f6lkopf"], "venue": "In NIPS,", "year": 2008}, {"title": "Measuring statistical dependence with Hilbert-Schmidt norms", "authors": ["A. Gretton", "O. Bousquet", "A. Smola", "B. Sch\u00f6lkopf"], "venue": "In ALT,", "year": 2005}, {"title": "Random feature maps for dot product kernels", "authors": ["P. Kar", "H. Karnick"], "venue": "In AISTATS,", "year": 2012}, {"title": "Privacy via the Johnson-Lindenstrauss transform", "authors": ["K. Kenthapadi", "A. Korolova", "I. Mironov", "N. Mishra"], "venue": "[cs],", "year": 2012}, {"title": "Towards a learning theory of cause-effect inference", "authors": ["D. Lopez-Paz", "K. Muandet", "B. Sch\u00f6lkopf", "I. Tolstikhin"], "venue": "In ICML,", "year": 2015}, {"title": "Privacy: Theory meets practice on the map", "authors": ["A. Machanavajjhala", "D. Kifer", "J. Abowd", "J. Gehrke", "L. Vilhuber"], "venue": "In IEEE 24th International Conference on Data Engineering,", "year": 2008}, {"title": "Mechanism design via differential privacy", "authors": ["F. McSherry", "K. Talwar"], "venue": "In 48th Annual IEEE Symposium on Foundations of Computer Science (FOCS),", "year": 2007}, {"title": "Random features for large scale kernel machines", "authors": ["A. Rahimi", "B. Recht"], "venue": "In NIPS,", "year": 2007}, {"title": "Gaussian Processes for Machine Learning", "authors": ["C.E. Rasmussen", "C.K.I. Williams"], "year": 2005}, {"title": "Learning in a large function space: Privacy-preserving mechanisms for SVM learning", "authors": ["B.I.P. Rubinstein", "P.L. Bartlett", "L. Huang", "N. Taft"], "venue": "The Journal of Privacy and Confidentiality,", "year": 2012}, {"title": "Learning with Kernels: Support Vector Machines, Regularization, Optimization, and Beyond", "authors": ["B. Sch\u00f6lkopf", "A.J. Smola"], "year": 2002}, {"title": "Computing functions of random variables via Reproducing Kernel Hilbert Space representations", "authors": ["B. Sch\u00f6lkopf", "K. Muandet", "K. Fukumizu", "S. Harmeling", "J. Peters"], "venue": "Statistics and Computing,", "year": 2015}, {"title": "Consistent Kernel Mean Estimation for Functions of Random Variables", "authors": ["Simon-Gabriel", "C.-J", "A. \u015acibior", "I. Tolstikhin", "B. Sch\u00f6lkopf"], "venue": "In NIPS,", "year": 2016}, {"title": "A Hilbert space embedding for distributions", "authors": ["A. Smola", "A. Gretton", "L. Song", "B. Sch\u00f6lkopf"], "venue": "In ALT,", "year": 2007}, {"title": "Optimal rates for random Fourier features", "authors": ["B. Sriperumbudur", "Z. Szabo"], "venue": "In NIPS", "year": 2015}, {"title": "Universality, characteristic kernels and RKHS embedding of measures", "authors": ["B.K. Sriperumbudur", "K. Fukumizu", "G.R.G. Lanckriet"], "year": 2011}, {"title": "Minimax estimation of kernel mean embeddings", "authors": ["I. Tolstikhin", "B.K. Sriperumbudur", "K. Muandet"], "year": 2017}, {"title": "A statistical framework for differential privacy", "authors": ["L. Wasserman", "S. Zhou"], "venue": "Journal of the American Statistical Association,", "year": 2010}, {"title": "Differential privacy with compression", "authors": ["S. Zhou", "K. Ligett", "L. Wasserman"], "venue": "In IEEE International Conference on Symposium on Information Theory (ISIT),", "year": 2009}], "id": "SP:7625663bc7081f90b15a59b1466eb7b3d70afc5b", "authors": [{"name": "Matej Balog", "affiliations": []}, {"name": "Ilya Tolstikhin", "affiliations": []}, {"name": "Bernhard Sch\u00f6lkopf", "affiliations": []}], "abstractText": "We lay theoretical foundations for new database release mechanisms that allow third-parties to construct consistent estimators of population statistics, while ensuring that the privacy of each individual contributing to the database is protected. The proposed framework rests on two main ideas. First, releasing (an estimate of) the kernel mean embedding of the data generating random variable instead of the database itself still allows thirdparties to construct consistent estimators of a wide class of population statistics. Second, the algorithm can satisfy the definition of differential privacy by basing the released kernel mean embedding on entirely synthetic data points, while controlling accuracy through the metric available in a Reproducing Kernel Hilbert Space. We describe two instantiations of the proposed framework, suitable under different scenarios, and prove theoretical results guaranteeing differential privacy of the resulting algorithms and the consistency of estimators constructed from their outputs.", "title": "Differentially Private Database Release via Kernel Mean Embeddings"}