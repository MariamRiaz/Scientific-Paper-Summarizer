0	31	Robustness has always been a desirable property for natural language parsers: humans generate a variety of noisy outputs, such as ungrammatical webpages, speech disfluencies, and the text in language learner’s essays.
2	30	For example, a nonnative speaker of English might write “*I look in forward hear from you”, where in is inserted, to is deleted, and hearing is substituted incorrectly.
3	57	We propose a novel dependency parsing scheme that jointly parses and repairs ungrammatical sentences with these sorts of errors.
4	30	The parser is based on the non-directional easy-first (EF) parser introduced by Goldberg and Elhadad (2010) (GE herein), which iteratively adds the most probable arc until the parse tree is completed.
15	9	The EF parser has a list of partial structures p1, ..., pk (called pending) initialized with sentence tokens w1, ..., wn, and it keeps updating pending through derivations.
16	36	Unlike left-to-right (e.g., shift-reduce) parsing algorithms (Yamada and Matsumoto, 2003; Nivre, 2004), EF iteratively selects the best pair of adjoining tokens and chooses the direction of attachment: ATTACHLEFT or ATTACHRIGHT.
17	46	Once the action is committed, the corresponding dependency arc is added and the child token is removed from pending.
20	17	The parser is trained using the structured perceptron (Collins, 2002) to choose actions to take given a set of features expanded from templates.
21	27	The cost of actions is computed at every step by checking the validity: whether a new arc is included in the gold parse and whether the child already has all its children.
23	22	Since it is possible that there are multiple valid sequence of actions and it is important to examine a large search space, the parser is allowed to explore (possibly incorrect) actions with a certain probability, termed learning with exploration by Goldberg and Nivre (2013).
24	14	Error-repair variant of EF Error-repair nondirectional easy-first parsing scheme (EREF) is a variant of EF.
27	44	SUBSTITUTE replaces a token to a grammatically more probable token, DELETE removes an unnecessary token, and INSERT inserts a new token at a designated index.
31	28	Furthermore, the parser updates token indices in pending and repaired when INSERT or DELETE occurs.
32	9	Technically, when a token at i is deleted/inserted, the parser decrements/increments the indices that are k >= i (before executing the action) in pending, repaired, and parents and children in a (partial) dependency tree (Arcs).
33	12	To find the best candidate for SUBSTITUTE and INSERT efficiently, we restrict candidates to the same part-of-speech or pre-defined candidate list.
36	18	The validity of the new actions is computed by taking the edit distance (d) between the Gold tokens (w∗1 ... w ∗ r ) and the sentence state that the parser stores in repaired (ŵ1 ... ŵm).
38	33	One serious concern of EREF is that the new actions may cause an infinite loop during parsing (e.g., infinite SUBSTITUTE, or an alternative DELETE and INSERT sequence.).
39	8	To avoid this, we introduce two constraints: (1) edit flag and (2) edit limit.
49	12	We use the PTB for the dependency experiment, since there are no ungrammatical text corpora that has dependency annotation on the corrected texts by human.
50	11	We choose the following most frequent error types that are used in CoNLL 2013 shared task (Ng et al., 2013): 1.
62	58	For evaluation, we jointly parse and correct grammatical errors in the test set with different error injection rates (from 0% to 20%).
65	12	In the second experiment, we use the Treebank of Learner English (TLE) (Berzak et al., 2016) to see the grammaticality improvement in a real scenario.
72	24	Grammaticality is evaluated by a regression model (Heilman et al., 2014), which scores grammaticality on the ordinal scale (from 1 to 4).
83	11	The models with higher error-injection rates (E15 and E20) achieve 0.1 to 0.3 improvements that are statistically significant.
89	14	search space and training time.
90	175	The primary goal of this experiment is to see if the EREF is able to detect and correct grammatical errors.
102	55	We have presented an error-repair variant of the non-directional easy-first dependency parser.
103	22	We have introduced three new actions, SUBSTITUTE, INSERT, and DELETE into the parser so that it jointly parses and corrects grammatical errors in a sentence.
104	27	To address the issue of parsing incompletion due to the new actions, we have proposed simple constraints that keep track of editing history for each token and the total number of edits during derivation.
105	10	The experimental result has demonstrated robustness of EREF parsers against EF and grammaticality improvement.
