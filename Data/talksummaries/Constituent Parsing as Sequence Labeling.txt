0	16	Constituent parsing is a core problem in NLP where the goal is to obtain the syntactic structure of sentences expressed as a phrase structure tree.
1	65	Traditionally, constituent-based parsers have been built relying on chart-based, statistical models (Collins, 1997; Charniak, 2000; Petrov et al., 2006), which are accurate but slow, with typical speeds well below 10 sentences per second on modern CPUs (Kummerfeld et al., 2012).
2	5	Several authors have proposed more efficient approaches which are helpful to gain speed while preserving (or even improving) accuracy.
6	17	With an aim more related to our work, other authors have reduced constituency parsing to tasks that can be solved faster or in a more generic way.
9	5	Their approach makes it possible to use off-the-shelf dependency parsers for constituency parsing.
17	47	Contribution We propose a method to transform constituent parsing into sequence labeling.
18	8	This reduces it to the complexity of tasks such as part-of-speech (PoS) tagging, chunking or namedentity recognition.
19	7	First, we describe a method to linearize a tree into a sequence of labels (§2) of the same length of the sentence minus one.1 The label generated for each word encodes the number of common ancestors in the constituent tree between that word and the next, and the nonterminal symbol associated with the lowest common ancestor.
21	36	After applying collapsing techniques, the method can parse unary chains.
23	43	To do so, we rely on a recurrent sequence labeling model based on BILSTM’s (Hochreiter and Schmidhuber, 1997; Yang and Zhang, 2018).
24	28	We also test other models inspired in classic approaches for other tagging tasks (Schmid, 1994; Sha and Pereira, 2003).
25	48	We use the Penn Treebank (PTB) and the Penn Chinese Treebank (CTB) as testbeds.
26	15	The comparison against Vinyals et al. (2015), the closest work to ours, shows that our method is able to train more accurate parsers.
27	103	This is in spite of the fact that our approach addresses constituent parsing as a sequence labeling problem, which is simpler than a sequence-to-sequence problem, where the output sequence has variable/unknown length.
28	103	Despite being the first sequence labeling method for constituent parsing, our baselines achieve decent accuracy results in comparison to models coming from mature lines of research, and their speeds are the fastest reported to our knowledge.
29	13	2 Linearization of n-ary trees Notation and Preliminaries In what follows, we use bold style to refer to vectors and matrices (e.g x and W).
30	117	Let w=[w1, w2, ..., w|w|] be an input sequence of words, where wi ∈ V .
31	250	Let T|w| be the set of constituent trees with |w| leaf nodes that have no unary branches.
32	34	For now, we will assume that the constituent parsing problem consists in mapping each sentence w to a tree in T|w|, i.e., we assume that correct parses have no unary branches.
34	6	To reduce the problem to a sequence labeling task, we define a set of labels L that allows us to encode each tree in T|w| as a unique sequence of labels in L(|w|−1), via an encoding function Φ|w| : T|w| → L(|w|−1).
37	52	For the method to be correct, we need the encoding of trees to be complete (every tree in T|w| must be expressible as a label sequence, i.e., Φ|w| must be a function, so we have full coverage of constituent trees) and injective (so that the inverse function Φ−1|w| is well-defined).
38	3	Surjectivity is also desirable, so that the inverse is a function on L|w|−1, and the parser outputs a tree for any sequence of labels that the classifier can generate.
41	21	We handle ill-formed label sequences in §2.3.
42	72	Let wi be a word located at position i in the sentence, for 1 ≤ i ≤ |w| − 1.
43	72	We will assign it a 2-tuple label li = (ni, ci), where: ni is an integer that encodes the number of common ancestors between wi and wi+1, and ci is the nonterminal symbol at the lowest common ancestor.
45	32	Absolute scale: The simplest encoding is to make ni directly equal to the number of ancestors in common between wi and wi+1.
48	32	Figure 1 shows an example of a tree linearized according to both absolute and relative scales.
